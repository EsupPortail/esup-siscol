/*
 * INS Gestion V5
 * Il s'agit de l'API v5 de gestion - INS  __Apprenant :__ une personne qui a au moins une inscription validée dans Pegase.  __Inscription :__ se définit par une cible sur une période de mise en œuvre pour un apprenant. Une inscription peut prendre deux états : soit validée, soit annulée.  __Actualisation :__ permet de modifier les données liées à l’apprenant ou à l’inscription alors que la piste a déjà été payée ou validée.   __Gestion des erreurs :__   __200, 201 :__ opération effectuée   __400 :__ erreur de données sur les formats   __403 :__ accès refusé   __404 :__ contenu introuvable   __409 :__ donnée déjà existante   __500 :__ erreur serveur  # Changement majeur/cassant par rapport à V4  1. Suppression de `Inscription.noCandidat`.  1. Ajout de `VoeuBase.noCandidat` et `InscriptionComplete.noCandidat`.  1. Ajout de `VoeuBase.choisi`. 
 *
 * The version of the OpenAPI document: 24.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.esupportail.referentiel.pcscol.api;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;
import java.util.function.Consumer;

import org.esupportail.referentiel.pcscol.ins.model.ApprenantEtInscriptions;
import org.esupportail.referentiel.pcscol.ins.model.InscriptionComplete;
import org.esupportail.referentiel.pcscol.ins.model.Inscriptions;
import org.esupportail.referentiel.pcscol.ins.model.MotifAnnulation;
import org.esupportail.referentiel.pcscol.ins.model.Periode;
import org.esupportail.referentiel.pcscol.ins.model.StatsInscriptions;
import org.esupportail.referentiel.pcscol.ins.model.StatutIne;
import org.esupportail.referentiel.pcscol.ins.model.StatutInscriptionVoeu;
import org.esupportail.referentiel.pcscol.ins.model.StatutPaiementVoeu;
import org.esupportail.referentiel.pcscol.ins.model.StatutPiecesVoeu;
import org.esupportail.referentiel.pcscol.ins.model.TriInscription;
import org.esupportail.referentiel.pcscol.ins.model.TypeEnqueteSise;
import org.esupportail.referentiel.pcscol.ins.model.VoeuInscription;
import org.esupportail.referentiel.pcscol.invoker.ApiClient;
import org.esupportail.referentiel.pcscol.invoker.ApiException;
import org.esupportail.referentiel.pcscol.invoker.ApiResponse;
import org.esupportail.referentiel.pcscol.invoker.Pair;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-23T10:43:17.979817+02:00[Europe/Paris]", comments = "Generator version: 7.7.0")
public class InscriptionsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public InscriptionsApi() {
    this(new ApiClient());
  }

  public InscriptionsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Annule une inscription
   * Annule une inscription
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeApprenant Le code de l&#39;apprenant (required)
   * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
   * @param motifAnnulation Le motif d&#39;annulation de l&#39;inscription (required)
   * @param avecRemboursement L&#39;indicateur si l&#39;inscription doit être remboursée. (required)
   * @return VoeuInscription
   * @throws ApiException if fails to make API call
   */
  public VoeuInscription annuleInscription(String codeStructure, String codeApprenant, String codeVoeu, MotifAnnulation motifAnnulation, Boolean avecRemboursement) throws ApiException {
    ApiResponse<VoeuInscription> localVarResponse = annuleInscriptionWithHttpInfo(codeStructure, codeApprenant, codeVoeu, motifAnnulation, avecRemboursement);
    return localVarResponse.getData();
  }

  /**
   * Annule une inscription
   * Annule une inscription
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeApprenant Le code de l&#39;apprenant (required)
   * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
   * @param motifAnnulation Le motif d&#39;annulation de l&#39;inscription (required)
   * @param avecRemboursement L&#39;indicateur si l&#39;inscription doit être remboursée. (required)
   * @return ApiResponse&lt;VoeuInscription&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VoeuInscription> annuleInscriptionWithHttpInfo(String codeStructure, String codeApprenant, String codeVoeu, MotifAnnulation motifAnnulation, Boolean avecRemboursement) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = annuleInscriptionRequestBuilder(codeStructure, codeApprenant, codeVoeu, motifAnnulation, avecRemboursement);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("annuleInscription", localVarResponse);
        }
        return new ApiResponse<VoeuInscription>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VoeuInscription>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder annuleInscriptionRequestBuilder(String codeStructure, String codeApprenant, String codeVoeu, MotifAnnulation motifAnnulation, Boolean avecRemboursement) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling annuleInscription");
    }
    // verify the required parameter 'codeApprenant' is set
    if (codeApprenant == null) {
      throw new ApiException(400, "Missing the required parameter 'codeApprenant' when calling annuleInscription");
    }
    // verify the required parameter 'codeVoeu' is set
    if (codeVoeu == null) {
      throw new ApiException(400, "Missing the required parameter 'codeVoeu' when calling annuleInscription");
    }
    // verify the required parameter 'motifAnnulation' is set
    if (motifAnnulation == null) {
      throw new ApiException(400, "Missing the required parameter 'motifAnnulation' when calling annuleInscription");
    }
    // verify the required parameter 'avecRemboursement' is set
    if (avecRemboursement == null) {
      throw new ApiException(400, "Missing the required parameter 'avecRemboursement' when calling annuleInscription");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/gestion/inscription/{codeStructure}/{codeApprenant}/{codeVoeu}/"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{codeApprenant}", ApiClient.urlEncode(codeApprenant.toString()))
        .replace("{codeVoeu}", ApiClient.urlEncode(codeVoeu.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "motifAnnulation";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("motifAnnulation", motifAnnulation));
    localVarQueryParameterBaseName = "avecRemboursement";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("avecRemboursement", avecRemboursement));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Compter le nombre d&#39;inscriptions validées pour l&#39;objet de formation quelque soit son chemin
   * Compter le nombre d&#39;inscription validée pour l&#39;objet de formation
   * @param idOdf L&#39;id de l&#39;objet maquette (required)
   * @return StatsInscriptions
   * @throws ApiException if fails to make API call
   */
  public StatsInscriptions compterInscriptionValidees(String idOdf) throws ApiException {
    ApiResponse<StatsInscriptions> localVarResponse = compterInscriptionValideesWithHttpInfo(idOdf);
    return localVarResponse.getData();
  }

  /**
   * Compter le nombre d&#39;inscriptions validées pour l&#39;objet de formation quelque soit son chemin
   * Compter le nombre d&#39;inscription validée pour l&#39;objet de formation
   * @param idOdf L&#39;id de l&#39;objet maquette (required)
   * @return ApiResponse&lt;StatsInscriptions&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StatsInscriptions> compterInscriptionValideesWithHttpInfo(String idOdf) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = compterInscriptionValideesRequestBuilder(idOdf);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("compterInscriptionValidees", localVarResponse);
        }
        return new ApiResponse<StatsInscriptions>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<StatsInscriptions>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder compterInscriptionValideesRequestBuilder(String idOdf) throws ApiException {
    // verify the required parameter 'idOdf' is set
    if (idOdf == null) {
      throw new ApiException(400, "Missing the required parameter 'idOdf' when calling compterInscriptionValidees");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/gestion/inscriptions/stats/{idOdf}"
        .replace("{idOdf}", ApiClient.urlEncode(idOdf.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Compter le nombre d&#39;inscriptions validées pour la cible et sa descendance
   * Compter le nombre d&#39;inscription validée pour la cible correspondant au code métier codeCible
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codePeriode Code de la Periode (required)
   * @param codeChemin code chemin de la cible (séparateur \&quot;&gt;\&quot;) (required)
   * @return Map&lt;String, StatsInscriptions&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, StatsInscriptions> compterInscriptionValideesAvecDescendance(String codeStructure, String codePeriode, String codeChemin) throws ApiException {
    ApiResponse<Map<String, StatsInscriptions>> localVarResponse = compterInscriptionValideesAvecDescendanceWithHttpInfo(codeStructure, codePeriode, codeChemin);
    return localVarResponse.getData();
  }

  /**
   * Compter le nombre d&#39;inscriptions validées pour la cible et sa descendance
   * Compter le nombre d&#39;inscription validée pour la cible correspondant au code métier codeCible
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codePeriode Code de la Periode (required)
   * @param codeChemin code chemin de la cible (séparateur \&quot;&gt;\&quot;) (required)
   * @return ApiResponse&lt;Map&lt;String, StatsInscriptions&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Map<String, StatsInscriptions>> compterInscriptionValideesAvecDescendanceWithHttpInfo(String codeStructure, String codePeriode, String codeChemin) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = compterInscriptionValideesAvecDescendanceRequestBuilder(codeStructure, codePeriode, codeChemin);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("compterInscriptionValideesAvecDescendance", localVarResponse);
        }
        return new ApiResponse<Map<String, StatsInscriptions>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Map<String, StatsInscriptions>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder compterInscriptionValideesAvecDescendanceRequestBuilder(String codeStructure, String codePeriode, String codeChemin) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling compterInscriptionValideesAvecDescendance");
    }
    // verify the required parameter 'codePeriode' is set
    if (codePeriode == null) {
      throw new ApiException(400, "Missing the required parameter 'codePeriode' when calling compterInscriptionValideesAvecDescendance");
    }
    // verify the required parameter 'codeChemin' is set
    if (codeChemin == null) {
      throw new ApiException(400, "Missing the required parameter 'codeChemin' when calling compterInscriptionValideesAvecDescendance");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/gestion/inscriptions/stats/avec-enfants/{codeStructure}/{codePeriode}/{codeChemin}/"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{codePeriode}", ApiClient.urlEncode(codePeriode.toString()))
        .replace("{codeChemin}", ApiClient.urlEncode(codeChemin.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Impression du certificat de scolarité
   * Impression du certificat de scolarité
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeApprenant Le code de l&#39;apprenant (required)
   * @param codeVoeu Le code du voeu (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File imprimerCertificatDeScolarite(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
    ApiResponse<File> localVarResponse = imprimerCertificatDeScolariteWithHttpInfo(codeStructure, codeApprenant, codeVoeu);
    return localVarResponse.getData();
  }

  /**
   * Impression du certificat de scolarité
   * Impression du certificat de scolarité
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeApprenant Le code de l&#39;apprenant (required)
   * @param codeVoeu Le code du voeu (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> imprimerCertificatDeScolariteWithHttpInfo(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = imprimerCertificatDeScolariteRequestBuilder(codeStructure, codeApprenant, codeVoeu);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("imprimerCertificatDeScolarite", localVarResponse);
        }
        return new ApiResponse<File>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<File>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder imprimerCertificatDeScolariteRequestBuilder(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling imprimerCertificatDeScolarite");
    }
    // verify the required parameter 'codeApprenant' is set
    if (codeApprenant == null) {
      throw new ApiException(400, "Missing the required parameter 'codeApprenant' when calling imprimerCertificatDeScolarite");
    }
    // verify the required parameter 'codeVoeu' is set
    if (codeVoeu == null) {
      throw new ApiException(400, "Missing the required parameter 'codeVoeu' when calling imprimerCertificatDeScolarite");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/gestion/inscriptions/{codeStructure}/{codeApprenant}/{codeVoeu}/certificat-de-scolarite/"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{codeApprenant}", ApiClient.urlEncode(codeApprenant.toString()))
        .replace("{codeVoeu}", ApiClient.urlEncode(codeVoeu.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/pdf");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Récupération de l&#39;enquête Sise (déprécié)
   * Récupération de l&#39;enquête Sise (déprécié)
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codePeriode Code de la Periode (required)
   * @param typeEnqueteSise Liste des types d&#39;enquêtes sise (required)
   * @return File
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public File lireEnqueteSise(String codeStructure, String codePeriode, TypeEnqueteSise typeEnqueteSise) throws ApiException {
    ApiResponse<File> localVarResponse = lireEnqueteSiseWithHttpInfo(codeStructure, codePeriode, typeEnqueteSise);
    return localVarResponse.getData();
  }

  /**
   * Récupération de l&#39;enquête Sise (déprécié)
   * Récupération de l&#39;enquête Sise (déprécié)
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codePeriode Code de la Periode (required)
   * @param typeEnqueteSise Liste des types d&#39;enquêtes sise (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ApiResponse<File> lireEnqueteSiseWithHttpInfo(String codeStructure, String codePeriode, TypeEnqueteSise typeEnqueteSise) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = lireEnqueteSiseRequestBuilder(codeStructure, codePeriode, typeEnqueteSise);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("lireEnqueteSise", localVarResponse);
        }
        return new ApiResponse<File>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<File>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder lireEnqueteSiseRequestBuilder(String codeStructure, String codePeriode, TypeEnqueteSise typeEnqueteSise) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling lireEnqueteSise");
    }
    // verify the required parameter 'codePeriode' is set
    if (codePeriode == null) {
      throw new ApiException(400, "Missing the required parameter 'codePeriode' when calling lireEnqueteSise");
    }
    // verify the required parameter 'typeEnqueteSise' is set
    if (typeEnqueteSise == null) {
      throw new ApiException(400, "Missing the required parameter 'typeEnqueteSise' when calling lireEnqueteSise");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/gestion/enqueteSise/{codeStructure}/{codePeriode}"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{codePeriode}", ApiClient.urlEncode(codePeriode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "typeEnqueteSise";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("typeEnqueteSise", typeEnqueteSise));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "text/plain");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Récupération des inscriptions validées sur la période sélectionnée dont la CVEC est saisie, au format csv
   * Récupération des inscriptions validées sur la période sélectionnée dont la CVEC est saisie, au format csv
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codePeriode Code de la période (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File lireEnvoiCvec(String codeStructure, String codePeriode) throws ApiException {
    ApiResponse<File> localVarResponse = lireEnvoiCvecWithHttpInfo(codeStructure, codePeriode);
    return localVarResponse.getData();
  }

  /**
   * Récupération des inscriptions validées sur la période sélectionnée dont la CVEC est saisie, au format csv
   * Récupération des inscriptions validées sur la période sélectionnée dont la CVEC est saisie, au format csv
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codePeriode Code de la période (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> lireEnvoiCvecWithHttpInfo(String codeStructure, String codePeriode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = lireEnvoiCvecRequestBuilder(codeStructure, codePeriode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("lireEnvoiCvec", localVarResponse);
        }
        return new ApiResponse<File>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<File>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder lireEnvoiCvecRequestBuilder(String codeStructure, String codePeriode) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling lireEnvoiCvec");
    }
    // verify the required parameter 'codePeriode' is set
    if (codePeriode == null) {
      throw new ApiException(400, "Missing the required parameter 'codePeriode' when calling lireEnvoiCvec");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/gestion/inscriptions/{codeStructure}/periode/{codePeriode}/cvec/"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{codePeriode}", ApiClient.urlEncode(codePeriode.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/csv");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Chercher les données d&#39;une inscription
   * Chercher les données d&#39;une inscription
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeApprenant Le code de l&#39;apprenant (required)
   * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
   * @return InscriptionComplete
   * @throws ApiException if fails to make API call
   */
  public InscriptionComplete lireInscription(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
    ApiResponse<InscriptionComplete> localVarResponse = lireInscriptionWithHttpInfo(codeStructure, codeApprenant, codeVoeu);
    return localVarResponse.getData();
  }

  /**
   * Chercher les données d&#39;une inscription
   * Chercher les données d&#39;une inscription
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeApprenant Le code de l&#39;apprenant (required)
   * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
   * @return ApiResponse&lt;InscriptionComplete&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InscriptionComplete> lireInscriptionWithHttpInfo(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = lireInscriptionRequestBuilder(codeStructure, codeApprenant, codeVoeu);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("lireInscription", localVarResponse);
        }
        return new ApiResponse<InscriptionComplete>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InscriptionComplete>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder lireInscriptionRequestBuilder(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling lireInscription");
    }
    // verify the required parameter 'codeApprenant' is set
    if (codeApprenant == null) {
      throw new ApiException(400, "Missing the required parameter 'codeApprenant' when calling lireInscription");
    }
    // verify the required parameter 'codeVoeu' is set
    if (codeVoeu == null) {
      throw new ApiException(400, "Missing the required parameter 'codeVoeu' when calling lireInscription");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/gestion/inscription/{codeStructure}/{codeApprenant}/{codeVoeu}/"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{codeApprenant}", ApiClient.urlEncode(codeApprenant.toString()))
        .replace("{codeVoeu}", ApiClient.urlEncode(codeVoeu.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Récupérer le dossier complet d&#39;un apprenant
   * Récupérer le dossier complet d&#39;un apprenant  Utilisée par *Mon Dossier Web* 
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeApprenant Le code de l&#39;apprenant (required)
   * @return ApprenantEtInscriptions
   * @throws ApiException if fails to make API call
   */
  public ApprenantEtInscriptions lireInscriptions(String codeStructure, String codeApprenant) throws ApiException {
    ApiResponse<ApprenantEtInscriptions> localVarResponse = lireInscriptionsWithHttpInfo(codeStructure, codeApprenant);
    return localVarResponse.getData();
  }

  /**
   * Récupérer le dossier complet d&#39;un apprenant
   * Récupérer le dossier complet d&#39;un apprenant  Utilisée par *Mon Dossier Web* 
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeApprenant Le code de l&#39;apprenant (required)
   * @return ApiResponse&lt;ApprenantEtInscriptions&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ApprenantEtInscriptions> lireInscriptionsWithHttpInfo(String codeStructure, String codeApprenant) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = lireInscriptionsRequestBuilder(codeStructure, codeApprenant);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("lireInscriptions", localVarResponse);
        }
        return new ApiResponse<ApprenantEtInscriptions>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ApprenantEtInscriptions>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder lireInscriptionsRequestBuilder(String codeStructure, String codeApprenant) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling lireInscriptions");
    }
    // verify the required parameter 'codeApprenant' is set
    if (codeApprenant == null) {
      throw new ApiException(400, "Missing the required parameter 'codeApprenant' when calling lireInscriptions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/gestion/inscription/{codeStructure}/{codeApprenant}/"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{codeApprenant}", ApiClient.urlEncode(codeApprenant.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Chercher les inscriptions d&#39;un apprenant à partir d&#39;un numéro INE et d&#39;une période de mise en œuvre
   * Chercher les données d&#39;un apprenant à partir d&#39;un numéro INE
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeIne Le code INE de l&#39;apprenant (required)
   * @param codePeriode Le code de la période de référence (required)
   * @param statutInscription  (optional)
   * @return List&lt;InscriptionComplete&gt;
   * @throws ApiException if fails to make API call
   */
  public List<InscriptionComplete> lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriode(String codeStructure, String codeIne, String codePeriode, String statutInscription) throws ApiException {
    ApiResponse<List<InscriptionComplete>> localVarResponse = lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeWithHttpInfo(codeStructure, codeIne, codePeriode, statutInscription);
    return localVarResponse.getData();
  }

  /**
   * Chercher les inscriptions d&#39;un apprenant à partir d&#39;un numéro INE et d&#39;une période de mise en œuvre
   * Chercher les données d&#39;un apprenant à partir d&#39;un numéro INE
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeIne Le code INE de l&#39;apprenant (required)
   * @param codePeriode Le code de la période de référence (required)
   * @param statutInscription  (optional)
   * @return ApiResponse&lt;List&lt;InscriptionComplete&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<InscriptionComplete>> lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeWithHttpInfo(String codeStructure, String codeIne, String codePeriode, String statutInscription) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeRequestBuilder(codeStructure, codeIne, codePeriode, statutInscription);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriode", localVarResponse);
        }
        return new ApiResponse<List<InscriptionComplete>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<InscriptionComplete>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeRequestBuilder(String codeStructure, String codeIne, String codePeriode, String statutInscription) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriode");
    }
    // verify the required parameter 'codeIne' is set
    if (codeIne == null) {
      throw new ApiException(400, "Missing the required parameter 'codeIne' when calling lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriode");
    }
    // verify the required parameter 'codePeriode' is set
    if (codePeriode == null) {
      throw new ApiException(400, "Missing the required parameter 'codePeriode' when calling lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriode");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/gestion/apprenants/{codeStructure}/ine/{codeIne}/inscriptions/{codePeriode}/"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{codeIne}", ApiClient.urlEncode(codeIne.toString()))
        .replace("{codePeriode}", ApiClient.urlEncode(codePeriode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "statutInscription";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("statutInscription", statutInscription));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Récupération du récapitulatif des droits différenciés
   * Récupération du récapitulatif des droits différenciés
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codesPeriodes Code des périodes (required)
   * @param codeStructureBudgetaire Code de la structure budgétaire (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File lireRecapitulatifDroitsDifferencies(String codeStructure, List<String> codesPeriodes, String codeStructureBudgetaire) throws ApiException {
    ApiResponse<File> localVarResponse = lireRecapitulatifDroitsDifferenciesWithHttpInfo(codeStructure, codesPeriodes, codeStructureBudgetaire);
    return localVarResponse.getData();
  }

  /**
   * Récupération du récapitulatif des droits différenciés
   * Récupération du récapitulatif des droits différenciés
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codesPeriodes Code des périodes (required)
   * @param codeStructureBudgetaire Code de la structure budgétaire (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> lireRecapitulatifDroitsDifferenciesWithHttpInfo(String codeStructure, List<String> codesPeriodes, String codeStructureBudgetaire) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = lireRecapitulatifDroitsDifferenciesRequestBuilder(codeStructure, codesPeriodes, codeStructureBudgetaire);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("lireRecapitulatifDroitsDifferencies", localVarResponse);
        }
        return new ApiResponse<File>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<File>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder lireRecapitulatifDroitsDifferenciesRequestBuilder(String codeStructure, List<String> codesPeriodes, String codeStructureBudgetaire) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling lireRecapitulatifDroitsDifferencies");
    }
    // verify the required parameter 'codesPeriodes' is set
    if (codesPeriodes == null) {
      throw new ApiException(400, "Missing the required parameter 'codesPeriodes' when calling lireRecapitulatifDroitsDifferencies");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/gestion/droits-differencies/{codeStructure}"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "codesPeriodes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "codesPeriodes", codesPeriodes));
    localVarQueryParameterBaseName = "codeStructureBudgetaire";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("codeStructureBudgetaire", codeStructureBudgetaire));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "text/plain");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Liste des inscriptions validées [usage QA]
   * Liste des inscriptions validées
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param statutsInscription liste des statusInscription à filtrer (optional)
   * @param statutsPieces liste des statusPiece à filtrer (optional)
   * @param statutsPaiement liste des statutPaiement à filtrer (optional)
   * @param tri liste des tri (optional)
   * @param rechercheIne Recherche en texte libre pour filtrer les réponses sur le champ INE. (optional)
   * @param recherche Recherche en texte libre pour filtrer les réponses sur les champs (nom, prénom, INE date de naissance). (optional)
   * @param periode Periode (optional)
   * @param objetMaquette Correspond à la dernière particule du chemin de la cible (optional)
   * @param nomOuPrenom valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
   * @param nomDeNaissance valeur correspondant au nom de naissance de l&#39;apprenant (optional)
   * @param prenom valeur correspondant au prénom de l&#39;apprenant (optional)
   * @param codeApprenant valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
   * @param ine valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
   * @param statutsIne liste des statutsIne à filtrer (optional)
   * @param limit limit nombre des inscriptions à récupérer (utiliser la valeur 0 pour ne pas avoir de limitation). (optional, default to 100)
   * @return Inscriptions
   * @throws ApiException if fails to make API call
   */
  public Inscriptions listerInscriptionsValidees(String codeStructure, List<StatutInscriptionVoeu> statutsInscription, List<StatutPiecesVoeu> statutsPieces, List<StatutPaiementVoeu> statutsPaiement, List<TriInscription> tri, String rechercheIne, String recherche, String periode, String objetMaquette, String nomOuPrenom, String nomDeNaissance, String prenom, String codeApprenant, String ine, List<StatutIne> statutsIne, Integer limit) throws ApiException {
    ApiResponse<Inscriptions> localVarResponse = listerInscriptionsValideesWithHttpInfo(codeStructure, statutsInscription, statutsPieces, statutsPaiement, tri, rechercheIne, recherche, periode, objetMaquette, nomOuPrenom, nomDeNaissance, prenom, codeApprenant, ine, statutsIne, limit);
    return localVarResponse.getData();
  }

  /**
   * Liste des inscriptions validées [usage QA]
   * Liste des inscriptions validées
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param statutsInscription liste des statusInscription à filtrer (optional)
   * @param statutsPieces liste des statusPiece à filtrer (optional)
   * @param statutsPaiement liste des statutPaiement à filtrer (optional)
   * @param tri liste des tri (optional)
   * @param rechercheIne Recherche en texte libre pour filtrer les réponses sur le champ INE. (optional)
   * @param recherche Recherche en texte libre pour filtrer les réponses sur les champs (nom, prénom, INE date de naissance). (optional)
   * @param periode Periode (optional)
   * @param objetMaquette Correspond à la dernière particule du chemin de la cible (optional)
   * @param nomOuPrenom valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
   * @param nomDeNaissance valeur correspondant au nom de naissance de l&#39;apprenant (optional)
   * @param prenom valeur correspondant au prénom de l&#39;apprenant (optional)
   * @param codeApprenant valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
   * @param ine valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
   * @param statutsIne liste des statutsIne à filtrer (optional)
   * @param limit limit nombre des inscriptions à récupérer (utiliser la valeur 0 pour ne pas avoir de limitation). (optional, default to 100)
   * @return ApiResponse&lt;Inscriptions&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Inscriptions> listerInscriptionsValideesWithHttpInfo(String codeStructure, List<StatutInscriptionVoeu> statutsInscription, List<StatutPiecesVoeu> statutsPieces, List<StatutPaiementVoeu> statutsPaiement, List<TriInscription> tri, String rechercheIne, String recherche, String periode, String objetMaquette, String nomOuPrenom, String nomDeNaissance, String prenom, String codeApprenant, String ine, List<StatutIne> statutsIne, Integer limit) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listerInscriptionsValideesRequestBuilder(codeStructure, statutsInscription, statutsPieces, statutsPaiement, tri, rechercheIne, recherche, periode, objetMaquette, nomOuPrenom, nomDeNaissance, prenom, codeApprenant, ine, statutsIne, limit);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listerInscriptionsValidees", localVarResponse);
        }
        return new ApiResponse<Inscriptions>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Inscriptions>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listerInscriptionsValideesRequestBuilder(String codeStructure, List<StatutInscriptionVoeu> statutsInscription, List<StatutPiecesVoeu> statutsPieces, List<StatutPaiementVoeu> statutsPaiement, List<TriInscription> tri, String rechercheIne, String recherche, String periode, String objetMaquette, String nomOuPrenom, String nomDeNaissance, String prenom, String codeApprenant, String ine, List<StatutIne> statutsIne, Integer limit) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling listerInscriptionsValidees");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/gestion/inscriptions/{codeStructure}/"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "statutsInscription";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "statutsInscription", statutsInscription));
    localVarQueryParameterBaseName = "statutsPieces";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "statutsPieces", statutsPieces));
    localVarQueryParameterBaseName = "statutsPaiement";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "statutsPaiement", statutsPaiement));
    localVarQueryParameterBaseName = "tri";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "tri", tri));
    localVarQueryParameterBaseName = "rechercheIne";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rechercheIne", rechercheIne));
    localVarQueryParameterBaseName = "recherche";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("recherche", recherche));
    localVarQueryParameterBaseName = "periode";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("periode", periode));
    localVarQueryParameterBaseName = "objetMaquette";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("objetMaquette", objetMaquette));
    localVarQueryParameterBaseName = "nomOuPrenom";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nomOuPrenom", nomOuPrenom));
    localVarQueryParameterBaseName = "nomDeNaissance";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nomDeNaissance", nomDeNaissance));
    localVarQueryParameterBaseName = "prenom";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("prenom", prenom));
    localVarQueryParameterBaseName = "codeApprenant";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("codeApprenant", codeApprenant));
    localVarQueryParameterBaseName = "ine";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ine", ine));
    localVarQueryParameterBaseName = "statutsIne";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "statutsIne", statutsIne));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Exporter la liste des inscriptions validées au format csv
   * Liste des inscriptions validées au format csv
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param statutsInscription liste des statusInscription à filtrer (optional)
   * @param statutsPieces liste des statusPiece à filtrer (optional)
   * @param statutsPaiement liste des statutPaiement à filtrer (optional)
   * @param tri liste des tri (optional)
   * @param rechercheIne Recherche en texte libre pour filtrer les réponses sur le champ INE. (optional)
   * @param recherche Recherche en texte libre pour filtrer les réponses sur les champs (nom, prénom, INE date de naissance). (optional)
   * @param periode Periode (optional)
   * @param objetMaquette Correspond à la dernière particule du chemin de la cible (optional)
   * @param nomOuPrenom valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
   * @param nomDeNaissance valeur correspondant au nom de naissance de l&#39;apprenant (optional)
   * @param prenom valeur correspondant au prénom de l&#39;apprenant (optional)
   * @param codeApprenant valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
   * @param ine valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
   * @param statutsIne liste des statutsIne à filtrer (optional)
   * @param limit limit nombre des inscriptions à récupérer (utiliser la valeur 0 pour ne pas avoir de limitation). (optional, default to 100)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File listerInscriptionsValideesCSV(String codeStructure, List<StatutInscriptionVoeu> statutsInscription, List<StatutPiecesVoeu> statutsPieces, List<StatutPaiementVoeu> statutsPaiement, List<TriInscription> tri, String rechercheIne, String recherche, String periode, String objetMaquette, String nomOuPrenom, String nomDeNaissance, String prenom, String codeApprenant, String ine, List<StatutIne> statutsIne, Integer limit) throws ApiException {
    ApiResponse<File> localVarResponse = listerInscriptionsValideesCSVWithHttpInfo(codeStructure, statutsInscription, statutsPieces, statutsPaiement, tri, rechercheIne, recherche, periode, objetMaquette, nomOuPrenom, nomDeNaissance, prenom, codeApprenant, ine, statutsIne, limit);
    return localVarResponse.getData();
  }

  /**
   * Exporter la liste des inscriptions validées au format csv
   * Liste des inscriptions validées au format csv
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param statutsInscription liste des statusInscription à filtrer (optional)
   * @param statutsPieces liste des statusPiece à filtrer (optional)
   * @param statutsPaiement liste des statutPaiement à filtrer (optional)
   * @param tri liste des tri (optional)
   * @param rechercheIne Recherche en texte libre pour filtrer les réponses sur le champ INE. (optional)
   * @param recherche Recherche en texte libre pour filtrer les réponses sur les champs (nom, prénom, INE date de naissance). (optional)
   * @param periode Periode (optional)
   * @param objetMaquette Correspond à la dernière particule du chemin de la cible (optional)
   * @param nomOuPrenom valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
   * @param nomDeNaissance valeur correspondant au nom de naissance de l&#39;apprenant (optional)
   * @param prenom valeur correspondant au prénom de l&#39;apprenant (optional)
   * @param codeApprenant valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
   * @param ine valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
   * @param statutsIne liste des statutsIne à filtrer (optional)
   * @param limit limit nombre des inscriptions à récupérer (utiliser la valeur 0 pour ne pas avoir de limitation). (optional, default to 100)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> listerInscriptionsValideesCSVWithHttpInfo(String codeStructure, List<StatutInscriptionVoeu> statutsInscription, List<StatutPiecesVoeu> statutsPieces, List<StatutPaiementVoeu> statutsPaiement, List<TriInscription> tri, String rechercheIne, String recherche, String periode, String objetMaquette, String nomOuPrenom, String nomDeNaissance, String prenom, String codeApprenant, String ine, List<StatutIne> statutsIne, Integer limit) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listerInscriptionsValideesCSVRequestBuilder(codeStructure, statutsInscription, statutsPieces, statutsPaiement, tri, rechercheIne, recherche, periode, objetMaquette, nomOuPrenom, nomDeNaissance, prenom, codeApprenant, ine, statutsIne, limit);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listerInscriptionsValideesCSV", localVarResponse);
        }
        return new ApiResponse<File>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<File>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listerInscriptionsValideesCSVRequestBuilder(String codeStructure, List<StatutInscriptionVoeu> statutsInscription, List<StatutPiecesVoeu> statutsPieces, List<StatutPaiementVoeu> statutsPaiement, List<TriInscription> tri, String rechercheIne, String recherche, String periode, String objetMaquette, String nomOuPrenom, String nomDeNaissance, String prenom, String codeApprenant, String ine, List<StatutIne> statutsIne, Integer limit) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling listerInscriptionsValideesCSV");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/gestion/inscriptions/{codeStructure}/csv"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "statutsInscription";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "statutsInscription", statutsInscription));
    localVarQueryParameterBaseName = "statutsPieces";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "statutsPieces", statutsPieces));
    localVarQueryParameterBaseName = "statutsPaiement";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "statutsPaiement", statutsPaiement));
    localVarQueryParameterBaseName = "tri";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "tri", tri));
    localVarQueryParameterBaseName = "rechercheIne";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rechercheIne", rechercheIne));
    localVarQueryParameterBaseName = "recherche";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("recherche", recherche));
    localVarQueryParameterBaseName = "periode";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("periode", periode));
    localVarQueryParameterBaseName = "objetMaquette";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("objetMaquette", objetMaquette));
    localVarQueryParameterBaseName = "nomOuPrenom";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nomOuPrenom", nomOuPrenom));
    localVarQueryParameterBaseName = "nomDeNaissance";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nomDeNaissance", nomDeNaissance));
    localVarQueryParameterBaseName = "prenom";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("prenom", prenom));
    localVarQueryParameterBaseName = "codeApprenant";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("codeApprenant", codeApprenant));
    localVarQueryParameterBaseName = "ine";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ine", ine));
    localVarQueryParameterBaseName = "statutsIne";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "statutsIne", statutsIne));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "text/csv");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Lire les périodes pour un établissement
   * Lire les périodes pour un établissement
   * @param codeStructure Le code de l&#39;établissement (required)
   * @return List&lt;Periode&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Periode> listerPeriodes(String codeStructure) throws ApiException {
    ApiResponse<List<Periode>> localVarResponse = listerPeriodesWithHttpInfo(codeStructure);
    return localVarResponse.getData();
  }

  /**
   * Lire les périodes pour un établissement
   * Lire les périodes pour un établissement
   * @param codeStructure Le code de l&#39;établissement (required)
   * @return ApiResponse&lt;List&lt;Periode&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Periode>> listerPeriodesWithHttpInfo(String codeStructure) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listerPeriodesRequestBuilder(codeStructure);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listerPeriodes", localVarResponse);
        }
        return new ApiResponse<List<Periode>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Periode>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listerPeriodesRequestBuilder(String codeStructure) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling listerPeriodes");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/gestion/periodes/{codeStructure}/"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Vérification de l&#39;existence d&#39;affectations pour cette inscription
   * Vérification s&#39;il existe des affectations sur une inscription spécifique
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeApprenant Le code de l&#39;apprenant (required)
   * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
   * @return Boolean
   * @throws ApiException if fails to make API call
   */
  public Boolean verifierExistanceAffectation(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
    ApiResponse<Boolean> localVarResponse = verifierExistanceAffectationWithHttpInfo(codeStructure, codeApprenant, codeVoeu);
    return localVarResponse.getData();
  }

  /**
   * Vérification de l&#39;existence d&#39;affectations pour cette inscription
   * Vérification s&#39;il existe des affectations sur une inscription spécifique
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeApprenant Le code de l&#39;apprenant (required)
   * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
   * @return ApiResponse&lt;Boolean&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Boolean> verifierExistanceAffectationWithHttpInfo(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = verifierExistanceAffectationRequestBuilder(codeStructure, codeApprenant, codeVoeu);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("verifierExistanceAffectation", localVarResponse);
        }
        return new ApiResponse<Boolean>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Boolean>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder verifierExistanceAffectationRequestBuilder(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling verifierExistanceAffectation");
    }
    // verify the required parameter 'codeApprenant' is set
    if (codeApprenant == null) {
      throw new ApiException(400, "Missing the required parameter 'codeApprenant' when calling verifierExistanceAffectation");
    }
    // verify the required parameter 'codeVoeu' is set
    if (codeVoeu == null) {
      throw new ApiException(400, "Missing the required parameter 'codeVoeu' when calling verifierExistanceAffectation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/gestion/inscription/verifier-affectation/{codeStructure}/{codeApprenant}/{codeVoeu}/"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{codeApprenant}", ApiClient.urlEncode(codeApprenant.toString()))
        .replace("{codeVoeu}", ApiClient.urlEncode(codeVoeu.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * verifie la possibilité d&#39;une réinscription, true si OK, false si KO
   * verifie si une reinscription est possible pour un apprenant sur un cursus donné
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeApprenant Le code de l&#39;apprenant (required)
   * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
   * @return Boolean
   * @throws ApiException if fails to make API call
   */
  public Boolean verifierReinscriptionPossible(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
    ApiResponse<Boolean> localVarResponse = verifierReinscriptionPossibleWithHttpInfo(codeStructure, codeApprenant, codeVoeu);
    return localVarResponse.getData();
  }

  /**
   * verifie la possibilité d&#39;une réinscription, true si OK, false si KO
   * verifie si une reinscription est possible pour un apprenant sur un cursus donné
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeApprenant Le code de l&#39;apprenant (required)
   * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
   * @return ApiResponse&lt;Boolean&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Boolean> verifierReinscriptionPossibleWithHttpInfo(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = verifierReinscriptionPossibleRequestBuilder(codeStructure, codeApprenant, codeVoeu);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("verifierReinscriptionPossible", localVarResponse);
        }
        return new ApiResponse<Boolean>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Boolean>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder verifierReinscriptionPossibleRequestBuilder(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling verifierReinscriptionPossible");
    }
    // verify the required parameter 'codeApprenant' is set
    if (codeApprenant == null) {
      throw new ApiException(400, "Missing the required parameter 'codeApprenant' when calling verifierReinscriptionPossible");
    }
    // verify the required parameter 'codeVoeu' is set
    if (codeVoeu == null) {
      throw new ApiException(400, "Missing the required parameter 'codeVoeu' when calling verifierReinscriptionPossible");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/gestion/inscription/verifier/{codeStructure}/{codeApprenant}/{codeVoeu}/"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{codeApprenant}", ApiClient.urlEncode(codeApprenant.toString()))
        .replace("{codeVoeu}", ApiClient.urlEncode(codeVoeu.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
