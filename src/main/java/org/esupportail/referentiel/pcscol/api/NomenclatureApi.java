/*
 * REF v1 - Référentiel
 * Liste l'ensemble des services et des opérations disponibles dans le module Referentiel
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.esupportail.referentiel.pcscol.api;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.StringJoiner;
import java.util.function.Consumer;

import org.esupportail.referentiel.pcscol.invoker.ApiClient;
import org.esupportail.referentiel.pcscol.invoker.ApiException;
import org.esupportail.referentiel.pcscol.invoker.ApiResponse;
import org.esupportail.referentiel.pcscol.invoker.Pair;
import org.esupportail.referentiel.pcscol.ref_api.model.CodeGenere;
import org.esupportail.referentiel.pcscol.ref_api.model.Nomenclature;
import org.esupportail.referentiel.pcscol.ref_api.model.Pagination;
import org.esupportail.referentiel.pcscol.ref_api.model.Predicats;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-30T09:24:02.851634+02:00[Europe/Paris]", comments = "Generator version: 7.7.0")
public class NomenclatureApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public NomenclatureApi() {
    this(new ApiClient());
  }

  public NomenclatureApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Créer une nomenclature
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param codeNomenclature Le code de la nomenclature (required)
   * @param nomenclature La nomenclature à créer (required)
   * @throws ApiException if fails to make API call
   */
  public void creerNomenclature(String codeStructure, String codeNomenclature, Nomenclature nomenclature) throws ApiException {
    creerNomenclatureWithHttpInfo(codeStructure, codeNomenclature, nomenclature);
  }

  /**
   * Créer une nomenclature
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param codeNomenclature Le code de la nomenclature (required)
   * @param nomenclature La nomenclature à créer (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> creerNomenclatureWithHttpInfo(String codeStructure, String codeNomenclature, Nomenclature nomenclature) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = creerNomenclatureRequestBuilder(codeStructure, codeNomenclature, nomenclature);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("creerNomenclature", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder creerNomenclatureRequestBuilder(String codeStructure, String codeNomenclature, Nomenclature nomenclature) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling creerNomenclature");
    }
    // verify the required parameter 'codeNomenclature' is set
    if (codeNomenclature == null) {
      throw new ApiException(400, "Missing the required parameter 'codeNomenclature' when calling creerNomenclature");
    }
    // verify the required parameter 'nomenclature' is set
    if (nomenclature == null) {
      throw new ApiException(400, "Missing the required parameter 'nomenclature' when calling creerNomenclature");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nomenclatures/{codeNomenclature}/structure/{codeStructure}"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{codeNomenclature}", ApiClient.urlEncode(codeNomenclature.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(nomenclature);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Créer ou modifier une nomenclature [usage QA]
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param codeNomenclature Le code de la nomenclature (required)
   * @param nomenclature La nomenclature à créer ou à modifier (required)
   * @return Nomenclature
   * @throws ApiException if fails to make API call
   */
  public Nomenclature creerOuModifierNomenclature(String codeStructure, String codeNomenclature, Nomenclature nomenclature) throws ApiException {
    ApiResponse<Nomenclature> localVarResponse = creerOuModifierNomenclatureWithHttpInfo(codeStructure, codeNomenclature, nomenclature);
    return localVarResponse.getData();
  }

  /**
   * Créer ou modifier une nomenclature [usage QA]
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param codeNomenclature Le code de la nomenclature (required)
   * @param nomenclature La nomenclature à créer ou à modifier (required)
   * @return ApiResponse&lt;Nomenclature&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Nomenclature> creerOuModifierNomenclatureWithHttpInfo(String codeStructure, String codeNomenclature, Nomenclature nomenclature) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = creerOuModifierNomenclatureRequestBuilder(codeStructure, codeNomenclature, nomenclature);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("creerOuModifierNomenclature", localVarResponse);
        }
        return new ApiResponse<Nomenclature>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Nomenclature>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder creerOuModifierNomenclatureRequestBuilder(String codeStructure, String codeNomenclature, Nomenclature nomenclature) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling creerOuModifierNomenclature");
    }
    // verify the required parameter 'codeNomenclature' is set
    if (codeNomenclature == null) {
      throw new ApiException(400, "Missing the required parameter 'codeNomenclature' when calling creerOuModifierNomenclature");
    }
    // verify the required parameter 'nomenclature' is set
    if (nomenclature == null) {
      throw new ApiException(400, "Missing the required parameter 'nomenclature' when calling creerOuModifierNomenclature");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nomenclatures/{codeNomenclature}/creerouModifier/structure/{codeStructure}"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{codeNomenclature}", ApiClient.urlEncode(codeNomenclature.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(nomenclature);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Créer une nomenclature sans enregistrer
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param codeNomenclature Le code de la nomenclature (required)
   * @param nomenclature La nomenclature pour tenter la création (required)
   * @throws ApiException if fails to make API call
   */
  public void creerSansEnregistrerNomenclature(String codeStructure, String codeNomenclature, Nomenclature nomenclature) throws ApiException {
    creerSansEnregistrerNomenclatureWithHttpInfo(codeStructure, codeNomenclature, nomenclature);
  }

  /**
   * Créer une nomenclature sans enregistrer
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param codeNomenclature Le code de la nomenclature (required)
   * @param nomenclature La nomenclature pour tenter la création (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> creerSansEnregistrerNomenclatureWithHttpInfo(String codeStructure, String codeNomenclature, Nomenclature nomenclature) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = creerSansEnregistrerNomenclatureRequestBuilder(codeStructure, codeNomenclature, nomenclature);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("creerSansEnregistrerNomenclature", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder creerSansEnregistrerNomenclatureRequestBuilder(String codeStructure, String codeNomenclature, Nomenclature nomenclature) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling creerSansEnregistrerNomenclature");
    }
    // verify the required parameter 'codeNomenclature' is set
    if (codeNomenclature == null) {
      throw new ApiException(400, "Missing the required parameter 'codeNomenclature' when calling creerSansEnregistrerNomenclature");
    }
    // verify the required parameter 'nomenclature' is set
    if (nomenclature == null) {
      throw new ApiException(400, "Missing the required parameter 'nomenclature' when calling creerSansEnregistrerNomenclature");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nomenclatures/{codeNomenclature}/verifier/structure/{codeStructure}"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{codeNomenclature}", ApiClient.urlEncode(codeNomenclature.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(nomenclature);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Code métier de nomenclature proposé en création
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param prefix Le préfix code de la nomenclature (ex 201) (required)
   * @return CodeGenere
   * @throws ApiException if fails to make API call
   */
  public CodeGenere genererCodeEtablissementEtrangerNomenclature(String codeStructure, String prefix) throws ApiException {
    ApiResponse<CodeGenere> localVarResponse = genererCodeEtablissementEtrangerNomenclatureWithHttpInfo(codeStructure, prefix);
    return localVarResponse.getData();
  }

  /**
   * Code métier de nomenclature proposé en création
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param prefix Le préfix code de la nomenclature (ex 201) (required)
   * @return ApiResponse&lt;CodeGenere&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CodeGenere> genererCodeEtablissementEtrangerNomenclatureWithHttpInfo(String codeStructure, String prefix) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = genererCodeEtablissementEtrangerNomenclatureRequestBuilder(codeStructure, prefix);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("genererCodeEtablissementEtrangerNomenclature", localVarResponse);
        }
        return new ApiResponse<CodeGenere>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CodeGenere>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder genererCodeEtablissementEtrangerNomenclatureRequestBuilder(String codeStructure, String prefix) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling genererCodeEtablissementEtrangerNomenclature");
    }
    // verify the required parameter 'prefix' is set
    if (prefix == null) {
      throw new ApiException(400, "Missing the required parameter 'prefix' when calling genererCodeEtablissementEtrangerNomenclature");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nomenclatures/EtablissementEtranger/genererCode/prefix/{prefix}/structure/{codeStructure}"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{prefix}", ApiClient.urlEncode(prefix.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Code métier de nomenclature proposé en création
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param codeNomenclature Le code de la nomenclature (required)
   * @return CodeGenere
   * @throws ApiException if fails to make API call
   */
  public CodeGenere genererCodeNomenclature(String codeStructure, String codeNomenclature) throws ApiException {
    ApiResponse<CodeGenere> localVarResponse = genererCodeNomenclatureWithHttpInfo(codeStructure, codeNomenclature);
    return localVarResponse.getData();
  }

  /**
   * Code métier de nomenclature proposé en création
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param codeNomenclature Le code de la nomenclature (required)
   * @return ApiResponse&lt;CodeGenere&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CodeGenere> genererCodeNomenclatureWithHttpInfo(String codeStructure, String codeNomenclature) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = genererCodeNomenclatureRequestBuilder(codeStructure, codeNomenclature);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("genererCodeNomenclature", localVarResponse);
        }
        return new ApiResponse<CodeGenere>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CodeGenere>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder genererCodeNomenclatureRequestBuilder(String codeStructure, String codeNomenclature) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling genererCodeNomenclature");
    }
    // verify the required parameter 'codeNomenclature' is set
    if (codeNomenclature == null) {
      throw new ApiException(400, "Missing the required parameter 'codeNomenclature' when calling genererCodeNomenclature");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nomenclatures/{codeNomenclature}/generer/structure/{codeStructure}"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{codeNomenclature}", ApiClient.urlEncode(codeNomenclature.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Liste de communes en fonction du code postale
   * 
   * @param codePostal Le code postal (required)
   * @return List&lt;Nomenclature&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Nomenclature> lireCommunes(String codePostal) throws ApiException {
    ApiResponse<List<Nomenclature>> localVarResponse = lireCommunesWithHttpInfo(codePostal);
    return localVarResponse.getData();
  }

  /**
   * Liste de communes en fonction du code postale
   * 
   * @param codePostal Le code postal (required)
   * @return ApiResponse&lt;List&lt;Nomenclature&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Nomenclature>> lireCommunesWithHttpInfo(String codePostal) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = lireCommunesRequestBuilder(codePostal);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("lireCommunes", localVarResponse);
        }
        return new ApiResponse<List<Nomenclature>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Nomenclature>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder lireCommunesRequestBuilder(String codePostal) throws ApiException {
    // verify the required parameter 'codePostal' is set
    if (codePostal == null) {
      throw new ApiException(400, "Missing the required parameter 'codePostal' when calling lireCommunes");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nomenclatures/communes/codePostal/{codePostal}"
        .replace("{codePostal}", ApiClient.urlEncode(codePostal.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Lire l&#39;établissement français par la clé d&#39;unicité (numéro UAI, date de début de validité)
   * 
   * @param numeroUai Le numéro UAI de l&#39;établissement français (required)
   * @param dateDebutValidite La date de début da validité de la nomenclature ou du paramétrage (required)
   * @return Nomenclature
   * @throws ApiException if fails to make API call
   */
  public Nomenclature lireEtablissementFrancaisNomenclature(String numeroUai, Date dateDebutValidite) throws ApiException {
    ApiResponse<Nomenclature> localVarResponse = lireEtablissementFrancaisNomenclatureWithHttpInfo(numeroUai, dateDebutValidite);
    return localVarResponse.getData();
  }

  /**
   * Lire l&#39;établissement français par la clé d&#39;unicité (numéro UAI, date de début de validité)
   * 
   * @param numeroUai Le numéro UAI de l&#39;établissement français (required)
   * @param dateDebutValidite La date de début da validité de la nomenclature ou du paramétrage (required)
   * @return ApiResponse&lt;Nomenclature&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Nomenclature> lireEtablissementFrancaisNomenclatureWithHttpInfo(String numeroUai, Date dateDebutValidite) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = lireEtablissementFrancaisNomenclatureRequestBuilder(numeroUai, dateDebutValidite);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("lireEtablissementFrancaisNomenclature", localVarResponse);
        }
        return new ApiResponse<Nomenclature>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Nomenclature>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder lireEtablissementFrancaisNomenclatureRequestBuilder(String numeroUai, Date dateDebutValidite) throws ApiException {
    // verify the required parameter 'numeroUai' is set
    if (numeroUai == null) {
      throw new ApiException(400, "Missing the required parameter 'numeroUai' when calling lireEtablissementFrancaisNomenclature");
    }
    // verify the required parameter 'dateDebutValidite' is set
    if (dateDebutValidite == null) {
      throw new ApiException(400, "Missing the required parameter 'dateDebutValidite' when calling lireEtablissementFrancaisNomenclature");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nomenclatures/numeroUai/{numeroUai}/dateDebutValidite/{dateDebutValidite}"
        .replace("{numeroUai}", ApiClient.urlEncode(numeroUai.toString()))
        .replace("{dateDebutValidite}", ApiClient.urlEncode(dateDebutValidite.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Liste des nomenclatures
   * 
   * @param codeNomenclature Le code de la nomenclature (required)
   * @return List&lt;Nomenclature&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Nomenclature> lireListeNomenclatures(String codeNomenclature) throws ApiException {
    ApiResponse<List<Nomenclature>> localVarResponse = lireListeNomenclaturesWithHttpInfo(codeNomenclature);
    return localVarResponse.getData();
  }

  /**
   * Liste des nomenclatures
   * 
   * @param codeNomenclature Le code de la nomenclature (required)
   * @return ApiResponse&lt;List&lt;Nomenclature&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Nomenclature>> lireListeNomenclaturesWithHttpInfo(String codeNomenclature) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = lireListeNomenclaturesRequestBuilder(codeNomenclature);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("lireListeNomenclatures", localVarResponse);
        }
        return new ApiResponse<List<Nomenclature>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Nomenclature>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder lireListeNomenclaturesRequestBuilder(String codeNomenclature) throws ApiException {
    // verify the required parameter 'codeNomenclature' is set
    if (codeNomenclature == null) {
      throw new ApiException(400, "Missing the required parameter 'codeNomenclature' when calling lireListeNomenclatures");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nomenclatures/{codeNomenclature}"
        .replace("{codeNomenclature}", ApiClient.urlEncode(codeNomenclature.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Liste des nomenclatures selon les critères de recherche sur les champs de nomenclature
   * 
   * @param codeNomenclature Le code de la nomenclature (required)
   * @param operateurLogique Opérateur AND ou OR (required)
   * @param predicats La liste de champs de nomenclature à filtrer (required)
   * @return List&lt;Nomenclature&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Nomenclature> lireListeNomenclaturesAvecCriteres(String codeNomenclature, String operateurLogique, Predicats predicats) throws ApiException {
    ApiResponse<List<Nomenclature>> localVarResponse = lireListeNomenclaturesAvecCriteresWithHttpInfo(codeNomenclature, operateurLogique, predicats);
    return localVarResponse.getData();
  }

  /**
   * Liste des nomenclatures selon les critères de recherche sur les champs de nomenclature
   * 
   * @param codeNomenclature Le code de la nomenclature (required)
   * @param operateurLogique Opérateur AND ou OR (required)
   * @param predicats La liste de champs de nomenclature à filtrer (required)
   * @return ApiResponse&lt;List&lt;Nomenclature&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Nomenclature>> lireListeNomenclaturesAvecCriteresWithHttpInfo(String codeNomenclature, String operateurLogique, Predicats predicats) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = lireListeNomenclaturesAvecCriteresRequestBuilder(codeNomenclature, operateurLogique, predicats);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("lireListeNomenclaturesAvecCriteres", localVarResponse);
        }
        return new ApiResponse<List<Nomenclature>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Nomenclature>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder lireListeNomenclaturesAvecCriteresRequestBuilder(String codeNomenclature, String operateurLogique, Predicats predicats) throws ApiException {
    // verify the required parameter 'codeNomenclature' is set
    if (codeNomenclature == null) {
      throw new ApiException(400, "Missing the required parameter 'codeNomenclature' when calling lireListeNomenclaturesAvecCriteres");
    }
    // verify the required parameter 'operateurLogique' is set
    if (operateurLogique == null) {
      throw new ApiException(400, "Missing the required parameter 'operateurLogique' when calling lireListeNomenclaturesAvecCriteres");
    }
    // verify the required parameter 'predicats' is set
    if (predicats == null) {
      throw new ApiException(400, "Missing the required parameter 'predicats' when calling lireListeNomenclaturesAvecCriteres");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nomenclatures/{codeNomenclature}/rechercher"
        .replace("{codeNomenclature}", ApiClient.urlEncode(codeNomenclature.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "operateurLogique";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("operateurLogique", operateurLogique));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(predicats);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Liste des nomenclatures selon les critères de recherche sur les champs de nomenclature avec pagination
   * 
   * @param codeNomenclature Le code de la nomenclature (required)
   * @param numPage Numéro de la page courante (required)
   * @param nbOccurences Nombre d&#39;occurences retournées par page (required)
   * @param operateurLogique Opérateur AND ou OR (required)
   * @param predicats La liste de champs de nomenclature à filtrer (required)
   * @return Pagination
   * @throws ApiException if fails to make API call
   */
  public Pagination lireListeNomenclaturesAvecCriteresPage(String codeNomenclature, Integer numPage, Integer nbOccurences, String operateurLogique, Predicats predicats) throws ApiException {
    ApiResponse<Pagination> localVarResponse = lireListeNomenclaturesAvecCriteresPageWithHttpInfo(codeNomenclature, numPage, nbOccurences, operateurLogique, predicats);
    return localVarResponse.getData();
  }

  /**
   * Liste des nomenclatures selon les critères de recherche sur les champs de nomenclature avec pagination
   * 
   * @param codeNomenclature Le code de la nomenclature (required)
   * @param numPage Numéro de la page courante (required)
   * @param nbOccurences Nombre d&#39;occurences retournées par page (required)
   * @param operateurLogique Opérateur AND ou OR (required)
   * @param predicats La liste de champs de nomenclature à filtrer (required)
   * @return ApiResponse&lt;Pagination&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Pagination> lireListeNomenclaturesAvecCriteresPageWithHttpInfo(String codeNomenclature, Integer numPage, Integer nbOccurences, String operateurLogique, Predicats predicats) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = lireListeNomenclaturesAvecCriteresPageRequestBuilder(codeNomenclature, numPage, nbOccurences, operateurLogique, predicats);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("lireListeNomenclaturesAvecCriteresPage", localVarResponse);
        }
        return new ApiResponse<Pagination>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Pagination>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder lireListeNomenclaturesAvecCriteresPageRequestBuilder(String codeNomenclature, Integer numPage, Integer nbOccurences, String operateurLogique, Predicats predicats) throws ApiException {
    // verify the required parameter 'codeNomenclature' is set
    if (codeNomenclature == null) {
      throw new ApiException(400, "Missing the required parameter 'codeNomenclature' when calling lireListeNomenclaturesAvecCriteresPage");
    }
    // verify the required parameter 'numPage' is set
    if (numPage == null) {
      throw new ApiException(400, "Missing the required parameter 'numPage' when calling lireListeNomenclaturesAvecCriteresPage");
    }
    // verify the required parameter 'nbOccurences' is set
    if (nbOccurences == null) {
      throw new ApiException(400, "Missing the required parameter 'nbOccurences' when calling lireListeNomenclaturesAvecCriteresPage");
    }
    // verify the required parameter 'operateurLogique' is set
    if (operateurLogique == null) {
      throw new ApiException(400, "Missing the required parameter 'operateurLogique' when calling lireListeNomenclaturesAvecCriteresPage");
    }
    // verify the required parameter 'predicats' is set
    if (predicats == null) {
      throw new ApiException(400, "Missing the required parameter 'predicats' when calling lireListeNomenclaturesAvecCriteresPage");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nomenclatures/{codeNomenclature}/rechercher/numPage/{numPage}/nbOccurences/{nbOccurences}"
        .replace("{codeNomenclature}", ApiClient.urlEncode(codeNomenclature.toString()))
        .replace("{numPage}", ApiClient.urlEncode(numPage.toString()))
        .replace("{nbOccurences}", ApiClient.urlEncode(nbOccurences.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "operateurLogique";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("operateurLogique", operateurLogique));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(predicats);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Liste des nomenclatures avec pagination
   * 
   * @param codeNomenclature Le code de la nomenclature (required)
   * @param numPage Numéro de la page courante (required)
   * @param nbOccurences Nombre d&#39;occurences retournées par page (required)
   * @return Pagination
   * @throws ApiException if fails to make API call
   */
  public Pagination lireListePageNomenclatures(String codeNomenclature, Integer numPage, Integer nbOccurences) throws ApiException {
    ApiResponse<Pagination> localVarResponse = lireListePageNomenclaturesWithHttpInfo(codeNomenclature, numPage, nbOccurences);
    return localVarResponse.getData();
  }

  /**
   * Liste des nomenclatures avec pagination
   * 
   * @param codeNomenclature Le code de la nomenclature (required)
   * @param numPage Numéro de la page courante (required)
   * @param nbOccurences Nombre d&#39;occurences retournées par page (required)
   * @return ApiResponse&lt;Pagination&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Pagination> lireListePageNomenclaturesWithHttpInfo(String codeNomenclature, Integer numPage, Integer nbOccurences) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = lireListePageNomenclaturesRequestBuilder(codeNomenclature, numPage, nbOccurences);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("lireListePageNomenclatures", localVarResponse);
        }
        return new ApiResponse<Pagination>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Pagination>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder lireListePageNomenclaturesRequestBuilder(String codeNomenclature, Integer numPage, Integer nbOccurences) throws ApiException {
    // verify the required parameter 'codeNomenclature' is set
    if (codeNomenclature == null) {
      throw new ApiException(400, "Missing the required parameter 'codeNomenclature' when calling lireListePageNomenclatures");
    }
    // verify the required parameter 'numPage' is set
    if (numPage == null) {
      throw new ApiException(400, "Missing the required parameter 'numPage' when calling lireListePageNomenclatures");
    }
    // verify the required parameter 'nbOccurences' is set
    if (nbOccurences == null) {
      throw new ApiException(400, "Missing the required parameter 'nbOccurences' when calling lireListePageNomenclatures");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nomenclatures/{codeNomenclature}/numPage/{numPage}/nbOccurences/{nbOccurences}"
        .replace("{codeNomenclature}", ApiClient.urlEncode(codeNomenclature.toString()))
        .replace("{numPage}", ApiClient.urlEncode(numPage.toString()))
        .replace("{nbOccurences}", ApiClient.urlEncode(nbOccurences.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Lire la nomenclature par la clé d&#39;unicité (code, date de début de validité)
   * 
   * @param codeNomenclature Le code de la nomenclature (required)
   * @param code Le code métier de la nomenclature ou du paramétrage à traiter (required)
   * @param dateDebutValidite La date de début da validité de la nomenclature ou du paramétrage (required)
   * @return Nomenclature
   * @throws ApiException if fails to make API call
   */
  public Nomenclature lireNomenclature(String codeNomenclature, String code, Date dateDebutValidite) throws ApiException {
    ApiResponse<Nomenclature> localVarResponse = lireNomenclatureWithHttpInfo(codeNomenclature, code, dateDebutValidite);
    return localVarResponse.getData();
  }

  /**
   * Lire la nomenclature par la clé d&#39;unicité (code, date de début de validité)
   * 
   * @param codeNomenclature Le code de la nomenclature (required)
   * @param code Le code métier de la nomenclature ou du paramétrage à traiter (required)
   * @param dateDebutValidite La date de début da validité de la nomenclature ou du paramétrage (required)
   * @return ApiResponse&lt;Nomenclature&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Nomenclature> lireNomenclatureWithHttpInfo(String codeNomenclature, String code, Date dateDebutValidite) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = lireNomenclatureRequestBuilder(codeNomenclature, code, dateDebutValidite);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("lireNomenclature", localVarResponse);
        }
        return new ApiResponse<Nomenclature>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Nomenclature>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder lireNomenclatureRequestBuilder(String codeNomenclature, String code, Date dateDebutValidite) throws ApiException {
    // verify the required parameter 'codeNomenclature' is set
    if (codeNomenclature == null) {
      throw new ApiException(400, "Missing the required parameter 'codeNomenclature' when calling lireNomenclature");
    }
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling lireNomenclature");
    }
    // verify the required parameter 'dateDebutValidite' is set
    if (dateDebutValidite == null) {
      throw new ApiException(400, "Missing the required parameter 'dateDebutValidite' when calling lireNomenclature");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nomenclatures/{codeNomenclature}/code/{code}/dateDebutValidite/{dateDebutValidite}"
        .replace("{codeNomenclature}", ApiClient.urlEncode(codeNomenclature.toString()))
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{dateDebutValidite}", ApiClient.urlEncode(dateDebutValidite.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Modifier un établissement français
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param numeroUai Le numéro UAI de l&#39;établissement français (required)
   * @param dateDebutValidite La date de début da validité de la nomenclature ou du paramétrage (required)
   * @param nomenclature L&#39;établissement français à modifier (required)
   * @return Nomenclature
   * @throws ApiException if fails to make API call
   */
  public Nomenclature modifierEtablissementFrancaisNomenclature(String codeStructure, String numeroUai, Date dateDebutValidite, Nomenclature nomenclature) throws ApiException {
    ApiResponse<Nomenclature> localVarResponse = modifierEtablissementFrancaisNomenclatureWithHttpInfo(codeStructure, numeroUai, dateDebutValidite, nomenclature);
    return localVarResponse.getData();
  }

  /**
   * Modifier un établissement français
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param numeroUai Le numéro UAI de l&#39;établissement français (required)
   * @param dateDebutValidite La date de début da validité de la nomenclature ou du paramétrage (required)
   * @param nomenclature L&#39;établissement français à modifier (required)
   * @return ApiResponse&lt;Nomenclature&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Nomenclature> modifierEtablissementFrancaisNomenclatureWithHttpInfo(String codeStructure, String numeroUai, Date dateDebutValidite, Nomenclature nomenclature) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = modifierEtablissementFrancaisNomenclatureRequestBuilder(codeStructure, numeroUai, dateDebutValidite, nomenclature);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("modifierEtablissementFrancaisNomenclature", localVarResponse);
        }
        return new ApiResponse<Nomenclature>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Nomenclature>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder modifierEtablissementFrancaisNomenclatureRequestBuilder(String codeStructure, String numeroUai, Date dateDebutValidite, Nomenclature nomenclature) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling modifierEtablissementFrancaisNomenclature");
    }
    // verify the required parameter 'numeroUai' is set
    if (numeroUai == null) {
      throw new ApiException(400, "Missing the required parameter 'numeroUai' when calling modifierEtablissementFrancaisNomenclature");
    }
    // verify the required parameter 'dateDebutValidite' is set
    if (dateDebutValidite == null) {
      throw new ApiException(400, "Missing the required parameter 'dateDebutValidite' when calling modifierEtablissementFrancaisNomenclature");
    }
    // verify the required parameter 'nomenclature' is set
    if (nomenclature == null) {
      throw new ApiException(400, "Missing the required parameter 'nomenclature' when calling modifierEtablissementFrancaisNomenclature");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nomenclatures/numeroUai/{numeroUai}/dateDebutValidite/{dateDebutValidite}/structure/{codeStructure}"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{numeroUai}", ApiClient.urlEncode(numeroUai.toString()))
        .replace("{dateDebutValidite}", ApiClient.urlEncode(dateDebutValidite.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(nomenclature);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Modifier une nomenclature [usage QA]
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param codeNomenclature Le code de la nomenclature (required)
   * @param code Le code métier de la nomenclature ou du paramétrage à traiter (required)
   * @param dateDebutValidite La date de début da validité de la nomenclature ou du paramétrage (required)
   * @param nomenclature La nomenclature à modifier (required)
   * @return Nomenclature
   * @throws ApiException if fails to make API call
   */
  public Nomenclature modifierNomenclature(String codeStructure, String codeNomenclature, String code, Date dateDebutValidite, Nomenclature nomenclature) throws ApiException {
    ApiResponse<Nomenclature> localVarResponse = modifierNomenclatureWithHttpInfo(codeStructure, codeNomenclature, code, dateDebutValidite, nomenclature);
    return localVarResponse.getData();
  }

  /**
   * Modifier une nomenclature [usage QA]
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param codeNomenclature Le code de la nomenclature (required)
   * @param code Le code métier de la nomenclature ou du paramétrage à traiter (required)
   * @param dateDebutValidite La date de début da validité de la nomenclature ou du paramétrage (required)
   * @param nomenclature La nomenclature à modifier (required)
   * @return ApiResponse&lt;Nomenclature&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Nomenclature> modifierNomenclatureWithHttpInfo(String codeStructure, String codeNomenclature, String code, Date dateDebutValidite, Nomenclature nomenclature) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = modifierNomenclatureRequestBuilder(codeStructure, codeNomenclature, code, dateDebutValidite, nomenclature);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("modifierNomenclature", localVarResponse);
        }
        return new ApiResponse<Nomenclature>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Nomenclature>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder modifierNomenclatureRequestBuilder(String codeStructure, String codeNomenclature, String code, Date dateDebutValidite, Nomenclature nomenclature) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling modifierNomenclature");
    }
    // verify the required parameter 'codeNomenclature' is set
    if (codeNomenclature == null) {
      throw new ApiException(400, "Missing the required parameter 'codeNomenclature' when calling modifierNomenclature");
    }
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling modifierNomenclature");
    }
    // verify the required parameter 'dateDebutValidite' is set
    if (dateDebutValidite == null) {
      throw new ApiException(400, "Missing the required parameter 'dateDebutValidite' when calling modifierNomenclature");
    }
    // verify the required parameter 'nomenclature' is set
    if (nomenclature == null) {
      throw new ApiException(400, "Missing the required parameter 'nomenclature' when calling modifierNomenclature");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nomenclatures/{codeNomenclature}/code/{code}/dateDebutValidite/{dateDebutValidite}/structure/{codeStructure}"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{codeNomenclature}", ApiClient.urlEncode(codeNomenclature.toString()))
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{dateDebutValidite}", ApiClient.urlEncode(dateDebutValidite.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(nomenclature);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Modifier un établissement français sans enregistrer
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param numeroUai Le numéro UAI de l&#39;établissement français (required)
   * @param dateDebutValidite La date de début da validité de la nomenclature ou du paramétrage (required)
   * @param nomenclature L&#39;établissement français à modifier sans enregistrer (required)
   * @throws ApiException if fails to make API call
   */
  public void modifierSansEnregistrerEtablissementFrancaisNomenclature(String codeStructure, String numeroUai, Date dateDebutValidite, Nomenclature nomenclature) throws ApiException {
    modifierSansEnregistrerEtablissementFrancaisNomenclatureWithHttpInfo(codeStructure, numeroUai, dateDebutValidite, nomenclature);
  }

  /**
   * Modifier un établissement français sans enregistrer
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param numeroUai Le numéro UAI de l&#39;établissement français (required)
   * @param dateDebutValidite La date de début da validité de la nomenclature ou du paramétrage (required)
   * @param nomenclature L&#39;établissement français à modifier sans enregistrer (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> modifierSansEnregistrerEtablissementFrancaisNomenclatureWithHttpInfo(String codeStructure, String numeroUai, Date dateDebutValidite, Nomenclature nomenclature) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = modifierSansEnregistrerEtablissementFrancaisNomenclatureRequestBuilder(codeStructure, numeroUai, dateDebutValidite, nomenclature);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("modifierSansEnregistrerEtablissementFrancaisNomenclature", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder modifierSansEnregistrerEtablissementFrancaisNomenclatureRequestBuilder(String codeStructure, String numeroUai, Date dateDebutValidite, Nomenclature nomenclature) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling modifierSansEnregistrerEtablissementFrancaisNomenclature");
    }
    // verify the required parameter 'numeroUai' is set
    if (numeroUai == null) {
      throw new ApiException(400, "Missing the required parameter 'numeroUai' when calling modifierSansEnregistrerEtablissementFrancaisNomenclature");
    }
    // verify the required parameter 'dateDebutValidite' is set
    if (dateDebutValidite == null) {
      throw new ApiException(400, "Missing the required parameter 'dateDebutValidite' when calling modifierSansEnregistrerEtablissementFrancaisNomenclature");
    }
    // verify the required parameter 'nomenclature' is set
    if (nomenclature == null) {
      throw new ApiException(400, "Missing the required parameter 'nomenclature' when calling modifierSansEnregistrerEtablissementFrancaisNomenclature");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nomenclatures/numeroUai/{numeroUai}/dateDebutValidite/{dateDebutValidite}/verifier/structure/{codeStructure}"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{numeroUai}", ApiClient.urlEncode(numeroUai.toString()))
        .replace("{dateDebutValidite}", ApiClient.urlEncode(dateDebutValidite.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(nomenclature);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Modifier une nomenclature sans enregistrer
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param codeNomenclature Le code de la nomenclature (required)
   * @param code Le code métier de la nomenclature ou du paramétrage à traiter (required)
   * @param dateDebutValidite La date de début da validité de la nomenclature ou du paramétrage (required)
   * @param nomenclature La nomenclature à modifier sans enregistrer (required)
   * @throws ApiException if fails to make API call
   */
  public void modifierSansEnregistrerNomenclature(String codeStructure, String codeNomenclature, String code, Date dateDebutValidite, Nomenclature nomenclature) throws ApiException {
    modifierSansEnregistrerNomenclatureWithHttpInfo(codeStructure, codeNomenclature, code, dateDebutValidite, nomenclature);
  }

  /**
   * Modifier une nomenclature sans enregistrer
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param codeNomenclature Le code de la nomenclature (required)
   * @param code Le code métier de la nomenclature ou du paramétrage à traiter (required)
   * @param dateDebutValidite La date de début da validité de la nomenclature ou du paramétrage (required)
   * @param nomenclature La nomenclature à modifier sans enregistrer (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> modifierSansEnregistrerNomenclatureWithHttpInfo(String codeStructure, String codeNomenclature, String code, Date dateDebutValidite, Nomenclature nomenclature) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = modifierSansEnregistrerNomenclatureRequestBuilder(codeStructure, codeNomenclature, code, dateDebutValidite, nomenclature);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("modifierSansEnregistrerNomenclature", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder modifierSansEnregistrerNomenclatureRequestBuilder(String codeStructure, String codeNomenclature, String code, Date dateDebutValidite, Nomenclature nomenclature) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling modifierSansEnregistrerNomenclature");
    }
    // verify the required parameter 'codeNomenclature' is set
    if (codeNomenclature == null) {
      throw new ApiException(400, "Missing the required parameter 'codeNomenclature' when calling modifierSansEnregistrerNomenclature");
    }
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling modifierSansEnregistrerNomenclature");
    }
    // verify the required parameter 'dateDebutValidite' is set
    if (dateDebutValidite == null) {
      throw new ApiException(400, "Missing the required parameter 'dateDebutValidite' when calling modifierSansEnregistrerNomenclature");
    }
    // verify the required parameter 'nomenclature' is set
    if (nomenclature == null) {
      throw new ApiException(400, "Missing the required parameter 'nomenclature' when calling modifierSansEnregistrerNomenclature");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nomenclatures/{codeNomenclature}/code/{code}/dateDebutValidite/{dateDebutValidite}/verifier/structure/{codeStructure}"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{codeNomenclature}", ApiClient.urlEncode(codeNomenclature.toString()))
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{dateDebutValidite}", ApiClient.urlEncode(dateDebutValidite.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(nomenclature);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Supprimer un établissement français
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param numeroUai Le numéro UAI de l&#39;établissement français (required)
   * @param dateDebutValidite La date de début da validité de la nomenclature ou du paramétrage (required)
   * @throws ApiException if fails to make API call
   */
  public void supprimerEtablissementFrancaisNomenclature(String codeStructure, String numeroUai, Date dateDebutValidite) throws ApiException {
    supprimerEtablissementFrancaisNomenclatureWithHttpInfo(codeStructure, numeroUai, dateDebutValidite);
  }

  /**
   * Supprimer un établissement français
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param numeroUai Le numéro UAI de l&#39;établissement français (required)
   * @param dateDebutValidite La date de début da validité de la nomenclature ou du paramétrage (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> supprimerEtablissementFrancaisNomenclatureWithHttpInfo(String codeStructure, String numeroUai, Date dateDebutValidite) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = supprimerEtablissementFrancaisNomenclatureRequestBuilder(codeStructure, numeroUai, dateDebutValidite);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("supprimerEtablissementFrancaisNomenclature", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder supprimerEtablissementFrancaisNomenclatureRequestBuilder(String codeStructure, String numeroUai, Date dateDebutValidite) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling supprimerEtablissementFrancaisNomenclature");
    }
    // verify the required parameter 'numeroUai' is set
    if (numeroUai == null) {
      throw new ApiException(400, "Missing the required parameter 'numeroUai' when calling supprimerEtablissementFrancaisNomenclature");
    }
    // verify the required parameter 'dateDebutValidite' is set
    if (dateDebutValidite == null) {
      throw new ApiException(400, "Missing the required parameter 'dateDebutValidite' when calling supprimerEtablissementFrancaisNomenclature");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nomenclatures/numeroUai/{numeroUai}/dateDebutValidite/{dateDebutValidite}/structure/{codeStructure}"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{numeroUai}", ApiClient.urlEncode(numeroUai.toString()))
        .replace("{dateDebutValidite}", ApiClient.urlEncode(dateDebutValidite.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Supprimer une nomenclature
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param codeNomenclature Le code de la nomenclature (required)
   * @param code Le code métier de la nomenclature ou du paramétrage à traiter (required)
   * @param dateDebutValidite La date de début da validité de la nomenclature ou du paramétrage (required)
   * @throws ApiException if fails to make API call
   */
  public void supprimerNomenclature(String codeStructure, String codeNomenclature, String code, Date dateDebutValidite) throws ApiException {
    supprimerNomenclatureWithHttpInfo(codeStructure, codeNomenclature, code, dateDebutValidite);
  }

  /**
   * Supprimer une nomenclature
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param codeNomenclature Le code de la nomenclature (required)
   * @param code Le code métier de la nomenclature ou du paramétrage à traiter (required)
   * @param dateDebutValidite La date de début da validité de la nomenclature ou du paramétrage (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> supprimerNomenclatureWithHttpInfo(String codeStructure, String codeNomenclature, String code, Date dateDebutValidite) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = supprimerNomenclatureRequestBuilder(codeStructure, codeNomenclature, code, dateDebutValidite);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("supprimerNomenclature", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder supprimerNomenclatureRequestBuilder(String codeStructure, String codeNomenclature, String code, Date dateDebutValidite) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling supprimerNomenclature");
    }
    // verify the required parameter 'codeNomenclature' is set
    if (codeNomenclature == null) {
      throw new ApiException(400, "Missing the required parameter 'codeNomenclature' when calling supprimerNomenclature");
    }
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling supprimerNomenclature");
    }
    // verify the required parameter 'dateDebutValidite' is set
    if (dateDebutValidite == null) {
      throw new ApiException(400, "Missing the required parameter 'dateDebutValidite' when calling supprimerNomenclature");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nomenclatures/{codeNomenclature}/code/{code}/dateDebutValidite/{dateDebutValidite}/structure/{codeStructure}"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{codeNomenclature}", ApiClient.urlEncode(codeNomenclature.toString()))
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{dateDebutValidite}", ApiClient.urlEncode(dateDebutValidite.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
