/*
 * INS Gestion V5
 * Il s'agit de l'API v5 de gestion - INS  __Apprenant :__ une personne qui a au moins une inscription validée dans Pegase.  __Inscription :__ se définit par une cible sur une période de mise en œuvre pour un apprenant. Une inscription peut prendre deux états : soit validée, soit annulée.  __Actualisation :__ permet de modifier les données liées à l’apprenant ou à l’inscription alors que la piste a déjà été payée ou validée.   __Gestion des erreurs :__   __200, 201 :__ opération effectuée   __400 :__ erreur de données sur les formats   __403 :__ accès refusé   __404 :__ contenu introuvable   __409 :__ donnée déjà existante   __500 :__ erreur serveur  # Changement majeur/cassant par rapport à V4  1. Suppression de `Inscription.noCandidat`.  1. Ajout de `VoeuBase.noCandidat` et `InscriptionComplete.noCandidat`.  1. Ajout de `VoeuBase.choisi`. 
 *
 * The version of the OpenAPI document: 24.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.esupportail.referentiel.pcscol.api;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.StringJoiner;
import java.util.function.Consumer;

import org.esupportail.referentiel.pcscol.ins.model.Apprenant;
import org.esupportail.referentiel.pcscol.ins.model.CodeApprenant;
import org.esupportail.referentiel.pcscol.ins.model.InscriptionComplete;
import org.esupportail.referentiel.pcscol.ins.model.ModificationDonneesIneRequest;
import org.esupportail.referentiel.pcscol.ins.model.ModificationDonneesIneResponse;
import org.esupportail.referentiel.pcscol.ins.model.Pageable;
import org.esupportail.referentiel.pcscol.ins.model.PagedApprenant;
import org.esupportail.referentiel.pcscol.invoker.ApiClient;
import org.esupportail.referentiel.pcscol.invoker.ApiException;
import org.esupportail.referentiel.pcscol.invoker.ApiResponse;
import org.esupportail.referentiel.pcscol.invoker.Pair;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-23T10:43:17.979817+02:00[Europe/Paris]", comments = "Generator version: 7.7.0")
public class ApprenantsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ApprenantsApi() {
    this(new ApiClient());
  }

  public ApprenantsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Chercher les données d&#39;un apprenant
   * Chercher les données d&#39;un apprenant
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeApprenant Le code Pegase de l&#39;apprenant (required)
   * @return Apprenant
   * @throws ApiException if fails to make API call
   */
  public Apprenant lireApprenant(String codeStructure, String codeApprenant) throws ApiException {
    ApiResponse<Apprenant> localVarResponse = lireApprenantWithHttpInfo(codeStructure, codeApprenant);
    return localVarResponse.getData();
  }

  /**
   * Chercher les données d&#39;un apprenant
   * Chercher les données d&#39;un apprenant
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeApprenant Le code Pegase de l&#39;apprenant (required)
   * @return ApiResponse&lt;Apprenant&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Apprenant> lireApprenantWithHttpInfo(String codeStructure, String codeApprenant) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = lireApprenantRequestBuilder(codeStructure, codeApprenant);
    
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      
//      InputStream data = localVarResponse.body();
//		String dataString=IOUtils.toString(new InputStreamReader(data, Charsets.UTF_8));
//		System.out.println("+++++++++++++++++++"+dataString);
      try {
    	 

        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("lireApprenant", localVarResponse);
        }
        return new ApiResponse<Apprenant>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Apprenant>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder lireApprenantRequestBuilder(String codeStructure, String codeApprenant) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling lireApprenant");
    }
    // verify the required parameter 'codeApprenant' is set
    if (codeApprenant == null) {
      throw new ApiException(400, "Missing the required parameter 'codeApprenant' when calling lireApprenant");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/gestion/apprenants/{codeStructure}/{codeApprenant}/"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{codeApprenant}", ApiClient.urlEncode(codeApprenant.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Chercher les données d&#39;un apprenant à partir d&#39;un numéro INE
   * Chercher les données d&#39;un apprenant à partir d&#39;un numéro INE
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeIne Le code INE de l&#39;apprenant (required)
   * @return Apprenant
   * @throws ApiException if fails to make API call
   */
  public Apprenant lireApprenantParIne(String codeStructure, String codeIne) throws ApiException {
    ApiResponse<Apprenant> localVarResponse = lireApprenantParIneWithHttpInfo(codeStructure, codeIne);
    return localVarResponse.getData();
  }

  /**
   * Chercher les données d&#39;un apprenant à partir d&#39;un numéro INE
   * Chercher les données d&#39;un apprenant à partir d&#39;un numéro INE
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeIne Le code INE de l&#39;apprenant (required)
   * @return ApiResponse&lt;Apprenant&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Apprenant> lireApprenantParIneWithHttpInfo(String codeStructure, String codeIne) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = lireApprenantParIneRequestBuilder(codeStructure, codeIne);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("lireApprenantParIne", localVarResponse);
        }
        return new ApiResponse<Apprenant>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Apprenant>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder lireApprenantParIneRequestBuilder(String codeStructure, String codeIne) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling lireApprenantParIne");
    }
    // verify the required parameter 'codeIne' is set
    if (codeIne == null) {
      throw new ApiException(400, "Missing the required parameter 'codeIne' when calling lireApprenantParIne");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/gestion/apprenants/{codeStructure}/ine/{codeIne}/"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{codeIne}", ApiClient.urlEncode(codeIne.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Chercher les inscriptions d&#39;un apprenant à partir d&#39;un numéro INE et d&#39;une période de mise en œuvre
   * Chercher les données d&#39;un apprenant à partir d&#39;un numéro INE
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeIne Le code INE de l&#39;apprenant (required)
   * @param codePeriode Le code de la période de référence (required)
   * @param statutInscription  (optional)
   * @return List&lt;InscriptionComplete&gt;
   * @throws ApiException if fails to make API call
   */
  public List<InscriptionComplete> lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriode(String codeStructure, String codeIne, String codePeriode, String statutInscription) throws ApiException {
    ApiResponse<List<InscriptionComplete>> localVarResponse = lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeWithHttpInfo(codeStructure, codeIne, codePeriode, statutInscription);
    return localVarResponse.getData();
  }

  /**
   * Chercher les inscriptions d&#39;un apprenant à partir d&#39;un numéro INE et d&#39;une période de mise en œuvre
   * Chercher les données d&#39;un apprenant à partir d&#39;un numéro INE
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeIne Le code INE de l&#39;apprenant (required)
   * @param codePeriode Le code de la période de référence (required)
   * @param statutInscription  (optional)
   * @return ApiResponse&lt;List&lt;InscriptionComplete&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<InscriptionComplete>> lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeWithHttpInfo(String codeStructure, String codeIne, String codePeriode, String statutInscription) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeRequestBuilder(codeStructure, codeIne, codePeriode, statutInscription);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriode", localVarResponse);
        }
        return new ApiResponse<List<InscriptionComplete>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<InscriptionComplete>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeRequestBuilder(String codeStructure, String codeIne, String codePeriode, String statutInscription) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriode");
    }
    // verify the required parameter 'codeIne' is set
    if (codeIne == null) {
      throw new ApiException(400, "Missing the required parameter 'codeIne' when calling lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriode");
    }
    // verify the required parameter 'codePeriode' is set
    if (codePeriode == null) {
      throw new ApiException(400, "Missing the required parameter 'codePeriode' when calling lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriode");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/gestion/apprenants/{codeStructure}/ine/{codeIne}/inscriptions/{codePeriode}/"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{codeIne}", ApiClient.urlEncode(codeIne.toString()))
        .replace("{codePeriode}", ApiClient.urlEncode(codePeriode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "statutInscription";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("statutInscription", statutInscription));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Liste des apprenants filtrée par le critères de recherche
   * Liste des apprenants filtrée par le critères de recherche
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeApprenant Le code Pegase de l&#39;apprenant (optional)
   * @param codeIne Le code INE de l&#39;apprenant (optional)
   * @param nomDeFamille nom de famille de l&#39;apprenant (optional)
   * @param prenom Le prénom de l&#39;apprenant (optional)
   * @param pageable L&#39;objet de pagination (page : le numéro de la page (défaut 0), taille : le nombre d&#39;élément par page (défaut 50)) (optional)
   * @return PagedApprenant
   * @throws ApiException if fails to make API call
   */
  public PagedApprenant listerApprenants(String codeStructure, String codeApprenant, String codeIne, String nomDeFamille, String prenom, Pageable pageable) throws ApiException {
    ApiResponse<PagedApprenant> localVarResponse = listerApprenantsWithHttpInfo(codeStructure, codeApprenant, codeIne, nomDeFamille, prenom, pageable);
    return localVarResponse.getData();
  }

  /**
   * Liste des apprenants filtrée par le critères de recherche
   * Liste des apprenants filtrée par le critères de recherche
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeApprenant Le code Pegase de l&#39;apprenant (optional)
   * @param codeIne Le code INE de l&#39;apprenant (optional)
   * @param nomDeFamille nom de famille de l&#39;apprenant (optional)
   * @param prenom Le prénom de l&#39;apprenant (optional)
   * @param pageable L&#39;objet de pagination (page : le numéro de la page (défaut 0), taille : le nombre d&#39;élément par page (défaut 50)) (optional)
   * @return ApiResponse&lt;PagedApprenant&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PagedApprenant> listerApprenantsWithHttpInfo(String codeStructure, String codeApprenant, String codeIne, String nomDeFamille, String prenom, Pageable pageable) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listerApprenantsRequestBuilder(codeStructure, codeApprenant, codeIne, nomDeFamille, prenom, pageable);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listerApprenants", localVarResponse);
        }
        return new ApiResponse<PagedApprenant>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PagedApprenant>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listerApprenantsRequestBuilder(String codeStructure, String codeApprenant, String codeIne, String nomDeFamille, String prenom, Pageable pageable) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling listerApprenants");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/gestion/apprenants/{codeStructure}/"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "codeApprenant";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("codeApprenant", codeApprenant));
    localVarQueryParameterBaseName = "codeIne";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("codeIne", codeIne));
    localVarQueryParameterBaseName = "nomDeFamille";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nomDeFamille", nomDeFamille));
    localVarQueryParameterBaseName = "prenom";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("prenom", prenom));
    localVarQueryParameterBaseName = "pageable";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", pageable.getPage()));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("taille", pageable.getTaille()));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Modifier le numéro INE d&#39;un apprenant
   * Cette API permet de modifier le numéro INE d&#39;un apprenant. Le numéro INE de l&#39;apprenant ne doit pas être déjà confirmé par le service INES. La correspondance entre le numéro INE et l&#39;état civil de l&#39;apprenant doit être confirmée par le service INES. 
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeApprenant Le code Pegase de l&#39;apprenant (required)
   * @param modificationDonneesIneRequest Le contenu du message (optional)
   * @return ModificationDonneesIneResponse
   * @throws ApiException if fails to make API call
   */
  public ModificationDonneesIneResponse modifierIne(String codeStructure, String codeApprenant, ModificationDonneesIneRequest modificationDonneesIneRequest) throws ApiException {
    ApiResponse<ModificationDonneesIneResponse> localVarResponse = modifierIneWithHttpInfo(codeStructure, codeApprenant, modificationDonneesIneRequest);
    return localVarResponse.getData();
  }

  /**
   * Modifier le numéro INE d&#39;un apprenant
   * Cette API permet de modifier le numéro INE d&#39;un apprenant. Le numéro INE de l&#39;apprenant ne doit pas être déjà confirmé par le service INES. La correspondance entre le numéro INE et l&#39;état civil de l&#39;apprenant doit être confirmée par le service INES. 
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeApprenant Le code Pegase de l&#39;apprenant (required)
   * @param modificationDonneesIneRequest Le contenu du message (optional)
   * @return ApiResponse&lt;ModificationDonneesIneResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModificationDonneesIneResponse> modifierIneWithHttpInfo(String codeStructure, String codeApprenant, ModificationDonneesIneRequest modificationDonneesIneRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = modifierIneRequestBuilder(codeStructure, codeApprenant, modificationDonneesIneRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("modifierIne", localVarResponse);
        }
        return new ApiResponse<ModificationDonneesIneResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModificationDonneesIneResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder modifierIneRequestBuilder(String codeStructure, String codeApprenant, ModificationDonneesIneRequest modificationDonneesIneRequest) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling modifierIne");
    }
    // verify the required parameter 'codeApprenant' is set
    if (codeApprenant == null) {
      throw new ApiException(400, "Missing the required parameter 'codeApprenant' when calling modifierIne");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/gestion/apprenants/{codeStructure}/{codeApprenant}/modifierDonneesIne"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{codeApprenant}", ApiClient.urlEncode(codeApprenant.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(modificationDonneesIneRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Récupération de la valeur maximale parmi les codes apprenants
   * 
   * @param codeStructure Le code de l&#39;établissement (required)
   * @return CodeApprenant
   * @throws ApiException if fails to make API call
   */
  public CodeApprenant recupererCodeApprenantMaximal(String codeStructure) throws ApiException {
    ApiResponse<CodeApprenant> localVarResponse = recupererCodeApprenantMaximalWithHttpInfo(codeStructure);
    return localVarResponse.getData();
  }

  /**
   * Récupération de la valeur maximale parmi les codes apprenants
   * 
   * @param codeStructure Le code de l&#39;établissement (required)
   * @return ApiResponse&lt;CodeApprenant&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CodeApprenant> recupererCodeApprenantMaximalWithHttpInfo(String codeStructure) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = recupererCodeApprenantMaximalRequestBuilder(codeStructure);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("recupererCodeApprenantMaximal", localVarResponse);
        }
        return new ApiResponse<CodeApprenant>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CodeApprenant>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder recupererCodeApprenantMaximalRequestBuilder(String codeStructure) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling recupererCodeApprenantMaximal");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/gestion/apprenants/{codeStructure}/code-apprenant-maximal"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Verifie les droits de l&#39;apprenant
   * Verifie les droits de l&#39;apprenant
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeApprenant Le code Pegase de l&#39;apprenant (required)
   * @return Boolean
   * @throws ApiException if fails to make API call
   */
  public Boolean verifierAutorisationApprenant(String codeStructure, String codeApprenant) throws ApiException {
    ApiResponse<Boolean> localVarResponse = verifierAutorisationApprenantWithHttpInfo(codeStructure, codeApprenant);
    return localVarResponse.getData();
  }

  /**
   * Verifie les droits de l&#39;apprenant
   * Verifie les droits de l&#39;apprenant
   * @param codeStructure Le code de l&#39;établissement (required)
   * @param codeApprenant Le code Pegase de l&#39;apprenant (required)
   * @return ApiResponse&lt;Boolean&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Boolean> verifierAutorisationApprenantWithHttpInfo(String codeStructure, String codeApprenant) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = verifierAutorisationApprenantRequestBuilder(codeStructure, codeApprenant);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("verifierAutorisationApprenant", localVarResponse);
        }
        return new ApiResponse<Boolean>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Boolean>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder verifierAutorisationApprenantRequestBuilder(String codeStructure, String codeApprenant) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling verifierAutorisationApprenant");
    }
    // verify the required parameter 'codeApprenant' is set
    if (codeApprenant == null) {
      throw new ApiException(400, "Missing the required parameter 'codeApprenant' when calling verifierAutorisationApprenant");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/gestion/apprenants/verifier/{codeStructure}/{codeApprenant}/"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
        .replace("{codeApprenant}", ApiClient.urlEncode(codeApprenant.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
