/*
 * OffreDeFormation V1
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module OFFRE DE FORMATION  Description service ODF  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | | genre     | le genre de la personne est invalide       | | dateEntre | la date est invalide                       | | telephone | le téléphone est invalide                  | | email     | le mail est invalide                       |
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.esupportail.referentiel.pcscol.api;


import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.StringJoiner;
import java.util.UUID;
import java.util.function.Consumer;

import org.apache.commons.io.Charsets;
import org.apache.commons.io.IOUtils;
import org.esupportail.referentiel.pcscol.invoker.ApiClient;
import org.esupportail.referentiel.pcscol.invoker.ApiException;
import org.esupportail.referentiel.pcscol.invoker.ApiResponse;
import org.esupportail.referentiel.pcscol.invoker.Pair;
import org.esupportail.referentiel.pcscol.odf.model.ContexteDetails;
import org.esupportail.referentiel.pcscol.odf.model.CreerObjetMaquetteRequest;
import org.esupportail.referentiel.pcscol.odf.model.DescripteursContexteRequest;
import org.esupportail.referentiel.pcscol.odf.model.DescripteursEnqueteRequest;
import org.esupportail.referentiel.pcscol.odf.model.DescripteursObjetMaquetteRequest;
import org.esupportail.referentiel.pcscol.odf.model.DescripteursSyllabus;
import org.esupportail.referentiel.pcscol.odf.model.Enfant;
import org.esupportail.referentiel.pcscol.odf.model.FormatsEnseignementRequest;
import org.esupportail.referentiel.pcscol.odf.model.ModifierCodeObjetMaquetteRequest;
import org.esupportail.referentiel.pcscol.odf.model.ModifierLienRequest;
import org.esupportail.referentiel.pcscol.odf.model.ObjetMaquetteDetail;
import org.esupportail.referentiel.pcscol.odf.model.ObjetMaquetteHistory;
import org.esupportail.referentiel.pcscol.odf.model.Pageable;
import org.esupportail.referentiel.pcscol.odf.model.PagedObjetMaquetteSummaries;
import org.esupportail.referentiel.pcscol.odf.model.TypeObjetMaquette;

import com.fasterxml.jackson.core.JsonParser.Feature;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2024-07-04T09:22:32.722688+02:00[Europe/Paris]",
        comments = "Generator version: 7.7.0")
public class ObjetsMaquetteApi {
    private final HttpClient memberVarHttpClient;
    private final ObjectMapper memberVarObjectMapper;
    private final String memberVarBaseUri;
    private final Consumer<HttpRequest.Builder> memberVarInterceptor;
    private final Duration memberVarReadTimeout;
    private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
    private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

    public ObjetsMaquetteApi() {

        this(new ApiClient());
    }

    public ObjetsMaquetteApi(ApiClient apiClient) {
        memberVarHttpClient = apiClient.getHttpClient();
        memberVarObjectMapper = apiClient.getObjectMapper();
        memberVarBaseUri = apiClient.getBaseUri();
        memberVarInterceptor = apiClient.getRequestInterceptor();
        memberVarReadTimeout = apiClient.getReadTimeout();
        memberVarResponseInterceptor = apiClient.getResponseInterceptor();
        memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();

        memberVarObjectMapper.configure(Feature.AUTO_CLOSE_SOURCE, true);
        memberVarObjectMapper.configure(Feature.INCLUDE_SOURCE_IN_LOCATION, false);
        //memberVarObjectMapper.configure(Feature.USE_FAST_DOUBLE_PARSER, true);
    }

    protected ApiException getApiException(String operationId, HttpResponse<InputStream> response)
            throws IOException {
        String body = response.body() == null ? null : new String(response.body().readAllBytes());
        String message = formatExceptionMessage(operationId, response.statusCode(), body);
        return new ApiException(response.statusCode(), message, response.headers(), body);
    }

    private String formatExceptionMessage(String operationId, int statusCode, String body) {
        if (body == null || body.isEmpty()) {
            body = "[no body]";
        }
        return operationId + " call failed with: " + statusCode + " - " + body;
    }

    /**
     * Ajouter enfant Ajouter un enfant à un objet maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param enfant Commande pour ajouter un enfant sous l&#39;objet maquette père (required)
     * @return ObjetMaquetteDetail
     * @throws ApiException if fails to make API call
     */
    public ObjetMaquetteDetail ajouterEnfant(String codeStructure, UUID id, Enfant enfant)
            throws ApiException {
        ApiResponse<ObjetMaquetteDetail> localVarResponse =
                ajouterEnfantWithHttpInfo(codeStructure, id, enfant);
        return localVarResponse.getData();
    }

    /**
     * Ajouter enfant Ajouter un enfant à un objet maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param enfant Commande pour ajouter un enfant sous l&#39;objet maquette père (required)
     * @return ApiResponse&lt;ObjetMaquetteDetail&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<ObjetMaquetteDetail> ajouterEnfantWithHttpInfo(
            String codeStructure, UUID id, Enfant enfant) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                ajouterEnfantRequestBuilder(codeStructure, id, enfant);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("ajouterEnfant", localVarResponse);
                }
                return new ApiResponse<ObjetMaquetteDetail>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<
                                                ObjetMaquetteDetail>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder ajouterEnfantRequestBuilder(
            String codeStructure, UUID id, Enfant enfant) throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling ajouterEnfant");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'id' when calling ajouterEnfant");
        }
        // verify the required parameter 'enfant' is set
        if (enfant == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'enfant' when calling ajouterEnfant");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objet-maquette/{id}/enfant"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json");
        localVarRequestBuilder.header("Accept", "application/json, json/application");

        try {
            byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(enfant);
            localVarRequestBuilder.method(
                    "POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Associe un diplôme à une formation
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param diplomeId (required)
     * @return ObjetMaquetteDetail
     * @throws ApiException if fails to make API call
     */
    public ObjetMaquetteDetail associerDiplome(String codeStructure, UUID id, UUID diplomeId)
            throws ApiException {
        ApiResponse<ObjetMaquetteDetail> localVarResponse =
                associerDiplomeWithHttpInfo(codeStructure, id, diplomeId);
        return localVarResponse.getData();
    }

    /**
     * Associe un diplôme à une formation
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param diplomeId (required)
     * @return ApiResponse&lt;ObjetMaquetteDetail&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<ObjetMaquetteDetail> associerDiplomeWithHttpInfo(
            String codeStructure, UUID id, UUID diplomeId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                associerDiplomeRequestBuilder(codeStructure, id, diplomeId);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("associerDiplome", localVarResponse);
                } else {

                    return new ApiResponse<ObjetMaquetteDetail>(
                            localVarResponse.statusCode(),
                            localVarResponse.headers().map(),
                            localVarResponse.body() == null
                                    ? null
                                    : memberVarObjectMapper.readValue(
                                            localVarResponse.body(),
                                            new TypeReference<
                                                    ObjetMaquetteDetail>() {}) // closes the
                            // InputStream
                            );
                }
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder associerDiplomeRequestBuilder(
            String codeStructure, UUID id, UUID diplomeId) throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling associerDiplome");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'id' when calling associerDiplome");
        }
        // verify the required parameter 'diplomeId' is set
        if (diplomeId == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'diplomeId' when calling associerDiplome");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objet-maquette/{id}/diplome/{diplomeId}/associerDiplome/"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()))
                        .replace("{diplomeId}", ApiClient.urlEncode(diplomeId.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json, json/application");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Créer un objet maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param creerObjetMaquetteRequest L&#39;objet maquette à créer (required)
     * @return ObjetMaquetteDetail
     * @throws ApiException if fails to make API call
     */
    public ObjetMaquetteDetail creerObjetMaquette(
            String codeStructure, CreerObjetMaquetteRequest creerObjetMaquetteRequest)
            throws ApiException {
        ApiResponse<ObjetMaquetteDetail> localVarResponse =
                creerObjetMaquetteWithHttpInfo(codeStructure, creerObjetMaquetteRequest);
        return localVarResponse.getData();
    }

    /**
     * Créer un objet maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param creerObjetMaquetteRequest L&#39;objet maquette à créer (required)
     * @return ApiResponse&lt;ObjetMaquetteDetail&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<ObjetMaquetteDetail> creerObjetMaquetteWithHttpInfo(
            String codeStructure, CreerObjetMaquetteRequest creerObjetMaquetteRequest)
            throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                creerObjetMaquetteRequestBuilder(codeStructure, creerObjetMaquetteRequest);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("creerObjetMaquette", localVarResponse);
                }
                return new ApiResponse<ObjetMaquetteDetail>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<
                                                ObjetMaquetteDetail>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder creerObjetMaquetteRequestBuilder(
            String codeStructure, CreerObjetMaquetteRequest creerObjetMaquetteRequest)
            throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling"
                            + " creerObjetMaquette");
        }
        // verify the required parameter 'creerObjetMaquetteRequest' is set
        if (creerObjetMaquetteRequest == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'creerObjetMaquetteRequest' when calling"
                            + " creerObjetMaquette");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objets-maquette"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json");
        localVarRequestBuilder.header("Accept", "application/json");

        try {
            byte[] localVarPostBody =
                    memberVarObjectMapper.writeValueAsBytes(creerObjetMaquetteRequest);
            localVarRequestBuilder.method(
                    "POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Déclarer un point d&#39;inscription administrative
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param contexteId Identifiant du contexte à valider. Ce contexte doit correspondre à un point
     *     d&#39;inscription administrative (PIA) (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @return ObjetMaquetteDetail
     * @throws ApiException if fails to make API call
     */
    public ObjetMaquetteDetail declarerPointInscriptionAdministrative(
            String codeStructure, UUID id, UUID contexteId, String ifMatch) throws ApiException {
        ApiResponse<ObjetMaquetteDetail> localVarResponse =
                declarerPointInscriptionAdministrativeWithHttpInfo(
                        codeStructure, id, contexteId, ifMatch);
        return localVarResponse.getData();
    }

    /**
     * Déclarer un point d&#39;inscription administrative
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param contexteId Identifiant du contexte à valider. Ce contexte doit correspondre à un point
     *     d&#39;inscription administrative (PIA) (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @return ApiResponse&lt;ObjetMaquetteDetail&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<ObjetMaquetteDetail> declarerPointInscriptionAdministrativeWithHttpInfo(
            String codeStructure, UUID id, UUID contexteId, String ifMatch) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                declarerPointInscriptionAdministrativeRequestBuilder(
                        codeStructure, id, contexteId, ifMatch);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException(
                            "declarerPointInscriptionAdministrative", localVarResponse);
                }
                return new ApiResponse<ObjetMaquetteDetail>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<
                                                ObjetMaquetteDetail>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder declarerPointInscriptionAdministrativeRequestBuilder(
            String codeStructure, UUID id, UUID contexteId, String ifMatch) throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling"
                            + " declarerPointInscriptionAdministrative");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'id' when calling"
                            + " declarerPointInscriptionAdministrative");
        }
        // verify the required parameter 'contexteId' is set
        if (contexteId == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'contexteId' when calling"
                            + " declarerPointInscriptionAdministrative");
        }
        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'ifMatch' when calling"
                            + " declarerPointInscriptionAdministrative");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objet-maquette/{id}/contexte/{contexteId}/declarerPointInscriptionAdministrative"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()))
                        .replace("{contexteId}", ApiClient.urlEncode(contexteId.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        if (ifMatch != null) {
            localVarRequestBuilder.header("If-Match", ifMatch.toString());
        }
        localVarRequestBuilder.header("Accept", "application/json, json/application");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Désactive un point d&#39;inscription administrative sur un chemin validé
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param contexteId Identifiant du contexte à valider. Ce contexte doit correspondre à un point
     *     d&#39;inscription administrative (PIA) (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @return ObjetMaquetteDetail
     * @throws ApiException if fails to make API call
     */
    public ObjetMaquetteDetail desactiverPointInscriptionAdministrative(
            String codeStructure, UUID id, UUID contexteId, String ifMatch) throws ApiException {
        ApiResponse<ObjetMaquetteDetail> localVarResponse =
                desactiverPointInscriptionAdministrativeWithHttpInfo(
                        codeStructure, id, contexteId, ifMatch);
        return localVarResponse.getData();
    }

    /**
     * Désactive un point d&#39;inscription administrative sur un chemin validé
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param contexteId Identifiant du contexte à valider. Ce contexte doit correspondre à un point
     *     d&#39;inscription administrative (PIA) (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @return ApiResponse&lt;ObjetMaquetteDetail&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<ObjetMaquetteDetail> desactiverPointInscriptionAdministrativeWithHttpInfo(
            String codeStructure, UUID id, UUID contexteId, String ifMatch) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                desactiverPointInscriptionAdministrativeRequestBuilder(
                        codeStructure, id, contexteId, ifMatch);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException(
                            "desactiverPointInscriptionAdministrative", localVarResponse);
                }
                return new ApiResponse<ObjetMaquetteDetail>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<
                                                ObjetMaquetteDetail>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder desactiverPointInscriptionAdministrativeRequestBuilder(
            String codeStructure, UUID id, UUID contexteId, String ifMatch) throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling"
                            + " desactiverPointInscriptionAdministrative");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'id' when calling"
                            + " desactiverPointInscriptionAdministrative");
        }
        // verify the required parameter 'contexteId' is set
        if (contexteId == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'contexteId' when calling"
                            + " desactiverPointInscriptionAdministrative");
        }
        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'ifMatch' when calling"
                            + " desactiverPointInscriptionAdministrative");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objet-maquette/{id}/contexte/{contexteId}/desactiverPointInscriptionAdministrative"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()))
                        .replace("{contexteId}", ApiClient.urlEncode(contexteId.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        if (ifMatch != null) {
            localVarRequestBuilder.header("If-Match", ifMatch.toString());
        }
        localVarRequestBuilder.header("Accept", "application/json, json/application");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Retourne les objets maquette ayant un lien de correspondance (direct ou indirect) avec
     * l&#39;objetMaquette demandé.
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @return ObjetMaquetteHistory
     * @throws ApiException if fails to make API call
     */
    public ObjetMaquetteHistory lireHistorique(String codeStructure, UUID id) throws ApiException {
        ApiResponse<ObjetMaquetteHistory> localVarResponse =
                lireHistoriqueWithHttpInfo(codeStructure, id);
        return localVarResponse.getData();
    }

    /**
     * Retourne les objets maquette ayant un lien de correspondance (direct ou indirect) avec
     * l&#39;objetMaquette demandé.
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @return ApiResponse&lt;ObjetMaquetteHistory&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<ObjetMaquetteHistory> lireHistoriqueWithHttpInfo(
            String codeStructure, UUID id) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                lireHistoriqueRequestBuilder(codeStructure, id);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("lireHistorique", localVarResponse);
                }
                return new ApiResponse<ObjetMaquetteHistory>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<ObjetMaquetteHistory>() {}) // closes the
                        // InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder lireHistoriqueRequestBuilder(String codeStructure, UUID id)
            throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling lireHistorique");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'id' when calling lireHistorique");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objet-maquette/{id}/histories"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Lire objet maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @return ObjetMaquetteDetail
     * @throws ApiException if fails to make API call
     */
    public ObjetMaquetteDetail lireObjetMaquette(String codeStructure, UUID id)
            throws ApiException {
        ApiResponse<ObjetMaquetteDetail> localVarResponse =
                lireObjetMaquetteWithHttpInfo(codeStructure, id);
        return localVarResponse.getData();
    }

    /**
     * Lire objet maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @return ApiResponse&lt;ObjetMaquetteDetail&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<ObjetMaquetteDetail> lireObjetMaquetteWithHttpInfo(
            String codeStructure, UUID id) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                lireObjetMaquetteRequestBuilder(codeStructure, id);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("lireObjetMaquette", localVarResponse);
                }
                return new ApiResponse<ObjetMaquetteDetail>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<
                                                ObjetMaquetteDetail>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder lireObjetMaquetteRequestBuilder(String codeStructure, UUID id)
            throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling"
                            + " lireObjetMaquette");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'id' when calling lireObjetMaquette");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objets-maquette/{id}"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Lister les contextes d&#39;un objet maquette Permet de lire le détails des contextes d&#39;un
     * objet maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @return List&lt;ContexteDetails&gt;
     * @throws ApiException if fails to make API call
     */
    public List<ContexteDetails> listerContextes(String codeStructure, UUID id)
            throws ApiException {
        ApiResponse<List<ContexteDetails>> localVarResponse =
                listerContextesWithHttpInfo(codeStructure, id);
        return localVarResponse.getData();
    }

    /**
     * Lister les contextes d&#39;un objet maquette Permet de lire le détails des contextes d&#39;un
     * objet maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @return ApiResponse&lt;List&lt;ContexteDetails&gt;&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<List<ContexteDetails>> listerContextesWithHttpInfo(
            String codeStructure, UUID id) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                listerContextesRequestBuilder(codeStructure, id);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("listerContextes", localVarResponse);
                }
                return new ApiResponse<List<ContexteDetails>>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<List<ContexteDetails>>() {}) // closes the
                        // InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder listerContextesRequestBuilder(String codeStructure, UUID id)
            throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling listerContextes");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'id' when calling listerContextes");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objet-maquette/{id}/contextes"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json, json/application");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Modifier code objet maquette Modifier le code d&#39;un objet maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @param modifierCodeObjetMaquetteRequest L&#39;objet maquette à modifier (required)
     * @return ObjetMaquetteDetail
     * @throws ApiException if fails to make API call
     */
    public ObjetMaquetteDetail modifierCodeObjetMaquette(
            String codeStructure,
            UUID id,
            String ifMatch,
            ModifierCodeObjetMaquetteRequest modifierCodeObjetMaquetteRequest)
            throws ApiException {
        ApiResponse<ObjetMaquetteDetail> localVarResponse =
                modifierCodeObjetMaquetteWithHttpInfo(
                        codeStructure, id, ifMatch, modifierCodeObjetMaquetteRequest);
        return localVarResponse.getData();
    }

    /**
     * Modifier code objet maquette Modifier le code d&#39;un objet maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @param modifierCodeObjetMaquetteRequest L&#39;objet maquette à modifier (required)
     * @return ApiResponse&lt;ObjetMaquetteDetail&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<ObjetMaquetteDetail> modifierCodeObjetMaquetteWithHttpInfo(
            String codeStructure,
            UUID id,
            String ifMatch,
            ModifierCodeObjetMaquetteRequest modifierCodeObjetMaquetteRequest)
            throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                modifierCodeObjetMaquetteRequestBuilder(
                        codeStructure, id, ifMatch, modifierCodeObjetMaquetteRequest);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("modifierCodeObjetMaquette", localVarResponse);
                }
                return new ApiResponse<ObjetMaquetteDetail>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<
                                                ObjetMaquetteDetail>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder modifierCodeObjetMaquetteRequestBuilder(
            String codeStructure,
            UUID id,
            String ifMatch,
            ModifierCodeObjetMaquetteRequest modifierCodeObjetMaquetteRequest)
            throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling"
                            + " modifierCodeObjetMaquette");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'id' when calling modifierCodeObjetMaquette");
        }
        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'ifMatch' when calling"
                            + " modifierCodeObjetMaquette");
        }
        // verify the required parameter 'modifierCodeObjetMaquetteRequest' is set
        if (modifierCodeObjetMaquetteRequest == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'modifierCodeObjetMaquetteRequest' when"
                            + " calling modifierCodeObjetMaquette");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objet-maquette/{id}/code"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        if (ifMatch != null) {
            localVarRequestBuilder.header("If-Match", ifMatch.toString());
        }
        localVarRequestBuilder.header("Content-Type", "application/json");
        localVarRequestBuilder.header("Accept", "application/json, json/application");

        try {
            byte[] localVarPostBody =
                    memberVarObjectMapper.writeValueAsBytes(modifierCodeObjetMaquetteRequest);
            localVarRequestBuilder.method(
                    "PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Modifier descripteurs d&#39;un contexte
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param contexteId Identifiant du contexte à valider. Ce contexte doit correspondre à un point
     *     d&#39;inscription administrative (PIA) (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @param descripteursContexteRequest Les descripteurs du contexte (required)
     * @return ObjetMaquetteDetail
     * @throws ApiException if fails to make API call
     */
    public ObjetMaquetteDetail modifierDescripteursContexte(
            String codeStructure,
            UUID id,
            UUID contexteId,
            String ifMatch,
            DescripteursContexteRequest descripteursContexteRequest)
            throws ApiException {
        ApiResponse<ObjetMaquetteDetail> localVarResponse =
                modifierDescripteursContexteWithHttpInfo(
                        codeStructure, id, contexteId, ifMatch, descripteursContexteRequest);
        return localVarResponse.getData();
    }

    /**
     * Modifier descripteurs d&#39;un contexte
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param contexteId Identifiant du contexte à valider. Ce contexte doit correspondre à un point
     *     d&#39;inscription administrative (PIA) (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @param descripteursContexteRequest Les descripteurs du contexte (required)
     * @return ApiResponse&lt;ObjetMaquetteDetail&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<ObjetMaquetteDetail> modifierDescripteursContexteWithHttpInfo(
            String codeStructure,
            UUID id,
            UUID contexteId,
            String ifMatch,
            DescripteursContexteRequest descripteursContexteRequest)
            throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                modifierDescripteursContexteRequestBuilder(
                        codeStructure, id, contexteId, ifMatch, descripteursContexteRequest);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("modifierDescripteursContexte", localVarResponse);
                }
                return new ApiResponse<ObjetMaquetteDetail>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<
                                                ObjetMaquetteDetail>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder modifierDescripteursContexteRequestBuilder(
            String codeStructure,
            UUID id,
            UUID contexteId,
            String ifMatch,
            DescripteursContexteRequest descripteursContexteRequest)
            throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling"
                            + " modifierDescripteursContexte");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'id' when calling"
                            + " modifierDescripteursContexte");
        }
        // verify the required parameter 'contexteId' is set
        if (contexteId == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'contexteId' when calling"
                            + " modifierDescripteursContexte");
        }
        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'ifMatch' when calling"
                            + " modifierDescripteursContexte");
        }
        // verify the required parameter 'descripteursContexteRequest' is set
        if (descripteursContexteRequest == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'descripteursContexteRequest' when calling"
                            + " modifierDescripteursContexte");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objet-maquette/{id}/contexte/{contexteId}"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()))
                        .replace("{contexteId}", ApiClient.urlEncode(contexteId.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        if (ifMatch != null) {
            localVarRequestBuilder.header("If-Match", ifMatch.toString());
        }
        localVarRequestBuilder.header("Content-Type", "application/json");
        localVarRequestBuilder.header("Accept", "application/json, json/application");

        try {
            byte[] localVarPostBody =
                    memberVarObjectMapper.writeValueAsBytes(descripteursContexteRequest);
            localVarRequestBuilder.method(
                    "PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Modifier descripteurs enquête objet maquette Modifier les descripteurs des enquêtesd&#39;un
     * objet maquette. Pour l&#39;instant, on ne supporte que les enquêtes SISE.
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @param descripteursEnqueteRequest Commande pour modifier un objet maquette (required)
     * @return ObjetMaquetteDetail
     * @throws ApiException if fails to make API call
     */
    public ObjetMaquetteDetail modifierDescripteursEnqueteObjetMaquette(
            String codeStructure,
            UUID id,
            String ifMatch,
            DescripteursEnqueteRequest descripteursEnqueteRequest)
            throws ApiException {
        ApiResponse<ObjetMaquetteDetail> localVarResponse =
                modifierDescripteursEnqueteObjetMaquetteWithHttpInfo(
                        codeStructure, id, ifMatch, descripteursEnqueteRequest);
        return localVarResponse.getData();
    }

    /**
     * Modifier descripteurs enquête objet maquette Modifier les descripteurs des enquêtesd&#39;un
     * objet maquette. Pour l&#39;instant, on ne supporte que les enquêtes SISE.
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @param descripteursEnqueteRequest Commande pour modifier un objet maquette (required)
     * @return ApiResponse&lt;ObjetMaquetteDetail&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<ObjetMaquetteDetail> modifierDescripteursEnqueteObjetMaquetteWithHttpInfo(
            String codeStructure,
            UUID id,
            String ifMatch,
            DescripteursEnqueteRequest descripteursEnqueteRequest)
            throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                modifierDescripteursEnqueteObjetMaquetteRequestBuilder(
                        codeStructure, id, ifMatch, descripteursEnqueteRequest);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException(
                            "modifierDescripteursEnqueteObjetMaquette", localVarResponse);
                }
                return new ApiResponse<ObjetMaquetteDetail>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<
                                                ObjetMaquetteDetail>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder modifierDescripteursEnqueteObjetMaquetteRequestBuilder(
            String codeStructure,
            UUID id,
            String ifMatch,
            DescripteursEnqueteRequest descripteursEnqueteRequest)
            throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling"
                            + " modifierDescripteursEnqueteObjetMaquette");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'id' when calling"
                            + " modifierDescripteursEnqueteObjetMaquette");
        }
        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'ifMatch' when calling"
                            + " modifierDescripteursEnqueteObjetMaquette");
        }
        // verify the required parameter 'descripteursEnqueteRequest' is set
        if (descripteursEnqueteRequest == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'descripteursEnqueteRequest' when calling"
                            + " modifierDescripteursEnqueteObjetMaquette");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objet-maquette/{id}/descripteurs-enquete"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        if (ifMatch != null) {
            localVarRequestBuilder.header("If-Match", ifMatch.toString());
        }
        localVarRequestBuilder.header("Content-Type", "application/json");
        localVarRequestBuilder.header("Accept", "application/json, json/application");

        try {
            byte[] localVarPostBody =
                    memberVarObjectMapper.writeValueAsBytes(descripteursEnqueteRequest);
            localVarRequestBuilder.method(
                    "PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Modifier descripteurs objet maquette Modifier les descripteurs d&#39;un objet maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @param descripteursObjetMaquetteRequest Commande pour modifier un objet maquette (required)
     * @return ObjetMaquetteDetail
     * @throws ApiException if fails to make API call
     */
    public ObjetMaquetteDetail modifierDescripteursObjetMaquette(
            String codeStructure,
            UUID id,
            String ifMatch,
            DescripteursObjetMaquetteRequest descripteursObjetMaquetteRequest)
            throws ApiException {
        ApiResponse<ObjetMaquetteDetail> localVarResponse =
                modifierDescripteursObjetMaquetteWithHttpInfo(
                        codeStructure, id, ifMatch, descripteursObjetMaquetteRequest);
        return localVarResponse.getData();
    }

    /**
     * Modifier descripteurs objet maquette Modifier les descripteurs d&#39;un objet maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @param descripteursObjetMaquetteRequest Commande pour modifier un objet maquette (required)
     * @return ApiResponse&lt;ObjetMaquetteDetail&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<ObjetMaquetteDetail> modifierDescripteursObjetMaquetteWithHttpInfo(
            String codeStructure,
            UUID id,
            String ifMatch,
            DescripteursObjetMaquetteRequest descripteursObjetMaquetteRequest)
            throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                modifierDescripteursObjetMaquetteRequestBuilder(
                        codeStructure, id, ifMatch, descripteursObjetMaquetteRequest);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("modifierDescripteursObjetMaquette", localVarResponse);
                }
                return new ApiResponse<ObjetMaquetteDetail>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<
                                                ObjetMaquetteDetail>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder modifierDescripteursObjetMaquetteRequestBuilder(
            String codeStructure,
            UUID id,
            String ifMatch,
            DescripteursObjetMaquetteRequest descripteursObjetMaquetteRequest)
            throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling"
                            + " modifierDescripteursObjetMaquette");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'id' when calling"
                            + " modifierDescripteursObjetMaquette");
        }
        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'ifMatch' when calling"
                            + " modifierDescripteursObjetMaquette");
        }
        // verify the required parameter 'descripteursObjetMaquetteRequest' is set
        if (descripteursObjetMaquetteRequest == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'descripteursObjetMaquetteRequest' when"
                            + " calling modifierDescripteursObjetMaquette");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objet-maquette/{id}/descripteurs-objet-maquette"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        if (ifMatch != null) {
            localVarRequestBuilder.header("If-Match", ifMatch.toString());
        }
        localVarRequestBuilder.header("Content-Type", "application/json");
        localVarRequestBuilder.header("Accept", "application/json, json/application");

        try {
            byte[] localVarPostBody =
                    memberVarObjectMapper.writeValueAsBytes(descripteursObjetMaquetteRequest);
            localVarRequestBuilder.method(
                    "PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Modifier descripteurs Syllabus objet maquette Modifier les descripteurs du Syllabus d&#39;un
     * objet maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @param descripteursSyllabus Commande pour modifier un objet maquette (required)
     * @return ObjetMaquetteDetail
     * @throws ApiException if fails to make API call
     */
    public ObjetMaquetteDetail modifierDescripteursSyllabusObjetMaquette(
            String codeStructure,
            UUID id,
            String ifMatch,
            DescripteursSyllabus descripteursSyllabus)
            throws ApiException {
        ApiResponse<ObjetMaquetteDetail> localVarResponse =
                modifierDescripteursSyllabusObjetMaquetteWithHttpInfo(
                        codeStructure, id, ifMatch, descripteursSyllabus);
        return localVarResponse.getData();
    }

    /**
     * Modifier descripteurs Syllabus objet maquette Modifier les descripteurs du Syllabus d&#39;un
     * objet maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @param descripteursSyllabus Commande pour modifier un objet maquette (required)
     * @return ApiResponse&lt;ObjetMaquetteDetail&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<ObjetMaquetteDetail> modifierDescripteursSyllabusObjetMaquetteWithHttpInfo(
            String codeStructure,
            UUID id,
            String ifMatch,
            DescripteursSyllabus descripteursSyllabus)
            throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                modifierDescripteursSyllabusObjetMaquetteRequestBuilder(
                        codeStructure, id, ifMatch, descripteursSyllabus);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException(
                            "modifierDescripteursSyllabusObjetMaquette", localVarResponse);
                }
                return new ApiResponse<ObjetMaquetteDetail>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<
                                                ObjetMaquetteDetail>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder modifierDescripteursSyllabusObjetMaquetteRequestBuilder(
            String codeStructure,
            UUID id,
            String ifMatch,
            DescripteursSyllabus descripteursSyllabus)
            throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling"
                            + " modifierDescripteursSyllabusObjetMaquette");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'id' when calling"
                            + " modifierDescripteursSyllabusObjetMaquette");
        }
        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'ifMatch' when calling"
                            + " modifierDescripteursSyllabusObjetMaquette");
        }
        // verify the required parameter 'descripteursSyllabus' is set
        if (descripteursSyllabus == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'descripteursSyllabus' when calling"
                            + " modifierDescripteursSyllabusObjetMaquette");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objet-maquette/{id}/descripteurs-syllabus"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        if (ifMatch != null) {
            localVarRequestBuilder.header("If-Match", ifMatch.toString());
        }
        localVarRequestBuilder.header("Content-Type", "application/json");
        localVarRequestBuilder.header("Accept", "application/json, json/application");

        try {
            byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(descripteursSyllabus);
            localVarRequestBuilder.method(
                    "PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Modifier formats enseignement objet maquette Modifier les formats d&#39;enseignement d&#39;un
     * objet maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @param formatsEnseignementRequest Commande pour modifier un objet maquette (required)
     * @return ObjetMaquetteDetail
     * @throws ApiException if fails to make API call
     */
    public ObjetMaquetteDetail modifierFormatsEnseignementObjetMaquette(
            String codeStructure,
            UUID id,
            String ifMatch,
            FormatsEnseignementRequest formatsEnseignementRequest)
            throws ApiException {
        ApiResponse<ObjetMaquetteDetail> localVarResponse =
                modifierFormatsEnseignementObjetMaquetteWithHttpInfo(
                        codeStructure, id, ifMatch, formatsEnseignementRequest);
        return localVarResponse.getData();
    }

    /**
     * Modifier formats enseignement objet maquette Modifier les formats d&#39;enseignement d&#39;un
     * objet maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @param formatsEnseignementRequest Commande pour modifier un objet maquette (required)
     * @return ApiResponse&lt;ObjetMaquetteDetail&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<ObjetMaquetteDetail> modifierFormatsEnseignementObjetMaquetteWithHttpInfo(
            String codeStructure,
            UUID id,
            String ifMatch,
            FormatsEnseignementRequest formatsEnseignementRequest)
            throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                modifierFormatsEnseignementObjetMaquetteRequestBuilder(
                        codeStructure, id, ifMatch, formatsEnseignementRequest);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException(
                            "modifierFormatsEnseignementObjetMaquette", localVarResponse);
                }
                return new ApiResponse<ObjetMaquetteDetail>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<
                                                ObjetMaquetteDetail>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder modifierFormatsEnseignementObjetMaquetteRequestBuilder(
            String codeStructure,
            UUID id,
            String ifMatch,
            FormatsEnseignementRequest formatsEnseignementRequest)
            throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling"
                            + " modifierFormatsEnseignementObjetMaquette");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'id' when calling"
                            + " modifierFormatsEnseignementObjetMaquette");
        }
        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'ifMatch' when calling"
                            + " modifierFormatsEnseignementObjetMaquette");
        }
        // verify the required parameter 'formatsEnseignementRequest' is set
        if (formatsEnseignementRequest == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'formatsEnseignementRequest' when calling"
                            + " modifierFormatsEnseignementObjetMaquette");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objet-maquette/{id}/formats-enseignement"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        if (ifMatch != null) {
            localVarRequestBuilder.header("If-Match", ifMatch.toString());
        }
        localVarRequestBuilder.header("Content-Type", "application/json");
        localVarRequestBuilder.header("Accept", "application/json, json/application");

        try {
            byte[] localVarPostBody =
                    memberVarObjectMapper.writeValueAsBytes(formatsEnseignementRequest);
            localVarRequestBuilder.method(
                    "PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Modifier lien parent enfant Modifier la nature du lien entre le parent et un de ses enfants
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param idEnfant id de l&#39;objet enfant (required)
     * @param modifierLienRequest (required)
     * @return ObjetMaquetteDetail
     * @throws ApiException if fails to make API call
     */
    public ObjetMaquetteDetail modifierLienEnfant(
            String codeStructure, UUID id, UUID idEnfant, ModifierLienRequest modifierLienRequest)
            throws ApiException {
        ApiResponse<ObjetMaquetteDetail> localVarResponse =
                modifierLienEnfantWithHttpInfo(codeStructure, id, idEnfant, modifierLienRequest);
        return localVarResponse.getData();
    }

    /**
     * Modifier lien parent enfant Modifier la nature du lien entre le parent et un de ses enfants
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param idEnfant id de l&#39;objet enfant (required)
     * @param modifierLienRequest (required)
     * @return ApiResponse&lt;ObjetMaquetteDetail&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<ObjetMaquetteDetail> modifierLienEnfantWithHttpInfo(
            String codeStructure, UUID id, UUID idEnfant, ModifierLienRequest modifierLienRequest)
            throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                modifierLienEnfantRequestBuilder(codeStructure, id, idEnfant, modifierLienRequest);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("modifierLienEnfant", localVarResponse);
                }
                return new ApiResponse<ObjetMaquetteDetail>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<
                                                ObjetMaquetteDetail>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder modifierLienEnfantRequestBuilder(
            String codeStructure, UUID id, UUID idEnfant, ModifierLienRequest modifierLienRequest)
            throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling"
                            + " modifierLienEnfant");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'id' when calling modifierLienEnfant");
        }
        // verify the required parameter 'idEnfant' is set
        if (idEnfant == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'idEnfant' when calling modifierLienEnfant");
        }
        // verify the required parameter 'modifierLienRequest' is set
        if (modifierLienRequest == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'modifierLienRequest' when calling"
                            + " modifierLienEnfant");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objet-maquette/{id}/enfant/{idEnfant}"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()))
                        .replace("{idEnfant}", ApiClient.urlEncode(idEnfant.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json");
        localVarRequestBuilder.header("Accept", "application/json, json/application");

        try {
            byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(modifierLienRequest);
            localVarRequestBuilder.method(
                    "PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Réactive un point d&#39;inscription administrative sur un chemin validé
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param contexteId Identifiant du contexte à valider. Ce contexte doit correspondre à un point
     *     d&#39;inscription administrative (PIA) (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @return ObjetMaquetteDetail
     * @throws ApiException if fails to make API call
     */
    public ObjetMaquetteDetail reactiverPointInscriptionAdministrative(
            String codeStructure, UUID id, UUID contexteId, String ifMatch) throws ApiException {
        ApiResponse<ObjetMaquetteDetail> localVarResponse =
                reactiverPointInscriptionAdministrativeWithHttpInfo(
                        codeStructure, id, contexteId, ifMatch);
        return localVarResponse.getData();
    }

    /**
     * Réactive un point d&#39;inscription administrative sur un chemin validé
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param contexteId Identifiant du contexte à valider. Ce contexte doit correspondre à un point
     *     d&#39;inscription administrative (PIA) (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @return ApiResponse&lt;ObjetMaquetteDetail&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<ObjetMaquetteDetail> reactiverPointInscriptionAdministrativeWithHttpInfo(
            String codeStructure, UUID id, UUID contexteId, String ifMatch) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                reactiverPointInscriptionAdministrativeRequestBuilder(
                        codeStructure, id, contexteId, ifMatch);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException(
                            "reactiverPointInscriptionAdministrative", localVarResponse);
                }
                return new ApiResponse<ObjetMaquetteDetail>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<
                                                ObjetMaquetteDetail>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder reactiverPointInscriptionAdministrativeRequestBuilder(
            String codeStructure, UUID id, UUID contexteId, String ifMatch) throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling"
                            + " reactiverPointInscriptionAdministrative");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'id' when calling"
                            + " reactiverPointInscriptionAdministrative");
        }
        // verify the required parameter 'contexteId' is set
        if (contexteId == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'contexteId' when calling"
                            + " reactiverPointInscriptionAdministrative");
        }
        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'ifMatch' when calling"
                            + " reactiverPointInscriptionAdministrative");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objet-maquettes/{id}/contexte/{contexteId}/reactiverPointInscriptionAdministrative"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()))
                        .replace("{contexteId}", ApiClient.urlEncode(contexteId.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        if (ifMatch != null) {
            localVarRequestBuilder.header("If-Match", ifMatch.toString());
        }
        localVarRequestBuilder.header("Accept", "application/json, json/application");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Rechercher des objets maquette Rechercher des objets maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param pageable (optional)
     * @param r Critères de recherche (contient). Ce critère sera utilisé pour retourner des espace
     *     dont le code ou le libellé contiennent cette valeur. (optional)
     * @param espace Identifiant d&#39;espace contenant les objets recherchés (optional)
     * @param typeObjetMaquette Types de l&#39;objet maquette Doit correspondre à la liste définie
     *     par TypeObjetMaquette (optional)
     * @param racine Si l&#39;objet doit être orphelin (sans aucun parent) (optional)
     * @param typeObjetFormation Type de l&#39;objet formation Doit correspondre à la nomenclature
     *     TypeObjetFormation (optional)
     * @param ids Liste d&#39;identifiant objet maquette ramène les objets maquettes (optional)
     * @param piaSeulement (optional)
     * @param piaActif (optional)
     * @param valideSeulement Permet de ne remonter que les objets valides (optional)
     * @param mutualise Permet de ne remonter que les objets taggués mutualisé (optional)
     * @return PagedObjetMaquetteSummaries
     * @throws ApiException if fails to make API call
     */
    public PagedObjetMaquetteSummaries rechercherObjetMaquette(
            String codeStructure,
            Pageable pageable,
            String r,
            String espace,
            List<TypeObjetMaquette> typeObjetMaquette,
            Boolean racine,
            String typeObjetFormation,
            List<UUID> ids,
            Boolean piaSeulement,
            Boolean piaActif,
            Boolean valideSeulement,
            Boolean mutualise)
            throws ApiException {
        ApiResponse<PagedObjetMaquetteSummaries> localVarResponse =
                rechercherObjetMaquetteWithHttpInfo(
                        codeStructure,
                        pageable,
                        r,
                        espace,
                        typeObjetMaquette,
                        racine,
                        typeObjetFormation,
                        ids,
                        piaSeulement,
                        piaActif,
                        valideSeulement,
                        mutualise);
        return localVarResponse.getData();
    }

    /**
     * Rechercher des objets maquette Rechercher des objets maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param pageable (optional)
     * @param r Critères de recherche (contient). Ce critère sera utilisé pour retourner des espace
     *     dont le code ou le libellé contiennent cette valeur. (optional)
     * @param espace Identifiant d&#39;espace contenant les objets recherchés (optional)
     * @param typeObjetMaquette Types de l&#39;objet maquette Doit correspondre à la liste définie
     *     par TypeObjetMaquette (optional)
     * @param racine Si l&#39;objet doit être orphelin (sans aucun parent) (optional)
     * @param typeObjetFormation Type de l&#39;objet formation Doit correspondre à la nomenclature
     *     TypeObjetFormation (optional)
     * @param ids Liste d&#39;identifiant objet maquette ramène les objets maquettes (optional)
     * @param piaSeulement (optional)
     * @param piaActif (optional)
     * @param valideSeulement Permet de ne remonter que les objets valides (optional)
     * @param mutualise Permet de ne remonter que les objets taggués mutualisé (optional)
     * @return ApiResponse&lt;PagedObjetMaquetteSummaries&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<PagedObjetMaquetteSummaries> rechercherObjetMaquetteWithHttpInfo(
            String codeStructure,
            Pageable pageable,
            String r,
            String espace,
            List<TypeObjetMaquette> typeObjetMaquette,
            Boolean racine,
            String typeObjetFormation,
            List<UUID> ids,
            Boolean piaSeulement,
            Boolean piaActif,
            Boolean valideSeulement,
            Boolean mutualise)
            throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                rechercherObjetMaquetteRequestBuilder(
                        codeStructure,
                        pageable,
                        r,
                        espace,
                        typeObjetMaquette,
                        racine,
                        typeObjetFormation,
                        ids,
                        piaSeulement,
                        piaActif,
                        valideSeulement,
                        mutualise);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("rechercherObjetMaquette", localVarResponse);
                }
                InputStream data = localVarResponse.body();
                String dataString = IOUtils.toString(new InputStreamReader(data, Charsets.UTF_8));
               

                return new ApiResponse<PagedObjetMaquetteSummaries>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        dataString,
                                        new TypeReference<
                                                PagedObjetMaquetteSummaries>() {}) // closes the
                        // InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder rechercherObjetMaquetteRequestBuilder(
            String codeStructure,
            Pageable pageable,
            String r,
            String espace,
            List<TypeObjetMaquette> typeObjetMaquette,
            Boolean racine,
            String typeObjetFormation,
            List<UUID> ids,
            Boolean piaSeulement,
            Boolean piaActif,
            Boolean valideSeulement,
            Boolean mutualise)
            throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling"
                            + " rechercherObjetMaquette");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objets-maquette"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        localVarQueryParameterBaseName = "pageable";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("page", pageable.getPage()));
        localVarQueryParams.addAll(ApiClient.parameterToPairs("taille", pageable.getTaille()));
        localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "tri", pageable.getTri()));
        localVarQueryParameterBaseName = "r";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("r", r));
        localVarQueryParameterBaseName = "espace";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("espace", espace));
        localVarQueryParameterBaseName = "typeObjetMaquette";
        localVarQueryParams.addAll(
                ApiClient.parameterToPairs("multi", "typeObjetMaquette", typeObjetMaquette));
        localVarQueryParameterBaseName = "racine";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("racine", racine));
        localVarQueryParameterBaseName = "typeObjetFormation";
        localVarQueryParams.addAll(
                ApiClient.parameterToPairs("typeObjetFormation", typeObjetFormation));
        localVarQueryParameterBaseName = "ids";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "ids", ids));
        localVarQueryParameterBaseName = "piaSeulement";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("piaSeulement", piaSeulement));
        localVarQueryParameterBaseName = "piaActif";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("piaActif", piaActif));
        localVarQueryParameterBaseName = "valideSeulement";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("valideSeulement", valideSeulement));
        localVarQueryParameterBaseName = "mutualise";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("mutualise", mutualise));

        if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
            StringJoiner queryJoiner = new StringJoiner("&");
            localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
            if (localVarQueryStringJoiner.length() != 0) {
                queryJoiner.add(localVarQueryStringJoiner.toString());
            }
            localVarRequestBuilder.uri(
                    URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
        } else {
            localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
        }

        localVarRequestBuilder.header("Accept", "application/json, json/application");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Rendre un objet maquette mutualise
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @return ObjetMaquetteDetail
     * @throws ApiException if fails to make API call
     */
    public ObjetMaquetteDetail rendreMutualise(String codeStructure, UUID id, String ifMatch)
            throws ApiException {
        ApiResponse<ObjetMaquetteDetail> localVarResponse =
                rendreMutualiseWithHttpInfo(codeStructure, id, ifMatch);
        return localVarResponse.getData();
    }

    /**
     * Rendre un objet maquette mutualise
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @return ApiResponse&lt;ObjetMaquetteDetail&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<ObjetMaquetteDetail> rendreMutualiseWithHttpInfo(
            String codeStructure, UUID id, String ifMatch) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                rendreMutualiseRequestBuilder(codeStructure, id, ifMatch);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("rendreMutualise", localVarResponse);
                }
                return new ApiResponse<ObjetMaquetteDetail>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<
                                                ObjetMaquetteDetail>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder rendreMutualiseRequestBuilder(
            String codeStructure, UUID id, String ifMatch) throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling rendreMutualise");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'id' when calling rendreMutualise");
        }
        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'ifMatch' when calling rendreMutualise");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objet-maquette/{id}/rendreMutualise"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        if (ifMatch != null) {
            localVarRequestBuilder.header("If-Match", ifMatch.toString());
        }
        localVarRequestBuilder.header("Accept", "application/json, json/application");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Retire un diplôme d&#39;une formation
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param diplomeId (required)
     * @return ObjetMaquetteDetail
     * @throws ApiException if fails to make API call
     */
    public ObjetMaquetteDetail retirerDiplome(String codeStructure, UUID id, UUID diplomeId)
            throws ApiException {
        ApiResponse<ObjetMaquetteDetail> localVarResponse =
                retirerDiplomeWithHttpInfo(codeStructure, id, diplomeId);
        return localVarResponse.getData();
    }

    /**
     * Retire un diplôme d&#39;une formation
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param diplomeId (required)
     * @return ApiResponse&lt;ObjetMaquetteDetail&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<ObjetMaquetteDetail> retirerDiplomeWithHttpInfo(
            String codeStructure, UUID id, UUID diplomeId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                retirerDiplomeRequestBuilder(codeStructure, id, diplomeId);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("retirerDiplome", localVarResponse);
                }
                return new ApiResponse<ObjetMaquetteDetail>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<
                                                ObjetMaquetteDetail>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder retirerDiplomeRequestBuilder(
            String codeStructure, UUID id, UUID diplomeId) throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling retirerDiplome");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'id' when calling retirerDiplome");
        }
        // verify the required parameter 'diplomeId' is set
        if (diplomeId == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'diplomeId' when calling retirerDiplome");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objet-maquette/{id}/diplome/{diplomeId}/retirerDiplome/"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()))
                        .replace("{diplomeId}", ApiClient.urlEncode(diplomeId.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json, json/application");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Retirer un enfant Retirer un enfant sous un père
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param idEnfant id de l&#39;objet enfant (required)
     * @return ObjetMaquetteDetail
     * @throws ApiException if fails to make API call
     */
    public ObjetMaquetteDetail retirerEnfant(String codeStructure, UUID id, UUID idEnfant)
            throws ApiException {
        ApiResponse<ObjetMaquetteDetail> localVarResponse =
                retirerEnfantWithHttpInfo(codeStructure, id, idEnfant);
        return localVarResponse.getData();
    }

    /**
     * Retirer un enfant Retirer un enfant sous un père
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param idEnfant id de l&#39;objet enfant (required)
     * @return ApiResponse&lt;ObjetMaquetteDetail&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<ObjetMaquetteDetail> retirerEnfantWithHttpInfo(
            String codeStructure, UUID id, UUID idEnfant) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                retirerEnfantRequestBuilder(codeStructure, id, idEnfant);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("retirerEnfant", localVarResponse);
                }
                return new ApiResponse<ObjetMaquetteDetail>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<
                                                ObjetMaquetteDetail>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder retirerEnfantRequestBuilder(
            String codeStructure, UUID id, UUID idEnfant) throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling retirerEnfant");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'id' when calling retirerEnfant");
        }
        // verify the required parameter 'idEnfant' is set
        if (idEnfant == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'idEnfant' when calling retirerEnfant");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objet-maquette/{id}/enfant/{idEnfant}"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()))
                        .replace("{idEnfant}", ApiClient.urlEncode(idEnfant.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json, json/application");

        localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Retire un point d&#39;inscription administrative
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param contexteId Identifiant du contexte à valider. Ce contexte doit correspondre à un point
     *     d&#39;inscription administrative (PIA) (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @return ObjetMaquetteDetail
     * @throws ApiException if fails to make API call
     */
    public ObjetMaquetteDetail retirerPointInscriptionAdministrative(
            String codeStructure, UUID id, UUID contexteId, String ifMatch) throws ApiException {
        ApiResponse<ObjetMaquetteDetail> localVarResponse =
                retirerPointInscriptionAdministrativeWithHttpInfo(
                        codeStructure, id, contexteId, ifMatch);
        return localVarResponse.getData();
    }

    /**
     * Retire un point d&#39;inscription administrative
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param contexteId Identifiant du contexte à valider. Ce contexte doit correspondre à un point
     *     d&#39;inscription administrative (PIA) (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @return ApiResponse&lt;ObjetMaquetteDetail&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<ObjetMaquetteDetail> retirerPointInscriptionAdministrativeWithHttpInfo(
            String codeStructure, UUID id, UUID contexteId, String ifMatch) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                retirerPointInscriptionAdministrativeRequestBuilder(
                        codeStructure, id, contexteId, ifMatch);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException(
                            "retirerPointInscriptionAdministrative", localVarResponse);
                }
                return new ApiResponse<ObjetMaquetteDetail>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<
                                                ObjetMaquetteDetail>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder retirerPointInscriptionAdministrativeRequestBuilder(
            String codeStructure, UUID id, UUID contexteId, String ifMatch) throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling"
                            + " retirerPointInscriptionAdministrative");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'id' when calling"
                            + " retirerPointInscriptionAdministrative");
        }
        // verify the required parameter 'contexteId' is set
        if (contexteId == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'contexteId' when calling"
                            + " retirerPointInscriptionAdministrative");
        }
        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'ifMatch' when calling"
                            + " retirerPointInscriptionAdministrative");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objet-maquette/{id}/contexte/{contexteId}/retirerPointInscriptionAdministrative"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()))
                        .replace("{contexteId}", ApiClient.urlEncode(contexteId.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        if (ifMatch != null) {
            localVarRequestBuilder.header("If-Match", ifMatch.toString());
        }
        localVarRequestBuilder.header("Accept", "application/json, json/application");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Supprimer le caractère mutualisé d&#39;un objet maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @return ObjetMaquetteDetail
     * @throws ApiException if fails to make API call
     */
    public ObjetMaquetteDetail supprimerMutualise(String codeStructure, UUID id, String ifMatch)
            throws ApiException {
        ApiResponse<ObjetMaquetteDetail> localVarResponse =
                supprimerMutualiseWithHttpInfo(codeStructure, id, ifMatch);
        return localVarResponse.getData();
    }

    /**
     * Supprimer le caractère mutualisé d&#39;un objet maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @return ApiResponse&lt;ObjetMaquetteDetail&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<ObjetMaquetteDetail> supprimerMutualiseWithHttpInfo(
            String codeStructure, UUID id, String ifMatch) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                supprimerMutualiseRequestBuilder(codeStructure, id, ifMatch);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("supprimerMutualise", localVarResponse);
                }
                return new ApiResponse<ObjetMaquetteDetail>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<
                                                ObjetMaquetteDetail>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder supprimerMutualiseRequestBuilder(
            String codeStructure, UUID id, String ifMatch) throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling"
                            + " supprimerMutualise");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'id' when calling supprimerMutualise");
        }
        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'ifMatch' when calling supprimerMutualise");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objet-maquette/{id}/supprimerMutualise"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        if (ifMatch != null) {
            localVarRequestBuilder.header("If-Match", ifMatch.toString());
        }
        localVarRequestBuilder.header("Accept", "application/json, json/application");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Supprimer objet maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @throws ApiException if fails to make API call
     */
    public void supprimerObjetMaquette(String codeStructure, UUID id, String ifMatch)
            throws ApiException {
        supprimerObjetMaquetteWithHttpInfo(codeStructure, id, ifMatch);
    }

    /**
     * Supprimer objet maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param ifMatch ETag de la ressource actuelle (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> supprimerObjetMaquetteWithHttpInfo(
            String codeStructure, UUID id, String ifMatch) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                supprimerObjetMaquetteRequestBuilder(codeStructure, id, ifMatch);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("supprimerObjetMaquette", localVarResponse);
                }
                return new ApiResponse<Void>(
                        localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder supprimerObjetMaquetteRequestBuilder(
            String codeStructure, UUID id, String ifMatch) throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling"
                            + " supprimerObjetMaquette");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'id' when calling supprimerObjetMaquette");
        }
        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'ifMatch' when calling supprimerObjetMaquette");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objet-maquette/{id}"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        if (ifMatch != null) {
            localVarRequestBuilder.header("If-Match", ifMatch.toString());
        }
        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Valider la partie basse d&#39;un point d&#39;inscription administrative Valide la partie
     * basse d&#39;une maquette à partir d&#39;un point d&#39;inscription administrative
     * jusqu&#39;aux feuilles
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param contexteId Identifiant du contexte à valider. Ce contexte doit correspondre à un point
     *     d&#39;inscription administrative (PIA) (required)
     * @return ObjetMaquetteDetail
     * @throws ApiException if fails to make API call
     */
    public ObjetMaquetteDetail validerPartieBasse(String codeStructure, UUID id, UUID contexteId)
            throws ApiException {
        ApiResponse<ObjetMaquetteDetail> localVarResponse =
                validerPartieBasseWithHttpInfo(codeStructure, id, contexteId);
        return localVarResponse.getData();
    }

    /**
     * Valider la partie basse d&#39;un point d&#39;inscription administrative Valide la partie
     * basse d&#39;une maquette à partir d&#39;un point d&#39;inscription administrative
     * jusqu&#39;aux feuilles
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param contexteId Identifiant du contexte à valider. Ce contexte doit correspondre à un point
     *     d&#39;inscription administrative (PIA) (required)
     * @return ApiResponse&lt;ObjetMaquetteDetail&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<ObjetMaquetteDetail> validerPartieBasseWithHttpInfo(
            String codeStructure, UUID id, UUID contexteId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                validerPartieBasseRequestBuilder(codeStructure, id, contexteId);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("validerPartieBasse", localVarResponse);
                }
                return new ApiResponse<ObjetMaquetteDetail>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<
                                                ObjetMaquetteDetail>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder validerPartieBasseRequestBuilder(
            String codeStructure, UUID id, UUID contexteId) throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling"
                            + " validerPartieBasse");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'id' when calling validerPartieBasse");
        }
        // verify the required parameter 'contexteId' is set
        if (contexteId == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'contexteId' when calling validerPartieBasse");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objet-maquette/{id}/contexte/{contexteId}/validerPartieBasse"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()))
                        .replace("{contexteId}", ApiClient.urlEncode(contexteId.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json, json/application");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Valider la partie haute d&#39;un point d&#39;inscription administrative Valide la partie
     * haute d&#39;une maquette à partir d&#39;un point d&#39;inscription administrative jusqu&#39;à
     * la racine de la maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param contexteId Identifiant du contexte à valider. Ce contexte doit correspondre à un point
     *     d&#39;inscription administrative (PIA) (required)
     * @return ObjetMaquetteDetail
     * @throws ApiException if fails to make API call
     */
    public ObjetMaquetteDetail validerPartieHaute(String codeStructure, UUID id, UUID contexteId)
            throws ApiException {
        ApiResponse<ObjetMaquetteDetail> localVarResponse =
                validerPartieHauteWithHttpInfo(codeStructure, id, contexteId);
        return localVarResponse.getData();
    }

    /**
     * Valider la partie haute d&#39;un point d&#39;inscription administrative Valide la partie
     * haute d&#39;une maquette à partir d&#39;un point d&#39;inscription administrative jusqu&#39;à
     * la racine de la maquette
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param contexteId Identifiant du contexte à valider. Ce contexte doit correspondre à un point
     *     d&#39;inscription administrative (PIA) (required)
     * @return ApiResponse&lt;ObjetMaquetteDetail&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<ObjetMaquetteDetail> validerPartieHauteWithHttpInfo(
            String codeStructure, UUID id, UUID contexteId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                validerPartieHauteRequestBuilder(codeStructure, id, contexteId);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("validerPartieHaute", localVarResponse);
                }
                return new ApiResponse<ObjetMaquetteDetail>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<
                                                ObjetMaquetteDetail>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder validerPartieHauteRequestBuilder(
            String codeStructure, UUID id, UUID contexteId) throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling"
                            + " validerPartieHaute");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'id' when calling validerPartieHaute");
        }
        // verify the required parameter 'contexteId' is set
        if (contexteId == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'contexteId' when calling validerPartieHaute");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/objet-maquette/{id}/contexte/{contexteId}/validerPartieHaute"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()))
                        .replace("{contexteId}", ApiClient.urlEncode(contexteId.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json, json/application");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }
}
