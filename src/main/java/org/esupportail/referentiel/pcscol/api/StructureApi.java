/*
 * REF v1 - Référentiel
 * Liste l'ensemble des services et des opérations disponibles dans le module Referentiel
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.esupportail.referentiel.pcscol.api;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.List;
import java.util.function.Consumer;

import org.esupportail.referentiel.pcscol.invoker.ApiClient;
import org.esupportail.referentiel.pcscol.invoker.ApiException;
import org.esupportail.referentiel.pcscol.invoker.ApiResponse;
import org.esupportail.referentiel.pcscol.ref_api.model.Structure;
import org.esupportail.referentiel.pcscol.ref_api.model.StructureAvecUaiCreation;
import org.esupportail.referentiel.pcscol.ref_api.model.StructureParent;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-30T09:24:02.851634+02:00[Europe/Paris]", comments = "Generator version: 7.7.0")
public class StructureApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public StructureApi() {
    this(new ApiClient());
  }

  public StructureApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Associe une structure parent à une structure enfant
   * 
   * @param codePegase Le code structure de Pégase (required)
   * @param structureParent La structure parent à associer (required)
   * @return Structure
   * @throws ApiException if fails to make API call
   */
  public Structure associerParent(String codePegase, StructureParent structureParent) throws ApiException {
    ApiResponse<Structure> localVarResponse = associerParentWithHttpInfo(codePegase, structureParent);
    return localVarResponse.getData();
  }

  /**
   * Associe une structure parent à une structure enfant
   * 
   * @param codePegase Le code structure de Pégase (required)
   * @param structureParent La structure parent à associer (required)
   * @return ApiResponse&lt;Structure&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Structure> associerParentWithHttpInfo(String codePegase, StructureParent structureParent) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = associerParentRequestBuilder(codePegase, structureParent);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("associerParent", localVarResponse);
        }
        return new ApiResponse<Structure>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Structure>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder associerParentRequestBuilder(String codePegase, StructureParent structureParent) throws ApiException {
    // verify the required parameter 'codePegase' is set
    if (codePegase == null) {
      throw new ApiException(400, "Missing the required parameter 'codePegase' when calling associerParent");
    }
    // verify the required parameter 'structureParent' is set
    if (structureParent == null) {
      throw new ApiException(400, "Missing the required parameter 'structureParent' when calling associerParent");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/structures/codePegase/{codePegase}/associerParent"
        .replace("{codePegase}", ApiClient.urlEncode(codePegase.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(structureParent);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Créer une structure avec UAI sans enregistrer
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param structureAvecUaiCreation La structure à créer (required)
   * @throws ApiException if fails to make API call
   */
  public void creerSansEnregistrerStructureAvecUAI(String codeStructure, StructureAvecUaiCreation structureAvecUaiCreation) throws ApiException {
    creerSansEnregistrerStructureAvecUAIWithHttpInfo(codeStructure, structureAvecUaiCreation);
  }

  /**
   * Créer une structure avec UAI sans enregistrer
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param structureAvecUaiCreation La structure à créer (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> creerSansEnregistrerStructureAvecUAIWithHttpInfo(String codeStructure, StructureAvecUaiCreation structureAvecUaiCreation) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = creerSansEnregistrerStructureAvecUAIRequestBuilder(codeStructure, structureAvecUaiCreation);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("creerSansEnregistrerStructureAvecUAI", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder creerSansEnregistrerStructureAvecUAIRequestBuilder(String codeStructure, StructureAvecUaiCreation structureAvecUaiCreation) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling creerSansEnregistrerStructureAvecUAI");
    }
    // verify the required parameter 'structureAvecUaiCreation' is set
    if (structureAvecUaiCreation == null) {
      throw new ApiException(400, "Missing the required parameter 'structureAvecUaiCreation' when calling creerSansEnregistrerStructureAvecUAI");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/structures/avec-uai/verifier/codeStructure/{codeStructure}"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(structureAvecUaiCreation);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Créer une structure sans UAI sans enregistrer
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param structure La structure sans UAI pour tenter la création (required)
   * @throws ApiException if fails to make API call
   */
  public void creerSansEnregistrerStructureSansUAI(String codeStructure, Structure structure) throws ApiException {
    creerSansEnregistrerStructureSansUAIWithHttpInfo(codeStructure, structure);
  }

  /**
   * Créer une structure sans UAI sans enregistrer
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param structure La structure sans UAI pour tenter la création (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> creerSansEnregistrerStructureSansUAIWithHttpInfo(String codeStructure, Structure structure) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = creerSansEnregistrerStructureSansUAIRequestBuilder(codeStructure, structure);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("creerSansEnregistrerStructureSansUAI", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder creerSansEnregistrerStructureSansUAIRequestBuilder(String codeStructure, Structure structure) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling creerSansEnregistrerStructureSansUAI");
    }
    // verify the required parameter 'structure' is set
    if (structure == null) {
      throw new ApiException(400, "Missing the required parameter 'structure' when calling creerSansEnregistrerStructureSansUAI");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/structures/sans-uai/verifier/codeStructure/{codeStructure}"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(structure);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Créer une structure avec UAI [usage QA]
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param structureAvecUaiCreation La structure à créer (required)
   * @return Structure
   * @throws ApiException if fails to make API call
   */
  public Structure creerStructureAvecUAI(String codeStructure, StructureAvecUaiCreation structureAvecUaiCreation) throws ApiException {
    ApiResponse<Structure> localVarResponse = creerStructureAvecUAIWithHttpInfo(codeStructure, structureAvecUaiCreation);
    return localVarResponse.getData();
  }

  /**
   * Créer une structure avec UAI [usage QA]
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param structureAvecUaiCreation La structure à créer (required)
   * @return ApiResponse&lt;Structure&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Structure> creerStructureAvecUAIWithHttpInfo(String codeStructure, StructureAvecUaiCreation structureAvecUaiCreation) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = creerStructureAvecUAIRequestBuilder(codeStructure, structureAvecUaiCreation);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("creerStructureAvecUAI", localVarResponse);
        }
        return new ApiResponse<Structure>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Structure>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder creerStructureAvecUAIRequestBuilder(String codeStructure, StructureAvecUaiCreation structureAvecUaiCreation) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling creerStructureAvecUAI");
    }
    // verify the required parameter 'structureAvecUaiCreation' is set
    if (structureAvecUaiCreation == null) {
      throw new ApiException(400, "Missing the required parameter 'structureAvecUaiCreation' when calling creerStructureAvecUAI");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/structures/avec-uai/codeStructure/{codeStructure}"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(structureAvecUaiCreation);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Créer une structure sans UAI
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param structure La structure à créer (required)
   * @return Structure
   * @throws ApiException if fails to make API call
   */
  public Structure creerStructureSansUAI(String codeStructure, Structure structure) throws ApiException {
    ApiResponse<Structure> localVarResponse = creerStructureSansUAIWithHttpInfo(codeStructure, structure);
    return localVarResponse.getData();
  }

  /**
   * Créer une structure sans UAI
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param structure La structure à créer (required)
   * @return ApiResponse&lt;Structure&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Structure> creerStructureSansUAIWithHttpInfo(String codeStructure, Structure structure) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = creerStructureSansUAIRequestBuilder(codeStructure, structure);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("creerStructureSansUAI", localVarResponse);
        }
        return new ApiResponse<Structure>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Structure>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder creerStructureSansUAIRequestBuilder(String codeStructure, Structure structure) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling creerStructureSansUAI");
    }
    // verify the required parameter 'structure' is set
    if (structure == null) {
      throw new ApiException(400, "Missing the required parameter 'structure' when calling creerStructureSansUAI");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/structures/sans-uai/codeStructure/{codeStructure}"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(structure);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Dissocie une structure parent d&#39;une structure enfant
   * 
   * @param codePegase Le code structure de Pégase (required)
   * @return Structure
   * @throws ApiException if fails to make API call
   */
  public Structure dissocierParent(String codePegase) throws ApiException {
    ApiResponse<Structure> localVarResponse = dissocierParentWithHttpInfo(codePegase);
    return localVarResponse.getData();
  }

  /**
   * Dissocie une structure parent d&#39;une structure enfant
   * 
   * @param codePegase Le code structure de Pégase (required)
   * @return ApiResponse&lt;Structure&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Structure> dissocierParentWithHttpInfo(String codePegase) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dissocierParentRequestBuilder(codePegase);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dissocierParent", localVarResponse);
        }
        return new ApiResponse<Structure>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Structure>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dissocierParentRequestBuilder(String codePegase) throws ApiException {
    // verify the required parameter 'codePegase' is set
    if (codePegase == null) {
      throw new ApiException(400, "Missing the required parameter 'codePegase' when calling dissocierParent");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/structures/codePegase/{codePegase}/dissocierParent"
        .replace("{codePegase}", ApiClient.urlEncode(codePegase.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Liste des structures disponibles avec informations
   * 
   * @return List&lt;Structure&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Structure> lireListeStructures() throws ApiException {
    ApiResponse<List<Structure>> localVarResponse = lireListeStructuresWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Liste des structures disponibles avec informations
   * 
   * @return ApiResponse&lt;List&lt;Structure&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Structure>> lireListeStructuresWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = lireListeStructuresRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("lireListeStructures", localVarResponse);
        }
        return new ApiResponse<List<Structure>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Structure>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder lireListeStructuresRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/structures";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Lire la structure à partir du code structure de Pégase
   * 
   * @param codePegase Le code structure de Pégase (required)
   * @return Structure
   * @throws ApiException if fails to make API call
   */
  public Structure lireStructure(String codePegase) throws ApiException {
    ApiResponse<Structure> localVarResponse = lireStructureWithHttpInfo(codePegase);
    return localVarResponse.getData();
  }

  /**
   * Lire la structure à partir du code structure de Pégase
   * 
   * @param codePegase Le code structure de Pégase (required)
   * @return ApiResponse&lt;Structure&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Structure> lireStructureWithHttpInfo(String codePegase) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = lireStructureRequestBuilder(codePegase);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("lireStructure", localVarResponse);
        }
        return new ApiResponse<Structure>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Structure>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder lireStructureRequestBuilder(String codePegase) throws ApiException {
    // verify the required parameter 'codePegase' is set
    if (codePegase == null) {
      throw new ApiException(400, "Missing the required parameter 'codePegase' when calling lireStructure");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/structures/codePegase/{codePegase}"
        .replace("{codePegase}", ApiClient.urlEncode(codePegase.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Modifier une structure avec UAI sans enregistrer
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param structure La structure à modifier sans enregistrer (required)
   * @throws ApiException if fails to make API call
   */
  public void modifierSansEnregistrerStructureAvecUAI(String codeStructure, Structure structure) throws ApiException {
    modifierSansEnregistrerStructureAvecUAIWithHttpInfo(codeStructure, structure);
  }

  /**
   * Modifier une structure avec UAI sans enregistrer
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param structure La structure à modifier sans enregistrer (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> modifierSansEnregistrerStructureAvecUAIWithHttpInfo(String codeStructure, Structure structure) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = modifierSansEnregistrerStructureAvecUAIRequestBuilder(codeStructure, structure);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("modifierSansEnregistrerStructureAvecUAI", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder modifierSansEnregistrerStructureAvecUAIRequestBuilder(String codeStructure, Structure structure) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling modifierSansEnregistrerStructureAvecUAI");
    }
    // verify the required parameter 'structure' is set
    if (structure == null) {
      throw new ApiException(400, "Missing the required parameter 'structure' when calling modifierSansEnregistrerStructureAvecUAI");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/structures/avec-uai/verifier/codeStructure/{codeStructure}"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(structure);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Modifier une structure sans UAI sans enregistrer
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param structure La structure à modifier sans enregistrer (required)
   * @throws ApiException if fails to make API call
   */
  public void modifierSansEnregistrerStructureSansUAI(String codeStructure, Structure structure) throws ApiException {
    modifierSansEnregistrerStructureSansUAIWithHttpInfo(codeStructure, structure);
  }

  /**
   * Modifier une structure sans UAI sans enregistrer
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param structure La structure à modifier sans enregistrer (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> modifierSansEnregistrerStructureSansUAIWithHttpInfo(String codeStructure, Structure structure) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = modifierSansEnregistrerStructureSansUAIRequestBuilder(codeStructure, structure);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("modifierSansEnregistrerStructureSansUAI", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder modifierSansEnregistrerStructureSansUAIRequestBuilder(String codeStructure, Structure structure) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling modifierSansEnregistrerStructureSansUAI");
    }
    // verify the required parameter 'structure' is set
    if (structure == null) {
      throw new ApiException(400, "Missing the required parameter 'structure' when calling modifierSansEnregistrerStructureSansUAI");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/structures/sans-uai/verifier/codeStructure/{codeStructure}"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(structure);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Modifier une structure avec UAI
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param structure La structure à modifier (required)
   * @return Structure
   * @throws ApiException if fails to make API call
   */
  public Structure modifierStructureAvecUAI(String codeStructure, Structure structure) throws ApiException {
    ApiResponse<Structure> localVarResponse = modifierStructureAvecUAIWithHttpInfo(codeStructure, structure);
    return localVarResponse.getData();
  }

  /**
   * Modifier une structure avec UAI
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param structure La structure à modifier (required)
   * @return ApiResponse&lt;Structure&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Structure> modifierStructureAvecUAIWithHttpInfo(String codeStructure, Structure structure) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = modifierStructureAvecUAIRequestBuilder(codeStructure, structure);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("modifierStructureAvecUAI", localVarResponse);
        }
        return new ApiResponse<Structure>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Structure>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder modifierStructureAvecUAIRequestBuilder(String codeStructure, Structure structure) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling modifierStructureAvecUAI");
    }
    // verify the required parameter 'structure' is set
    if (structure == null) {
      throw new ApiException(400, "Missing the required parameter 'structure' when calling modifierStructureAvecUAI");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/structures/avec-uai/codeStructure/{codeStructure}"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(structure);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Modifier une structure sans UAI
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param structure La structure à modifier (required)
   * @return Structure
   * @throws ApiException if fails to make API call
   */
  public Structure modifierStructureSansUAI(String codeStructure, Structure structure) throws ApiException {
    ApiResponse<Structure> localVarResponse = modifierStructureSansUAIWithHttpInfo(codeStructure, structure);
    return localVarResponse.getData();
  }

  /**
   * Modifier une structure sans UAI
   * 
   * @param codeStructure Le code metier de la structure avec autorisations (required)
   * @param structure La structure à modifier (required)
   * @return ApiResponse&lt;Structure&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Structure> modifierStructureSansUAIWithHttpInfo(String codeStructure, Structure structure) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = modifierStructureSansUAIRequestBuilder(codeStructure, structure);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("modifierStructureSansUAI", localVarResponse);
        }
        return new ApiResponse<Structure>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Structure>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder modifierStructureSansUAIRequestBuilder(String codeStructure, Structure structure) throws ApiException {
    // verify the required parameter 'codeStructure' is set
    if (codeStructure == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructure' when calling modifierStructureSansUAI");
    }
    // verify the required parameter 'structure' is set
    if (structure == null) {
      throw new ApiException(400, "Missing the required parameter 'structure' when calling modifierStructureSansUAI");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/structures/sans-uai/codeStructure/{codeStructure}"
        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(structure);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
