/*
 * MOF Application v1 - Mise en œuvre de l'offre de formation - Bloc «application»
 * Liste l'ensemble des services et des opérations utilisées par l'application front du module MOF (Mise en œuvre de l'offre de formation)  ### Authentification/autorisation obligatoire  Pour tout appel à une opération vous devez être authentifié/authorisé (voir le paragraphe [Authentification](#section/Authentication) pour les détails).  ### Type de données  Sauf indications spécifiques données au niveau de l'opération, les types de données utilisés dans cette API sont les suivants :  * string - Chaîne de caractères encodée en UTF8 (ex : `Une chaîne de caractère`)    * Dans le cas des descripteurs de type `codeXxx`, seuls les caractères de A à Z, de 0 à 9 et le tiret(-) sont autorisés    * Dans le cas des descripteurs de type montant ou nombre avec une partie décimale, seuls les caractères de 0 à 9 et le point(.) sont autorisés (ex : `12525.99`)  * string($date) - Une date sous la forme d'une chaîne de caractères (ex : `2020-02-25`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))  * string($date-time) - Une date et heure avec fuseau horaire sous la forme d'une chaîne de caractères (ex : `2020-02-25T18:36:22+02:00`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))  * integer($int64) - Un entier sur 64 bits (de -9 223 372 036 854 775 808 à 9 223 372 036 854 775 807) (ex : `2542`)  * integer($int32) - Un entier sur 32 bits (de –2 147 483 648 à 2 147 483 647) (ex : `2542`)  * boolean - Un booléen représenté par `true` ou `false`  ### Code retour   * 200 - Ok : L'opération s'est déroulée avec succès  * 201 - Created : L'opération a aboutie à la création d'une ressource  * 400 - Bad request :    * Un ou des paramètres d'entrées sont erronées    * Une erreur fonctionnelle s'est produite  * 404 - Not Found : La ressource demandée n'est pas trouvé    * Remarque : Dans le cas des opérations retournant une liste, on recevra un code 200 avec en résultat une liste vide  * 500 - Internal server error : Erreur inattendue et non gérés 
 *
 * The version of the OpenAPI document: 2.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.esupportail.referentiel.pcscol.api;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.StringJoiner;
import java.util.function.Consumer;

import org.esupportail.referentiel.pcscol.invoker.ApiClient;
import org.esupportail.referentiel.pcscol.invoker.ApiException;
import org.esupportail.referentiel.pcscol.invoker.ApiResponse;
import org.esupportail.referentiel.pcscol.invoker.Pair;
import org.esupportail.referentiel.pcscol.model.formation.Formation;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-16T08:54:45.925006+01:00[Europe/Paris]")
public class FormationsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public FormationsApi() {
    this(new ApiClient());
  }

  public FormationsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }


  



  private HttpRequest.Builder lireRequestBuilder(String codeStructureEtablissement, String codeFormation, String codePeriode) throws ApiException {
    // verify the required parameter 'codeStructureEtablissement' is set
    if (codeStructureEtablissement == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructureEtablissement' when calling lire");
    }
    // verify the required parameter 'codeFormation' is set
    if (codeFormation == null) {
      throw new ApiException(400, "Missing the required parameter 'codeFormation' when calling lire");
    }
    // verify the required parameter 'codePeriode' is set
    if (codePeriode == null) {
      throw new ApiException(400, "Missing the required parameter 'codePeriode' when calling lire");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/formations/{codeFormation}/periodes/{codePeriode}"
        .replace("{codeFormation}", ApiClient.urlEncode(codeFormation.toString()))
        .replace("{codePeriode}", ApiClient.urlEncode(codePeriode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("codeStructureEtablissement", codeStructureEtablissement));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lire les formations mises en œuvre pour un établissement
   * 
   * @param codeStructureEtablissement Le code structure de l&#39;établissement (required)
   * @param codePeriode Code de la période du filtre ou de la recherche (optionnel) (optional)
   * @param uniquementOuvrableAInscription Paramètre optionnel qui spécifie si le service ne doit ramener que les formations ouvrables à l&#39;inscription administraitive (optional, default to false)
   * @param uniquementOuvrableAuChoixDuCursus Paramètre optionnel qui spécifie si le service ne doit ramener que les formations ouvrables au choix du cursus (optional, default to false)
   * @return List&lt;Formation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Formation> lireListe(String codeStructureEtablissement, String codePeriode, Boolean uniquementOuvrableAInscription, Boolean uniquementOuvrableAuChoixDuCursus) throws ApiException {
    ApiResponse<List<Formation>> localVarResponse = lireListeWithHttpInfo(codeStructureEtablissement, codePeriode, uniquementOuvrableAInscription, uniquementOuvrableAuChoixDuCursus);
    return localVarResponse.getData();
  }

  /**
   * Lire les formations mises en œuvre pour un établissement
   * 
   * @param codeStructureEtablissement Le code structure de l&#39;établissement (required)
   * @param codePeriode Code de la période du filtre ou de la recherche (optionnel) (optional)
   * @param uniquementOuvrableAInscription Paramètre optionnel qui spécifie si le service ne doit ramener que les formations ouvrables à l&#39;inscription administraitive (optional, default to false)
   * @param uniquementOuvrableAuChoixDuCursus Paramètre optionnel qui spécifie si le service ne doit ramener que les formations ouvrables au choix du cursus (optional, default to false)
   * @return ApiResponse&lt;List&lt;Formation&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Formation>> lireListeWithHttpInfo(String codeStructureEtablissement, String codePeriode, Boolean uniquementOuvrableAInscription, Boolean uniquementOuvrableAuChoixDuCursus) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = lireListeRequestBuilder(codeStructureEtablissement, codePeriode, uniquementOuvrableAInscription, uniquementOuvrableAuChoixDuCursus);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("lireListe", localVarResponse);
        }
        return new ApiResponse<List<Formation>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Formation>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder lireListeRequestBuilder(String codeStructureEtablissement, String codePeriode, Boolean uniquementOuvrableAInscription, Boolean uniquementOuvrableAuChoixDuCursus) throws ApiException {
    // verify the required parameter 'codeStructureEtablissement' is set
    if (codeStructureEtablissement == null) {
      throw new ApiException(400, "Missing the required parameter 'codeStructureEtablissement' when calling lireListe");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/formations";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("codeStructureEtablissement", codeStructureEtablissement));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("codePeriode", codePeriode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uniquementOuvrableAInscription", uniquementOuvrableAInscription));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uniquementOuvrableAuChoixDuCursus", uniquementOuvrableAuChoixDuCursus));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
 
}
