/*
 * OffreDeFormation V1
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module OFFRE DE FORMATION  Description service ODF  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | | genre     | le genre de la personne est invalide       | | dateEntre | la date est invalide                       | | telephone | le téléphone est invalide                  | | email     | le mail est invalide                       |
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.esupportail.referentiel.pcscol.api;


import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.StringJoiner;
import java.util.UUID;
import java.util.function.Consumer;

import org.esupportail.referentiel.pcscol.invoker.ApiClient;
import org.esupportail.referentiel.pcscol.invoker.ApiException;
import org.esupportail.referentiel.pcscol.invoker.ApiResponse;
import org.esupportail.referentiel.pcscol.invoker.Pair;
import org.esupportail.referentiel.pcscol.odf.model.CreerEspaceRequest;
import org.esupportail.referentiel.pcscol.odf.model.Espace;
import org.esupportail.referentiel.pcscol.odf.model.Pageable;
import org.esupportail.referentiel.pcscol.odf.model.PagedEspaces;
import org.esupportail.referentiel.pcscol.odf.model.TypeEspace;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2024-07-04T09:22:32.722688+02:00[Europe/Paris]",
        comments = "Generator version: 7.7.0")
public class EspacesApi {
    private final HttpClient memberVarHttpClient;
    private final ObjectMapper memberVarObjectMapper;
    private final String memberVarBaseUri;
    private final Consumer<HttpRequest.Builder> memberVarInterceptor;
    private final Duration memberVarReadTimeout;
    private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
    private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

    public EspacesApi() {
        this(new ApiClient());
    }

    public EspacesApi(ApiClient apiClient) {
        memberVarHttpClient = apiClient.getHttpClient();
        memberVarObjectMapper = apiClient.getObjectMapper();
        memberVarBaseUri = apiClient.getBaseUri();
        memberVarInterceptor = apiClient.getRequestInterceptor();
        memberVarReadTimeout = apiClient.getReadTimeout();
        memberVarResponseInterceptor = apiClient.getResponseInterceptor();
        memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
    }

    protected ApiException getApiException(String operationId, HttpResponse<InputStream> response)
            throws IOException {
        String body = response.body() == null ? null : new String(response.body().readAllBytes());
        String message = formatExceptionMessage(operationId, response.statusCode(), body);
        return new ApiException(response.statusCode(), message, response.headers(), body);
    }

    private String formatExceptionMessage(String operationId, int statusCode, String body) {
        if (body == null || body.isEmpty()) {
            body = "[no body]";
        }
        return operationId + " call failed with: " + statusCode + " - " + body;
    }

    /**
     * Création d&#39;un espace de travail Création d&#39;un espace de travail
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param creerEspaceRequest L&#39;espace à créer (required)
     * @return Espace
     * @throws ApiException if fails to make API call
     */
    public Espace creerEspace(String codeStructure, CreerEspaceRequest creerEspaceRequest)
            throws ApiException {
        ApiResponse<Espace> localVarResponse =
                creerEspaceWithHttpInfo(codeStructure, creerEspaceRequest);
        return localVarResponse.getData();
    }

    /**
     * Création d&#39;un espace de travail Création d&#39;un espace de travail
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param creerEspaceRequest L&#39;espace à créer (required)
     * @return ApiResponse&lt;Espace&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Espace> creerEspaceWithHttpInfo(
            String codeStructure, CreerEspaceRequest creerEspaceRequest) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                creerEspaceRequestBuilder(codeStructure, creerEspaceRequest);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("creerEspace", localVarResponse);
                }
                return new ApiResponse<Espace>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<Espace>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder creerEspaceRequestBuilder(
            String codeStructure, CreerEspaceRequest creerEspaceRequest) throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'codeStructure' when calling creerEspace");
        }
        // verify the required parameter 'creerEspaceRequest' is set
        if (creerEspaceRequest == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'creerEspaceRequest' when calling creerEspace");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/espaces"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json");
        localVarRequestBuilder.header("Accept", "application/json, json/application");

        try {
            byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(creerEspaceRequest);
            localVarRequestBuilder.method(
                    "POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Lire un espace Lecture d&#39;un espace
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @return Espace
     * @throws ApiException if fails to make API call
     */
    public Espace lireEspace(String codeStructure, UUID id) throws ApiException {
        ApiResponse<Espace> localVarResponse = lireEspaceWithHttpInfo(codeStructure, id);
        return localVarResponse.getData();
    }

    /**
     * Lire un espace Lecture d&#39;un espace
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @return ApiResponse&lt;Espace&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Espace> lireEspaceWithHttpInfo(String codeStructure, UUID id)
            throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = lireEspaceRequestBuilder(codeStructure, id);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("lireEspace", localVarResponse);
                }
                return new ApiResponse<Espace>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<Espace>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder lireEspaceRequestBuilder(String codeStructure, UUID id)
            throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'codeStructure' when calling lireEspace");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'id' when calling lireEspace");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/espace/{id}"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json, json/application");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Modifier un espace Modification d&#39;un espace
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param espace Commande pour modifier un espace (required)
     * @return Espace
     * @throws ApiException if fails to make API call
     */
    public Espace modifierEspace(String codeStructure, UUID id, Espace espace) throws ApiException {
        ApiResponse<Espace> localVarResponse =
                modifierEspaceWithHttpInfo(codeStructure, id, espace);
        return localVarResponse.getData();
    }

    /**
     * Modifier un espace Modification d&#39;un espace
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param espace Commande pour modifier un espace (required)
     * @return ApiResponse&lt;Espace&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Espace> modifierEspaceWithHttpInfo(
            String codeStructure, UUID id, Espace espace) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                modifierEspaceRequestBuilder(codeStructure, id, espace);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("modifierEspace", localVarResponse);
                }
                return new ApiResponse<Espace>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<Espace>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder modifierEspaceRequestBuilder(
            String codeStructure, UUID id, Espace espace) throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling modifierEspace");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'id' when calling modifierEspace");
        }
        // verify the required parameter 'espace' is set
        if (espace == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'espace' when calling modifierEspace");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/espace/{id}"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json");
        localVarRequestBuilder.header("Accept", "application/json, json/application");

        try {
            byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(espace);
            localVarRequestBuilder.method(
                    "PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Purger toutes les données liées à un espace Cette opération permet de supprimer tous les
     * objets maquettes et contextes associés à un espace spécifié.
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @throws ApiException if fails to make API call
     */
    public void purgerEspace(String codeStructure, UUID id) throws ApiException {
        purgerEspaceWithHttpInfo(codeStructure, id);
    }

    /**
     * Purger toutes les données liées à un espace Cette opération permet de supprimer tous les
     * objets maquettes et contextes associés à un espace spécifié.
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> purgerEspaceWithHttpInfo(String codeStructure, UUID id)
            throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = purgerEspaceRequestBuilder(codeStructure, id);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("purgerEspace", localVarResponse);
                }
                return new ApiResponse<Void>(
                        localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder purgerEspaceRequestBuilder(String codeStructure, UUID id)
            throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling purgerEspace");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'id' when calling purgerEspace");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/espace/{id}/purge"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json, json/application");

        localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Lire les espaces Lecture des espaces
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param pageable (optional)
     * @param r Critères de recherche (contient). Ce critère sera utilisé pour retourner des espace
     *     dont le code ou le libellé contiennent cette valeur. (optional)
     * @param type (optional)
     * @param actif (optional)
     * @return PagedEspaces
     * @throws ApiException if fails to make API call
     */
    public PagedEspaces rechercherEspaces(
            String codeStructure, Pageable pageable, String r, TypeEspace type, Boolean actif)
            throws ApiException {
        ApiResponse<PagedEspaces> localVarResponse =
                rechercherEspacesWithHttpInfo(codeStructure, pageable, r, type, actif);
        return localVarResponse.getData();
    }

    /**
     * Lire les espaces Lecture des espaces
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param pageable (optional)
     * @param r Critères de recherche (contient). Ce critère sera utilisé pour retourner des espace
     *     dont le code ou le libellé contiennent cette valeur. (optional)
     * @param type (optional)
     * @param actif (optional)
     * @return ApiResponse&lt;PagedEspaces&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<PagedEspaces> rechercherEspacesWithHttpInfo(
            String codeStructure, Pageable pageable, String r, TypeEspace type, Boolean actif)
            throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                rechercherEspacesRequestBuilder(codeStructure, pageable, r, type, actif);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("rechercherEspaces", localVarResponse);
                }
                return new ApiResponse<PagedEspaces>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        localVarResponse.body() == null
                                ? null
                                : memberVarObjectMapper.readValue(
                                        localVarResponse.body(),
                                        new TypeReference<
                                                PagedEspaces>() {}) // closes the InputStream
                        );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder rechercherEspacesRequestBuilder(
            String codeStructure, Pageable pageable, String r, TypeEspace type, Boolean actif)
            throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling"
                            + " rechercherEspaces");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/espaces"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        localVarQueryParameterBaseName = "pageable";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("page", pageable.getPage()));
        localVarQueryParams.addAll(ApiClient.parameterToPairs("taille", pageable.getTaille()));
        localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "tri", pageable.getTri()));
        localVarQueryParameterBaseName = "r";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("r", r));
        localVarQueryParameterBaseName = "type";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
        localVarQueryParameterBaseName = "actif";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("actif", actif));

        if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
            StringJoiner queryJoiner = new StringJoiner("&");
            localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
            if (localVarQueryStringJoiner.length() != 0) {
                queryJoiner.add(localVarQueryStringJoiner.toString());
            }
            localVarRequestBuilder.uri(
                    URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
        } else {
            localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
        }

        localVarRequestBuilder.header("Accept", "application/json, json/application");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Suppression d&#39;un espace Suppression d&#39;un espace
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @throws ApiException if fails to make API call
     */
    public void supprimerEspace(String codeStructure, UUID id) throws ApiException {
        supprimerEspaceWithHttpInfo(codeStructure, id);
    }

    /**
     * Suppression d&#39;un espace Suppression d&#39;un espace
     *
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> supprimerEspaceWithHttpInfo(String codeStructure, UUID id)
            throws ApiException {
        HttpRequest.Builder localVarRequestBuilder =
                supprimerEspaceRequestBuilder(codeStructure, id);
        try {
            HttpResponse<InputStream> localVarResponse =
                    memberVarHttpClient.send(
                            localVarRequestBuilder.build(),
                            HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("supprimerEspace", localVarResponse);
                }
                return new ApiResponse<Void>(
                        localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder supprimerEspaceRequestBuilder(String codeStructure, UUID id)
            throws ApiException {
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException(
                    400,
                    "Missing the required parameter 'codeStructure' when calling supprimerEspace");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    400, "Missing the required parameter 'id' when calling supprimerEspace");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/etablissement/{codeStructure}/espace/{id}"
                        .replace("{codeStructure}", ApiClient.urlEncode(codeStructure.toString()))
                        .replace("{id}", ApiClient.urlEncode(id.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json, json/application");

        localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }
}
