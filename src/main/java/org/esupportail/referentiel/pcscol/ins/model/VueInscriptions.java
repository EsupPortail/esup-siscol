/*
 * INS Gestion V5
 * Il s'agit de l'API v5 de gestion - INS  __Apprenant :__ une personne qui a au moins une inscription validée dans Pegase.  __Inscription :__ se définit par une cible sur une période de mise en œuvre pour un apprenant. Une inscription peut prendre deux états : soit validée, soit annulée.  __Actualisation :__ permet de modifier les données liées à l’apprenant ou à l’inscription alors que la piste a déjà été payée ou validée.   __Gestion des erreurs :__   __200, 201 :__ opération effectuée   __400 :__ erreur de données sur les formats   __403 :__ accès refusé   __404 :__ contenu introuvable   __409 :__ donnée déjà existante   __500 :__ erreur serveur  # Changement majeur/cassant par rapport à V4  1. Suppression de `Inscription.noCandidat`.  1. Ajout de `VoeuBase.noCandidat` et `InscriptionComplete.noCandidat`.  1. Ajout de `VoeuBase.choisi`. 
 *
 * The version of the OpenAPI document: 24.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.esupportail.referentiel.pcscol.ins.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

import org.esupportail.referentiel.pcscol.invoker.ApiClient;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
/**
 * VueInscriptions
 */
@JsonPropertyOrder({
  VueInscriptions.JSON_PROPERTY_TAILLE,
  VueInscriptions.JSON_PROPERTY_RESULTATS,
  VueInscriptions.JSON_PROPERTY_TOTAL_ELEMENTS,
  VueInscriptions.JSON_PROPERTY_PAGE,
  VueInscriptions.JSON_PROPERTY_TOTAL_PAGES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-23T10:43:17.979817+02:00[Europe/Paris]", comments = "Generator version: 7.7.0")
public class VueInscriptions {
  public static final String JSON_PROPERTY_TAILLE = "taille";
  private Long taille;

  public static final String JSON_PROPERTY_RESULTATS = "resultats";
  private List<VueInscription> resultats = new ArrayList<>();

  public static final String JSON_PROPERTY_TOTAL_ELEMENTS = "totalElements";
  private Long totalElements;

  public static final String JSON_PROPERTY_PAGE = "page";
  private Long page;

  public static final String JSON_PROPERTY_TOTAL_PAGES = "totalPages";
  private Long totalPages;

  public VueInscriptions() { 
  }

  public VueInscriptions taille(Long taille) {
    this.taille = taille;
    return this;
  }

  /**
   * Get taille
   * @return taille
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TAILLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getTaille() {
    return taille;
  }


  @JsonProperty(JSON_PROPERTY_TAILLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTaille(Long taille) {
    this.taille = taille;
  }


  public VueInscriptions resultats(List<VueInscription> resultats) {
    this.resultats = resultats;
    return this;
  }

  public VueInscriptions addResultatsItem(VueInscription resultatsItem) {
    if (this.resultats == null) {
      this.resultats = new ArrayList<>();
    }
    this.resultats.add(resultatsItem);
    return this;
  }

  /**
   * Get resultats
   * @return resultats
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESULTATS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<VueInscription> getResultats() {
    return resultats;
  }


  @JsonProperty(JSON_PROPERTY_RESULTATS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResultats(List<VueInscription> resultats) {
    this.resultats = resultats;
  }


  public VueInscriptions totalElements(Long totalElements) {
    this.totalElements = totalElements;
    return this;
  }

  /**
   * Get totalElements
   * @return totalElements
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_ELEMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getTotalElements() {
    return totalElements;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_ELEMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalElements(Long totalElements) {
    this.totalElements = totalElements;
  }


  public VueInscriptions page(Long page) {
    this.page = page;
    return this;
  }

  /**
   * Get page
   * @return page
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getPage() {
    return page;
  }


  @JsonProperty(JSON_PROPERTY_PAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPage(Long page) {
    this.page = page;
  }


  public VueInscriptions totalPages(Long totalPages) {
    this.totalPages = totalPages;
    return this;
  }

  /**
   * Get totalPages
   * @return totalPages
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_PAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getTotalPages() {
    return totalPages;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_PAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalPages(Long totalPages) {
    this.totalPages = totalPages;
  }


  /**
   * Return true if this VueInscriptions object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VueInscriptions vueInscriptions = (VueInscriptions) o;
    return Objects.equals(this.taille, vueInscriptions.taille) &&
        Objects.equals(this.resultats, vueInscriptions.resultats) &&
        Objects.equals(this.totalElements, vueInscriptions.totalElements) &&
        Objects.equals(this.page, vueInscriptions.page) &&
        Objects.equals(this.totalPages, vueInscriptions.totalPages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(taille, resultats, totalElements, page, totalPages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VueInscriptions {\n");
    sb.append("    taille: ").append(toIndentedString(taille)).append("\n");
    sb.append("    resultats: ").append(toIndentedString(resultats)).append("\n");
    sb.append("    totalElements: ").append(toIndentedString(totalElements)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    totalPages: ").append(toIndentedString(totalPages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `taille` to the URL query string
    if (getTaille() != null) {
      joiner.add(String.format("%staille%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTaille()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `resultats` to the URL query string
    if (getResultats() != null) {
      for (int i = 0; i < getResultats().size(); i++) {
        if (getResultats().get(i) != null) {
          joiner.add(getResultats().get(i).toUrlQueryString(String.format("%sresultats%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `totalElements` to the URL query string
    if (getTotalElements() != null) {
      joiner.add(String.format("%stotalElements%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTotalElements()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `page` to the URL query string
    if (getPage() != null) {
      joiner.add(String.format("%spage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `totalPages` to the URL query string
    if (getTotalPages() != null) {
      joiner.add(String.format("%stotalPages%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTotalPages()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

