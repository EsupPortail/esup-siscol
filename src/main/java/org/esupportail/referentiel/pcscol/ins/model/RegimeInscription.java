/*
 * INS Gestion V5
 * Il s'agit de l'API v5 de gestion - INS  __Apprenant :__ une personne qui a au moins une inscription validée dans Pegase.  __Inscription :__ se définit par une cible sur une période de mise en œuvre pour un apprenant. Une inscription peut prendre deux états : soit validée, soit annulée.  __Actualisation :__ permet de modifier les données liées à l’apprenant ou à l’inscription alors que la piste a déjà été payée ou validée.   __Gestion des erreurs :__   __200, 201 :__ opération effectuée   __400 :__ erreur de données sur les formats   __403 :__ accès refusé   __404 :__ contenu introuvable   __409 :__ donnée déjà existante   __500 :__ erreur serveur  # Changement majeur/cassant par rapport à V4  1. Suppression de `Inscription.noCandidat`.  1. Ajout de `VoeuBase.noCandidat` et `InscriptionComplete.noCandidat`.  1. Ajout de `VoeuBase.choisi`. 
 *
 * The version of the OpenAPI document: 24.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.esupportail.referentiel.pcscol.ins.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;

import org.esupportail.referentiel.pcscol.invoker.ApiClient;
import org.esupportail.referentiel.pcscol.invoker.JSON;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
/**
 * RegimeInscription
 */
@JsonPropertyOrder({
  RegimeInscription.JSON_PROPERTY_TEMOIN_C_V_E_C,
  RegimeInscription.JSON_PROPERTY_FINANCEMENT_POSSIBLE,
  RegimeInscription.JSON_PROPERTY_DROIT_A_BOURSE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-23T10:43:17.979817+02:00[Europe/Paris]", comments = "Generator version: 7.7.0")
@JsonIgnoreProperties(
  value = "typeNomenclature", // ignore manually set typeNomenclature, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the typeNomenclature to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "typeNomenclature", visible = true)

public class RegimeInscription extends Nomenclature {
  public static final String JSON_PROPERTY_TEMOIN_C_V_E_C = "temoinCVEC";
  private Boolean temoinCVEC;

  public static final String JSON_PROPERTY_FINANCEMENT_POSSIBLE = "financementPossible";
  private Boolean financementPossible;

  public static final String JSON_PROPERTY_DROIT_A_BOURSE = "droitABourse";
  private Boolean droitABourse;

  public RegimeInscription() { 
  }

  public RegimeInscription temoinCVEC(Boolean temoinCVEC) {
    this.temoinCVEC = temoinCVEC;
    return this;
  }

  /**
   * Régime d&#39;inscription nécessitant le paiement de la CVEC
   * @return temoinCVEC
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEMOIN_C_V_E_C)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getTemoinCVEC() {
    return temoinCVEC;
  }


  @JsonProperty(JSON_PROPERTY_TEMOIN_C_V_E_C)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTemoinCVEC(Boolean temoinCVEC) {
    this.temoinCVEC = temoinCVEC;
  }


  public RegimeInscription financementPossible(Boolean financementPossible) {
    this.financementPossible = financementPossible;
    return this;
  }

  /**
   * Régime d&#39;inscription permettant un financement
   * @return financementPossible
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FINANCEMENT_POSSIBLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getFinancementPossible() {
    return financementPossible;
  }


  @JsonProperty(JSON_PROPERTY_FINANCEMENT_POSSIBLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFinancementPossible(Boolean financementPossible) {
    this.financementPossible = financementPossible;
  }


  public RegimeInscription droitABourse(Boolean droitABourse) {
    this.droitABourse = droitABourse;
    return this;
  }

  /**
   * Régime d&#39;inscription donnant droit à une bourse
   * @return droitABourse
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DROIT_A_BOURSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getDroitABourse() {
    return droitABourse;
  }


  @JsonProperty(JSON_PROPERTY_DROIT_A_BOURSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDroitABourse(Boolean droitABourse) {
    this.droitABourse = droitABourse;
  }


  @Override
  public RegimeInscription typeNomenclature(String typeNomenclature) {
    this.setTypeNomenclature(typeNomenclature);
    return this;
  }

  @Override
  public RegimeInscription code(String code) {
    this.setCode(code);
    return this;
  }

  @Override
  public RegimeInscription libelle(String libelle) {
    this.setLibelle(libelle);
    return this;
  }

  @Override
  public RegimeInscription prioriteAffichage(Integer prioriteAffichage) {
    this.setPrioriteAffichage(prioriteAffichage);
    return this;
  }

  /**
   * Return true if this RegimeInscription object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegimeInscription regimeInscription = (RegimeInscription) o;
    return Objects.equals(this.temoinCVEC, regimeInscription.temoinCVEC) &&
        Objects.equals(this.financementPossible, regimeInscription.financementPossible) &&
        Objects.equals(this.droitABourse, regimeInscription.droitABourse) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(temoinCVEC, financementPossible, droitABourse, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegimeInscription {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    temoinCVEC: ").append(toIndentedString(temoinCVEC)).append("\n");
    sb.append("    financementPossible: ").append(toIndentedString(financementPossible)).append("\n");
    sb.append("    droitABourse: ").append(toIndentedString(droitABourse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `typeNomenclature` to the URL query string
    if (getTypeNomenclature() != null) {
      joiner.add(String.format("%stypeNomenclature%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTypeNomenclature()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `code` to the URL query string
    if (getCode() != null) {
      joiner.add(String.format("%scode%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCode()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `libelle` to the URL query string
    if (getLibelle() != null) {
      joiner.add(String.format("%slibelle%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLibelle()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `prioriteAffichage` to the URL query string
    if (getPrioriteAffichage() != null) {
      joiner.add(String.format("%sprioriteAffichage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPrioriteAffichage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `temoinCVEC` to the URL query string
    if (getTemoinCVEC() != null) {
      joiner.add(String.format("%stemoinCVEC%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTemoinCVEC()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `financementPossible` to the URL query string
    if (getFinancementPossible() != null) {
      joiner.add(String.format("%sfinancementPossible%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getFinancementPossible()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `droitABourse` to the URL query string
    if (getDroitABourse() != null) {
      joiner.add(String.format("%sdroitABourse%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDroitABourse()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("RegimeInscription", RegimeInscription.class);
  JSON.registerDiscriminator(RegimeInscription.class, "typeNomenclature", mappings);
}
}

