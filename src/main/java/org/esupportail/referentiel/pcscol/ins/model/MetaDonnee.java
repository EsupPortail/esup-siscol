/*
 * INS Gestion V5
 * Il s'agit de l'API v5 de gestion - INS  __Apprenant :__ une personne qui a au moins une inscription validée dans Pegase.  __Inscription :__ se définit par une cible sur une période de mise en œuvre pour un apprenant. Une inscription peut prendre deux états : soit validée, soit annulée.  __Actualisation :__ permet de modifier les données liées à l’apprenant ou à l’inscription alors que la piste a déjà été payée ou validée.   __Gestion des erreurs :__   __200, 201 :__ opération effectuée   __400 :__ erreur de données sur les formats   __403 :__ accès refusé   __404 :__ contenu introuvable   __409 :__ donnée déjà existante   __500 :__ erreur serveur  # Changement majeur/cassant par rapport à V4  1. Suppression de `Inscription.noCandidat`.  1. Ajout de `VoeuBase.noCandidat` et `InscriptionComplete.noCandidat`.  1. Ajout de `VoeuBase.choisi`. 
 *
 * The version of the OpenAPI document: 24.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.esupportail.referentiel.pcscol.ins.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;

import org.esupportail.referentiel.pcscol.invoker.ApiClient;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
/**
 * MetaDonnee
 */
@JsonPropertyOrder({
  MetaDonnee.JSON_PROPERTY_CONTEXTE_INSCRIPTION,
  MetaDonnee.JSON_PROPERTY_TEMOIN_NEO_BACHELIER,
  MetaDonnee.JSON_PROPERTY_CODE_STRUCTURE,
  MetaDonnee.JSON_PROPERTY_CODE_APPRENANT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-23T10:43:17.979817+02:00[Europe/Paris]", comments = "Generator version: 7.7.0")
public class MetaDonnee {
  public static final String JSON_PROPERTY_CONTEXTE_INSCRIPTION = "contexteInscription";
  private ContexteInscription contexteInscription;

  public static final String JSON_PROPERTY_TEMOIN_NEO_BACHELIER = "temoinNeoBachelier";
  private Boolean temoinNeoBachelier;

  public static final String JSON_PROPERTY_CODE_STRUCTURE = "codeStructure";
  private String codeStructure;

  public static final String JSON_PROPERTY_CODE_APPRENANT = "codeApprenant";
  private String codeApprenant;

  public MetaDonnee() { 
  }

  public MetaDonnee contexteInscription(ContexteInscription contexteInscription) {
    this.contexteInscription = contexteInscription;
    return this;
  }

  /**
   * Get contexteInscription
   * @return contexteInscription
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTEXTE_INSCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ContexteInscription getContexteInscription() {
    return contexteInscription;
  }


  @JsonProperty(JSON_PROPERTY_CONTEXTE_INSCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContexteInscription(ContexteInscription contexteInscription) {
    this.contexteInscription = contexteInscription;
  }


  public MetaDonnee temoinNeoBachelier(Boolean temoinNeoBachelier) {
    this.temoinNeoBachelier = temoinNeoBachelier;
    return this;
  }

  /**
   * Get temoinNeoBachelier
   * @return temoinNeoBachelier
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEMOIN_NEO_BACHELIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getTemoinNeoBachelier() {
    return temoinNeoBachelier;
  }


  @JsonProperty(JSON_PROPERTY_TEMOIN_NEO_BACHELIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTemoinNeoBachelier(Boolean temoinNeoBachelier) {
    this.temoinNeoBachelier = temoinNeoBachelier;
  }


  public MetaDonnee codeStructure(String codeStructure) {
    this.codeStructure = codeStructure;
    return this;
  }

  /**
   * Le code UAI
   * @return codeStructure
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CODE_STRUCTURE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getCodeStructure() {
    return codeStructure;
  }


  @JsonProperty(JSON_PROPERTY_CODE_STRUCTURE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCodeStructure(String codeStructure) {
    this.codeStructure = codeStructure;
  }


  public MetaDonnee codeApprenant(String codeApprenant) {
    this.codeApprenant = codeApprenant;
    return this;
  }

  /**
   * Le code apprenant
   * @return codeApprenant
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CODE_APPRENANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCodeApprenant() {
    return codeApprenant;
  }


  @JsonProperty(JSON_PROPERTY_CODE_APPRENANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCodeApprenant(String codeApprenant) {
    this.codeApprenant = codeApprenant;
  }


  /**
   * Return true if this MetaDonnee object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetaDonnee metaDonnee = (MetaDonnee) o;
    return Objects.equals(this.contexteInscription, metaDonnee.contexteInscription) &&
        Objects.equals(this.temoinNeoBachelier, metaDonnee.temoinNeoBachelier) &&
        Objects.equals(this.codeStructure, metaDonnee.codeStructure) &&
        Objects.equals(this.codeApprenant, metaDonnee.codeApprenant);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contexteInscription, temoinNeoBachelier, codeStructure, codeApprenant);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetaDonnee {\n");
    sb.append("    contexteInscription: ").append(toIndentedString(contexteInscription)).append("\n");
    sb.append("    temoinNeoBachelier: ").append(toIndentedString(temoinNeoBachelier)).append("\n");
    sb.append("    codeStructure: ").append(toIndentedString(codeStructure)).append("\n");
    sb.append("    codeApprenant: ").append(toIndentedString(codeApprenant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `contexteInscription` to the URL query string
    if (getContexteInscription() != null) {
      joiner.add(String.format("%scontexteInscription%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getContexteInscription()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `temoinNeoBachelier` to the URL query string
    if (getTemoinNeoBachelier() != null) {
      joiner.add(String.format("%stemoinNeoBachelier%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTemoinNeoBachelier()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `codeStructure` to the URL query string
    if (getCodeStructure() != null) {
      joiner.add(String.format("%scodeStructure%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCodeStructure()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `codeApprenant` to the URL query string
    if (getCodeApprenant() != null) {
      joiner.add(String.format("%scodeApprenant%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCodeApprenant()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

