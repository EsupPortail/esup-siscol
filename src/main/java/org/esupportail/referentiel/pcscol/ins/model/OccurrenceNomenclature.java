/*
 * INS Gestion V5
 * Il s'agit de l'API v5 de gestion - INS  __Apprenant :__ une personne qui a au moins une inscription validée dans Pegase.  __Inscription :__ se définit par une cible sur une période de mise en œuvre pour un apprenant. Une inscription peut prendre deux états : soit validée, soit annulée.  __Actualisation :__ permet de modifier les données liées à l’apprenant ou à l’inscription alors que la piste a déjà été payée ou validée.   __Gestion des erreurs :__   __200, 201 :__ opération effectuée   __400 :__ erreur de données sur les formats   __403 :__ accès refusé   __404 :__ contenu introuvable   __409 :__ donnée déjà existante   __500 :__ erreur serveur  # Changement majeur/cassant par rapport à V4  1. Suppression de `Inscription.noCandidat`.  1. Ajout de `VoeuBase.noCandidat` et `InscriptionComplete.noCandidat`.  1. Ajout de `VoeuBase.choisi`. 
 *
 * The version of the OpenAPI document: 27.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.esupportail.referentiel.pcscol.ins.model;

import java.util.Objects;
import java.util.StringJoiner;

import org.esupportail.referentiel.pcscol.invoker.ApiClient;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
/**
 * une occurrence de nomenclature
 */
@JsonPropertyOrder({
  OccurrenceNomenclature.JSON_PROPERTY_NOMENCLATURE,
  OccurrenceNomenclature.JSON_PROPERTY_CODE,
  OccurrenceNomenclature.JSON_PROPERTY_LIBELLE,
  OccurrenceNomenclature.JSON_PROPERTY_CONTEXTE_CONSOMMATION
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-24T10:28:25.069148496+01:00[Europe/Paris]", comments = "Generator version: 7.12.0")
public class OccurrenceNomenclature {
  public static final String JSON_PROPERTY_NOMENCLATURE = "nomenclature";
  @jakarta.annotation.Nonnull
  private OccurrenceNomenclatureType nomenclature;

  public static final String JSON_PROPERTY_CODE = "code";
  @jakarta.annotation.Nonnull
  private String code;

  public static final String JSON_PROPERTY_LIBELLE = "libelle";
  @jakarta.annotation.Nonnull
  private String libelle;

  public static final String JSON_PROPERTY_CONTEXTE_CONSOMMATION = "contexteConsommation";
  @jakarta.annotation.Nonnull
  private String contexteConsommation;

  public OccurrenceNomenclature() { 
  }

  public OccurrenceNomenclature nomenclature(@jakarta.annotation.Nonnull OccurrenceNomenclatureType nomenclature) {
    this.nomenclature = nomenclature;
    return this;
  }

  /**
   * Get nomenclature
   * @return nomenclature
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NOMENCLATURE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public OccurrenceNomenclatureType getNomenclature() {
    return nomenclature;
  }


  @JsonProperty(JSON_PROPERTY_NOMENCLATURE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNomenclature(@jakarta.annotation.Nonnull OccurrenceNomenclatureType nomenclature) {
    this.nomenclature = nomenclature;
  }


  public OccurrenceNomenclature code(@jakarta.annotation.Nonnull String code) {
    this.code = code;
    return this;
  }

  /**
   * le code de l&#39;occurrence de nomenclature
   * @return code
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCode(@jakarta.annotation.Nonnull String code) {
    this.code = code;
  }


  public OccurrenceNomenclature libelle(@jakarta.annotation.Nonnull String libelle) {
    this.libelle = libelle;
    return this;
  }

  /**
   * le libellé d&#39;affichage de l&#39;occurrence de nomenclature
   * @return libelle
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LIBELLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getLibelle() {
    return libelle;
  }


  @JsonProperty(JSON_PROPERTY_LIBELLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLibelle(@jakarta.annotation.Nonnull String libelle) {
    this.libelle = libelle;
  }


  public OccurrenceNomenclature contexteConsommation(@jakarta.annotation.Nonnull String contexteConsommation) {
    this.contexteConsommation = contexteConsommation;
    return this;
  }

  /**
   * La date de consommation de l&#39;occurrence de nomenclature au format AAAA-MM-JJ
   * @return contexteConsommation
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONTEXTE_CONSOMMATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getContexteConsommation() {
    return contexteConsommation;
  }


  @JsonProperty(JSON_PROPERTY_CONTEXTE_CONSOMMATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContexteConsommation(@jakarta.annotation.Nonnull String contexteConsommation) {
    this.contexteConsommation = contexteConsommation;
  }


  /**
   * Return true if this OccurrenceNomenclature object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OccurrenceNomenclature occurrenceNomenclature = (OccurrenceNomenclature) o;
    return Objects.equals(this.nomenclature, occurrenceNomenclature.nomenclature) &&
        Objects.equals(this.code, occurrenceNomenclature.code) &&
        Objects.equals(this.libelle, occurrenceNomenclature.libelle) &&
        Objects.equals(this.contexteConsommation, occurrenceNomenclature.contexteConsommation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nomenclature, code, libelle, contexteConsommation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OccurrenceNomenclature {\n");
    sb.append("    nomenclature: ").append(toIndentedString(nomenclature)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    libelle: ").append(toIndentedString(libelle)).append("\n");
    sb.append("    contexteConsommation: ").append(toIndentedString(contexteConsommation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `nomenclature` to the URL query string
    if (getNomenclature() != null) {
      joiner.add(String.format("%snomenclature%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getNomenclature()))));
    }

    // add `code` to the URL query string
    if (getCode() != null) {
      joiner.add(String.format("%scode%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCode()))));
    }

    // add `libelle` to the URL query string
    if (getLibelle() != null) {
      joiner.add(String.format("%slibelle%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getLibelle()))));
    }

    // add `contexteConsommation` to the URL query string
    if (getContexteConsommation() != null) {
      joiner.add(String.format("%scontexteConsommation%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getContexteConsommation()))));
    }

    return joiner.toString();
  }
}

