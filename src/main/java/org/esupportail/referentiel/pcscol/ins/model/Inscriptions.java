/*
 * INS Gestion V5
 * Il s'agit de l'API v5 de gestion - INS  __Apprenant :__ une personne qui a au moins une inscription validée dans Pegase.  __Inscription :__ se définit par une cible sur une période de mise en œuvre pour un apprenant. Une inscription peut prendre deux états : soit validée, soit annulée.  __Actualisation :__ permet de modifier les données liées à l’apprenant ou à l’inscription alors que la piste a déjà été payée ou validée.   __Gestion des erreurs :__   __200, 201 :__ opération effectuée   __400 :__ erreur de données sur les formats   __403 :__ accès refusé   __404 :__ contenu introuvable   __409 :__ donnée déjà existante   __500 :__ erreur serveur  # Changement majeur/cassant par rapport à V4  1. Suppression de `Inscription.noCandidat`.  1. Ajout de `VoeuBase.noCandidat` et `InscriptionComplete.noCandidat`.  1. Ajout de `VoeuBase.choisi`. 
 *
 * The version of the OpenAPI document: 24.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.esupportail.referentiel.pcscol.ins.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;

import org.esupportail.referentiel.pcscol.invoker.ApiClient;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
/**
 * Inscriptions
 */
@JsonPropertyOrder({
  Inscriptions.JSON_PROPERTY_NOMBRE,
  Inscriptions.JSON_PROPERTY_RESULTATS,
  Inscriptions.JSON_PROPERTY_STATUT_INSCRIPTION,
  Inscriptions.JSON_PROPERTY_STATUT_PIECES,
  Inscriptions.JSON_PROPERTY_STATUT_PAIEMENT,
  Inscriptions.JSON_PROPERTY_TOTAL_ELEMENTS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-23T10:43:17.979817+02:00[Europe/Paris]", comments = "Generator version: 7.7.0")
public class Inscriptions {
  public static final String JSON_PROPERTY_NOMBRE = "nombre";
  private Long nombre;

  public static final String JSON_PROPERTY_RESULTATS = "resultats";
  private List<Inscription> resultats = new ArrayList<>();

  public static final String JSON_PROPERTY_STATUT_INSCRIPTION = "statutInscription";
  private Map<String, Long> statutInscription = new HashMap<>();

  public static final String JSON_PROPERTY_STATUT_PIECES = "statutPieces";
  private Map<String, Long> statutPieces = new HashMap<>();

  public static final String JSON_PROPERTY_STATUT_PAIEMENT = "statutPaiement";
  private Map<String, Long> statutPaiement = new HashMap<>();

  public static final String JSON_PROPERTY_TOTAL_ELEMENTS = "totalElements";
  private Long totalElements;

  public Inscriptions() { 
  }

  public Inscriptions nombre(Long nombre) {
    this.nombre = nombre;
    return this;
  }

  /**
   * Get nombre
   * @return nombre
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NOMBRE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getNombre() {
    return nombre;
  }


  @JsonProperty(JSON_PROPERTY_NOMBRE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNombre(Long nombre) {
    this.nombre = nombre;
  }


  public Inscriptions resultats(List<Inscription> resultats) {
    this.resultats = resultats;
    return this;
  }

  public Inscriptions addResultatsItem(Inscription resultatsItem) {
    if (this.resultats == null) {
      this.resultats = new ArrayList<>();
    }
    this.resultats.add(resultatsItem);
    return this;
  }

  /**
   * Get resultats
   * @return resultats
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESULTATS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<Inscription> getResultats() {
    return resultats;
  }


  @JsonProperty(JSON_PROPERTY_RESULTATS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResultats(List<Inscription> resultats) {
    this.resultats = resultats;
  }


  public Inscriptions statutInscription(Map<String, Long> statutInscription) {
    this.statutInscription = statutInscription;
    return this;
  }

  public Inscriptions putStatutInscriptionItem(String key, Long statutInscriptionItem) {
    if (this.statutInscription == null) {
      this.statutInscription = new HashMap<>();
    }
    this.statutInscription.put(key, statutInscriptionItem);
    return this;
  }

  /**
   * Get statutInscription
   * @return statutInscription
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUT_INSCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Map<String, Long> getStatutInscription() {
    return statutInscription;
  }


  @JsonProperty(JSON_PROPERTY_STATUT_INSCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatutInscription(Map<String, Long> statutInscription) {
    this.statutInscription = statutInscription;
  }


  public Inscriptions statutPieces(Map<String, Long> statutPieces) {
    this.statutPieces = statutPieces;
    return this;
  }

  public Inscriptions putStatutPiecesItem(String key, Long statutPiecesItem) {
    if (this.statutPieces == null) {
      this.statutPieces = new HashMap<>();
    }
    this.statutPieces.put(key, statutPiecesItem);
    return this;
  }

  /**
   * Get statutPieces
   * @return statutPieces
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUT_PIECES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Map<String, Long> getStatutPieces() {
    return statutPieces;
  }


  @JsonProperty(JSON_PROPERTY_STATUT_PIECES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatutPieces(Map<String, Long> statutPieces) {
    this.statutPieces = statutPieces;
  }


  public Inscriptions statutPaiement(Map<String, Long> statutPaiement) {
    this.statutPaiement = statutPaiement;
    return this;
  }

  public Inscriptions putStatutPaiementItem(String key, Long statutPaiementItem) {
    if (this.statutPaiement == null) {
      this.statutPaiement = new HashMap<>();
    }
    this.statutPaiement.put(key, statutPaiementItem);
    return this;
  }

  /**
   * Get statutPaiement
   * @return statutPaiement
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUT_PAIEMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Map<String, Long> getStatutPaiement() {
    return statutPaiement;
  }


  @JsonProperty(JSON_PROPERTY_STATUT_PAIEMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatutPaiement(Map<String, Long> statutPaiement) {
    this.statutPaiement = statutPaiement;
  }


  public Inscriptions totalElements(Long totalElements) {
    this.totalElements = totalElements;
    return this;
  }

  /**
   * Get totalElements
   * @return totalElements
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_ELEMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getTotalElements() {
    return totalElements;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_ELEMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalElements(Long totalElements) {
    this.totalElements = totalElements;
  }


  /**
   * Return true if this Inscriptions object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Inscriptions inscriptions = (Inscriptions) o;
    return Objects.equals(this.nombre, inscriptions.nombre) &&
        Objects.equals(this.resultats, inscriptions.resultats) &&
        Objects.equals(this.statutInscription, inscriptions.statutInscription) &&
        Objects.equals(this.statutPieces, inscriptions.statutPieces) &&
        Objects.equals(this.statutPaiement, inscriptions.statutPaiement) &&
        Objects.equals(this.totalElements, inscriptions.totalElements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nombre, resultats, statutInscription, statutPieces, statutPaiement, totalElements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Inscriptions {\n");
    sb.append("    nombre: ").append(toIndentedString(nombre)).append("\n");
    sb.append("    resultats: ").append(toIndentedString(resultats)).append("\n");
    sb.append("    statutInscription: ").append(toIndentedString(statutInscription)).append("\n");
    sb.append("    statutPieces: ").append(toIndentedString(statutPieces)).append("\n");
    sb.append("    statutPaiement: ").append(toIndentedString(statutPaiement)).append("\n");
    sb.append("    totalElements: ").append(toIndentedString(totalElements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `nombre` to the URL query string
    if (getNombre() != null) {
      joiner.add(String.format("%snombre%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getNombre()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `resultats` to the URL query string
    if (getResultats() != null) {
      for (int i = 0; i < getResultats().size(); i++) {
        if (getResultats().get(i) != null) {
          joiner.add(getResultats().get(i).toUrlQueryString(String.format("%sresultats%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `statutInscription` to the URL query string
    if (getStatutInscription() != null) {
      for (String _key : getStatutInscription().keySet()) {
        joiner.add(String.format("%sstatutInscription%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getStatutInscription().get(_key), URLEncoder.encode(ApiClient.valueToString(getStatutInscription().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `statutPieces` to the URL query string
    if (getStatutPieces() != null) {
      for (String _key : getStatutPieces().keySet()) {
        joiner.add(String.format("%sstatutPieces%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getStatutPieces().get(_key), URLEncoder.encode(ApiClient.valueToString(getStatutPieces().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `statutPaiement` to the URL query string
    if (getStatutPaiement() != null) {
      for (String _key : getStatutPaiement().keySet()) {
        joiner.add(String.format("%sstatutPaiement%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getStatutPaiement().get(_key), URLEncoder.encode(ApiClient.valueToString(getStatutPaiement().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `totalElements` to the URL query string
    if (getTotalElements() != null) {
      joiner.add(String.format("%stotalElements%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTotalElements()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

