/*
 * INS Gestion V5
 * Il s'agit de l'API v5 de gestion - INS  __Apprenant :__ une personne qui a au moins une inscription validée dans Pegase.  __Inscription :__ se définit par une cible sur une période de mise en œuvre pour un apprenant. Une inscription peut prendre deux états : soit validée, soit annulée.  __Actualisation :__ permet de modifier les données liées à l’apprenant ou à l’inscription alors que la piste a déjà été payée ou validée.   __Gestion des erreurs :__   __200, 201 :__ opération effectuée   __400 :__ erreur de données sur les formats   __403 :__ accès refusé   __404 :__ contenu introuvable   __409 :__ donnée déjà existante   __500 :__ erreur serveur  # Changement majeur/cassant par rapport à V4  1. Suppression de `Inscription.noCandidat`.  1. Ajout de `VoeuBase.noCandidat` et `InscriptionComplete.noCandidat`.  1. Ajout de `VoeuBase.choisi`. 
 *
 * The version of the OpenAPI document: 27.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.esupportail.referentiel.pcscol.ins.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Gets or Sets TriInscription
 */
public enum TriInscription {
  
  UUID_ASC("uuidASC"),
  
  UUID_DESC("uuidDESC"),
  
  NO_CANDIDAT_ASC("noCandidatASC"),
  
  NO_CANDIDAT_DESC("noCandidatDESC"),
  
  ETAT_CIVIL_NOM_DE_NAISSANCE_ASC("etatCivil.nomDeNaissanceASC"),
  
  ETAT_CIVIL_NOM_DE_NAISSANCE_DESC("etatCivil.nomDeNaissanceDESC"),
  
  ETAT_CIVIL_PRENOM_ASC("etatCivil.prenomASC"),
  
  ETAT_CIVIL_PRENOM_DESC("etatCivil.prenomDESC"),
  
  NAISSANCE_DATE_DE_NAISSANCE_ASC("naissance.dateDeNaissanceASC"),
  
  NAISSANCE_DATE_DE_NAISSANCE_DESC("naissance.dateDeNaissanceDESC"),
  
  NAISSANCE_PAYS_DE_NAISSANCE_ASC("naissance.paysDeNaissanceASC"),
  
  NAISSANCE_PAYS_DE_NAISSANCE_DESC("naissance.paysDeNaissanceDESC"),
  
  NAISSANCE_COMMUNE_DE_NAISSANCE_ASC("naissance.communeDeNaissanceASC"),
  
  NAISSANCE_COMMUNE_DE_NAISSANCE_DESC("naissance.communeDeNaissanceDESC"),
  
  BAC_INE_ASC("bac.ineASC"),
  
  BAC_INE_DESC("bac.ineDESC"),
  
  VOEU_ASC("voeuASC"),
  
  VOEU_DESC("voeuDESC"),
  
  VOEU_STATUT_INSCRIPTION_ASC("voeu.statutInscriptionASC"),
  
  VOEU_STATUT_INSCRIPTION_DESC("voeu.statutInscriptionDESC"),
  
  VOEU_STATUT_PAIEMENT_ASC("voeu.statutPaiementASC"),
  
  VOEU_STATUT_PAIEMENT_DESC("voeu.statutPaiementDESC"),
  
  VOEU_STATUT_PIECES_ASC("voeu.statutPiecesASC"),
  
  VOEU_STATUT_PIECES_DESC("voeu.statutPiecesDESC");

  private String value;

  TriInscription(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static TriInscription fromValue(String value) {
    for (TriInscription b : TriInscription.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    if (prefix == null) {
      prefix = "";
    }

    return String.format("%s=%s", prefix, this.toString());
  }

}

