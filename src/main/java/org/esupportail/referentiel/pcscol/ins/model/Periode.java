/*
 * INS Gestion V5
 * Il s'agit de l'API v5 de gestion - INS  __Apprenant :__ une personne qui a au moins une inscription validée dans Pegase.  __Inscription :__ se définit par une cible sur une période de mise en œuvre pour un apprenant. Une inscription peut prendre deux états : soit validée, soit annulée.  __Actualisation :__ permet de modifier les données liées à l’apprenant ou à l’inscription alors que la piste a déjà été payée ou validée.   __Gestion des erreurs :__   __200, 201 :__ opération effectuée   __400 :__ erreur de données sur les formats   __403 :__ accès refusé   __404 :__ contenu introuvable   __409 :__ donnée déjà existante   __500 :__ erreur serveur  # Changement majeur/cassant par rapport à V4  1. Suppression de `Inscription.noCandidat`.  1. Ajout de `VoeuBase.noCandidat` et `InscriptionComplete.noCandidat`.  1. Ajout de `VoeuBase.choisi`. 
 *
 * The version of the OpenAPI document: 24.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.esupportail.referentiel.pcscol.ins.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;

import org.esupportail.referentiel.pcscol.invoker.ApiClient;
import org.esupportail.referentiel.pcscol.invoker.JSON;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
/**
 * La période de mise en œuvre associée à la formation
 */
@JsonPropertyOrder({
  Periode.JSON_PROPERTY_EST1,
  Periode.JSON_PROPERTY_DATE_DEBUT,
  Periode.JSON_PROPERTY_DATE_FIN,
  Periode.JSON_PROPERTY_ANNEE_UNIVERSITAIRE,
  Periode.JSON_PROPERTY_LIBELLE_AFFICHAGE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-23T10:43:17.979817+02:00[Europe/Paris]", comments = "Generator version: 7.7.0")
@JsonIgnoreProperties(
  value = "est1", // ignore manually set est1, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the est1 to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "est1", visible = true)

public class Periode extends ObjetAvecLibelle {
  public static final String JSON_PROPERTY_EST1 = "est1";
  private String est1;

  public static final String JSON_PROPERTY_DATE_DEBUT = "dateDebut";
  private String dateDebut;

  public static final String JSON_PROPERTY_DATE_FIN = "dateFin";
  private String dateFin;

  public static final String JSON_PROPERTY_ANNEE_UNIVERSITAIRE = "anneeUniversitaire";
  private Integer anneeUniversitaire;

  public static final String JSON_PROPERTY_LIBELLE_AFFICHAGE = "libelleAffichage";
  private String libelleAffichage;

  public Periode() { 
  }

  public Periode est1(String est1) {
    this.est1 = est1;
    return this;
  }

  /**
   * Get est1
   * @return est1
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EST1)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getEst1() {
    return est1;
  }


  @JsonProperty(JSON_PROPERTY_EST1)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEst1(String est1) {
    this.est1 = est1;
  }


  public Periode dateDebut(String dateDebut) {
    this.dateDebut = dateDebut;
    return this;
  }

  /**
   * date de début de validité au format AAAA-MM-JJ
   * @return dateDebut
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATE_DEBUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDateDebut() {
    return dateDebut;
  }


  @JsonProperty(JSON_PROPERTY_DATE_DEBUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDateDebut(String dateDebut) {
    this.dateDebut = dateDebut;
  }


  public Periode dateFin(String dateFin) {
    this.dateFin = dateFin;
    return this;
  }

  /**
   * date de fin de validité au format AAAA-MM-JJ
   * @return dateFin
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATE_FIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDateFin() {
    return dateFin;
  }


  @JsonProperty(JSON_PROPERTY_DATE_FIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDateFin(String dateFin) {
    this.dateFin = dateFin;
  }


  public Periode anneeUniversitaire(Integer anneeUniversitaire) {
    this.anneeUniversitaire = anneeUniversitaire;
    return this;
  }

  /**
   * L&#39;année universitaire de la période de mise en œuvre associée à la formation au format AAAA. 
   * @return anneeUniversitaire
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ANNEE_UNIVERSITAIRE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getAnneeUniversitaire() {
    return anneeUniversitaire;
  }


  @JsonProperty(JSON_PROPERTY_ANNEE_UNIVERSITAIRE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAnneeUniversitaire(Integer anneeUniversitaire) {
    this.anneeUniversitaire = anneeUniversitaire;
  }


  public Periode libelleAffichage(String libelleAffichage) {
    this.libelleAffichage = libelleAffichage;
    return this;
  }

  /**
   * Le libellé d&#39;affichage de la période de mise en œuvre associée à la formation. 
   * @return libelleAffichage
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIBELLE_AFFICHAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getLibelleAffichage() {
    return libelleAffichage;
  }


  @JsonProperty(JSON_PROPERTY_LIBELLE_AFFICHAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLibelleAffichage(String libelleAffichage) {
    this.libelleAffichage = libelleAffichage;
  }


  @Override
  public Periode code(String code) {
    this.setCode(code);
    return this;
  }

  @Override
  public Periode libelleCourt(String libelleCourt) {
    this.setLibelleCourt(libelleCourt);
    return this;
  }

  @Override
  public Periode libelleLong(String libelleLong) {
    this.setLibelleLong(libelleLong);
    return this;
  }

  /**
   * Return true if this Periode object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Periode periode = (Periode) o;
    return Objects.equals(this.est1, periode.est1) &&
        Objects.equals(this.dateDebut, periode.dateDebut) &&
        Objects.equals(this.dateFin, periode.dateFin) &&
        Objects.equals(this.anneeUniversitaire, periode.anneeUniversitaire) &&
        Objects.equals(this.libelleAffichage, periode.libelleAffichage) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(est1, dateDebut, dateFin, anneeUniversitaire, libelleAffichage, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Periode {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    est1: ").append(toIndentedString(est1)).append("\n");
    sb.append("    dateDebut: ").append(toIndentedString(dateDebut)).append("\n");
    sb.append("    dateFin: ").append(toIndentedString(dateFin)).append("\n");
    sb.append("    anneeUniversitaire: ").append(toIndentedString(anneeUniversitaire)).append("\n");
    sb.append("    libelleAffichage: ").append(toIndentedString(libelleAffichage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `est1` to the URL query string
    if (getEst1() != null) {
      joiner.add(String.format("%sest1%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getEst1()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `code` to the URL query string
    if (getCode() != null) {
      joiner.add(String.format("%scode%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCode()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `libelleCourt` to the URL query string
    if (getLibelleCourt() != null) {
      joiner.add(String.format("%slibelleCourt%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLibelleCourt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `libelleLong` to the URL query string
    if (getLibelleLong() != null) {
      joiner.add(String.format("%slibelleLong%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLibelleLong()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `dateDebut` to the URL query string
    if (getDateDebut() != null) {
      joiner.add(String.format("%sdateDebut%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDateDebut()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `dateFin` to the URL query string
    if (getDateFin() != null) {
      joiner.add(String.format("%sdateFin%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDateFin()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `anneeUniversitaire` to the URL query string
    if (getAnneeUniversitaire() != null) {
      joiner.add(String.format("%sanneeUniversitaire%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAnneeUniversitaire()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `libelleAffichage` to the URL query string
    if (getLibelleAffichage() != null) {
      joiner.add(String.format("%slibelleAffichage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLibelleAffichage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("Periode", Periode.class);
  JSON.registerDiscriminator(Periode.class, "est1", mappings);
}
}

