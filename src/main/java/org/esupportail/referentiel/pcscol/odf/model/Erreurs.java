/*
 * OffreDeFormation V1
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module OFFRE DE FORMATION  Description service ODF  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | | genre     | le genre de la personne est invalide       | | dateEntre | la date est invalide                       | | telephone | le téléphone est invalide                  | | email     | le mail est invalide                       |
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.esupportail.referentiel.pcscol.odf.model;


import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

import org.esupportail.referentiel.pcscol.invoker.ApiClient;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/** Erreurs */
@JsonPropertyOrder({
    Erreurs.JSON_PROPERTY_CORRELATION_ID,
    Erreurs.JSON_PROPERTY_TIMESTAMP,
    Erreurs.JSON_PROPERTY_VERSION,
    Erreurs.JSON_PROPERTY_PATH,
    Erreurs.JSON_PROPERTY_STATUS_CODE,
    Erreurs.JSON_PROPERTY_ERRORS
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2024-07-04T09:22:32.722688+02:00[Europe/Paris]",
        comments = "Generator version: 7.7.0")
public class Erreurs {
    public static final String JSON_PROPERTY_CORRELATION_ID = "correlationId";
    private String correlationId;

    public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
    private Date timestamp;

    public static final String JSON_PROPERTY_VERSION = "version";
    private String version;

    public static final String JSON_PROPERTY_PATH = "path";
    private String path;

    public static final String JSON_PROPERTY_STATUS_CODE = "statusCode";
    private String statusCode;

    public static final String JSON_PROPERTY_ERRORS = "errors";
    private List<Erreur> errors = new ArrayList<>();

    public Erreurs() {}

    public Erreurs correlationId(String correlationId) {
        this.correlationId = correlationId;
        return this;
    }

    /**
     * Permet d&#39;identifier de manière unique l&#39;erreur côté serveur. A titre de debugging.
     *
     * @return correlationId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CORRELATION_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getCorrelationId() {
        return correlationId;
    }

    @JsonProperty(JSON_PROPERTY_CORRELATION_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCorrelationId(String correlationId) {
        this.correlationId = correlationId;
    }

    public Erreurs timestamp(Date timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Timestamp auque à lieu l&#39;erreur. A titre de debugging.
     *
     * @return timestamp
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TIMESTAMP)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Date getTimestamp() {
        return timestamp;
    }

    @JsonProperty(JSON_PROPERTY_TIMESTAMP)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTimestamp(Date timestamp) {
        this.timestamp = timestamp;
    }

    public Erreurs version(String version) {
        this.version = version;
        return this;
    }

    /**
     * Version de l&#39;application. A titre de debugging.
     *
     * @return version
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_VERSION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getVersion() {
        return version;
    }

    @JsonProperty(JSON_PROPERTY_VERSION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setVersion(String version) {
        this.version = version;
    }

    public Erreurs path(String path) {
        this.path = path;
        return this;
    }

    /**
     * URI sur lequel le service a été applelé (i.e /api/monservice). A titre de debugging.
     *
     * @return path
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PATH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getPath() {
        return path;
    }

    @JsonProperty(JSON_PROPERTY_PATH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPath(String path) {
        this.path = path;
    }

    public Erreurs statusCode(String statusCode) {
        this.statusCode = statusCode;
        return this;
    }

    /**
     * Statuscode HTTP. A titre de debugging
     *
     * @return statusCode
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_STATUS_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getStatusCode() {
        return statusCode;
    }

    @JsonProperty(JSON_PROPERTY_STATUS_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStatusCode(String statusCode) {
        this.statusCode = statusCode;
    }

    public Erreurs errors(List<Erreur> errors) {
        this.errors = errors;
        return this;
    }

    public Erreurs addErrorsItem(Erreur errorsItem) {
        if (this.errors == null) {
            this.errors = new ArrayList<>();
        }
        this.errors.add(errorsItem);
        return this;
    }

    /**
     * Get errors
     *
     * @return errors
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ERRORS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<Erreur> getErrors() {
        return errors;
    }

    @JsonProperty(JSON_PROPERTY_ERRORS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setErrors(List<Erreur> errors) {
        this.errors = errors;
    }

    /** Return true if this Erreurs object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Erreurs erreurs = (Erreurs) o;
        return Objects.equals(this.correlationId, erreurs.correlationId)
                && Objects.equals(this.timestamp, erreurs.timestamp)
                && Objects.equals(this.version, erreurs.version)
                && Objects.equals(this.path, erreurs.path)
                && Objects.equals(this.statusCode, erreurs.statusCode)
                && Objects.equals(this.errors, erreurs.errors);
    }

    @Override
    public int hashCode() {
        return Objects.hash(correlationId, timestamp, version, path, statusCode, errors);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Erreurs {\n");
        sb.append("    correlationId: ").append(toIndentedString(correlationId)).append("\n");
        sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
        sb.append("    version: ").append(toIndentedString(version)).append("\n");
        sb.append("    path: ").append(toIndentedString(path)).append("\n");
        sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
        sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `correlationId` to the URL query string
        if (getCorrelationId() != null) {
            joiner.add(
                    String.format(
                            "%scorrelationId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getCorrelationId()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `timestamp` to the URL query string
        if (getTimestamp() != null) {
            joiner.add(
                    String.format(
                            "%stimestamp%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getTimestamp()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `version` to the URL query string
        if (getVersion() != null) {
            joiner.add(
                    String.format(
                            "%sversion%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getVersion()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `path` to the URL query string
        if (getPath() != null) {
            joiner.add(
                    String.format(
                            "%spath%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getPath()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `statusCode` to the URL query string
        if (getStatusCode() != null) {
            joiner.add(
                    String.format(
                            "%sstatusCode%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getStatusCode()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `errors` to the URL query string
        if (getErrors() != null) {
            for (int i = 0; i < getErrors().size(); i++) {
                if (getErrors().get(i) != null) {
                    joiner.add(
                            getErrors()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%serrors%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        return joiner.toString();
    }
}
