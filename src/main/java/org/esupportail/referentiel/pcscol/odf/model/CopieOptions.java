/*
 * OffreDeFormation V1
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module OFFRE DE FORMATION  Description service ODF  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | | genre     | le genre de la personne est invalide       | | dateEntre | la date est invalide                       | | telephone | le téléphone est invalide                  | | email     | le mail est invalide                       |
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.esupportail.referentiel.pcscol.odf.model;


import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.UUID;

import org.esupportail.referentiel.pcscol.invoker.ApiClient;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;

/** CopieOptions */
@JsonPropertyOrder({
    CopieOptions.JSON_PROPERTY_OBJET_MAQUETTE,
    CopieOptions.JSON_PROPERTY_STRATEGIE
})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2024-07-04T09:22:32.722688+02:00[Europe/Paris]",
        comments = "Generator version: 7.7.0")
public class CopieOptions {
    public static final String JSON_PROPERTY_OBJET_MAQUETTE = "objetMaquette";
    private UUID objetMaquette;

    /**
     * * LEFT: écrase et remplace les données de l&#39;objet copié dans l&#39;espace cible par
     * celles de l&#39;espace source * RIGHT: conserve les données de l&#39;objet copié qui existent
     * dans l&#39;espace cible * MERGE: Conserve les descripteurs non contextuels de l&#39;objet
     * dans l&#39;espace cible. Ecrase les données contextuelles de l&#39;espace cible par celles de
     * l&#39;objet dans l&#39;espace source. Si des données contextuelles de l&#39;objet de
     * l&#39;espace cible n&#39;existent pas dans l&#39;objet source alors on conserve ces données
     * de l&#39;objet cible.
     */
    public enum StrategieEnum {
        LEFT("LEFT"),

        RIGHT("RIGHT"),

        MERGE("MERGE");

        private String value;

        StrategieEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static StrategieEnum fromValue(String value) {
            for (StrategieEnum b : StrategieEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_STRATEGIE = "strategie";
    private StrategieEnum strategie;

    public CopieOptions() {}

    public CopieOptions objetMaquette(UUID objetMaquette) {
        this.objetMaquette = objetMaquette;
        return this;
    }

    /**
     * Identifiant de ressource
     *
     * @return objetMaquette
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_OBJET_MAQUETTE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getObjetMaquette() {
        return objetMaquette;
    }

    @JsonProperty(JSON_PROPERTY_OBJET_MAQUETTE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setObjetMaquette(UUID objetMaquette) {
        this.objetMaquette = objetMaquette;
    }

    public CopieOptions strategie(StrategieEnum strategie) {
        this.strategie = strategie;
        return this;
    }

    /**
     * * LEFT: écrase et remplace les données de l&#39;objet copié dans l&#39;espace cible par
     * celles de l&#39;espace source * RIGHT: conserve les données de l&#39;objet copié qui existent
     * dans l&#39;espace cible * MERGE: Conserve les descripteurs non contextuels de l&#39;objet
     * dans l&#39;espace cible. Ecrase les données contextuelles de l&#39;espace cible par celles de
     * l&#39;objet dans l&#39;espace source. Si des données contextuelles de l&#39;objet de
     * l&#39;espace cible n&#39;existent pas dans l&#39;objet source alors on conserve ces données
     * de l&#39;objet cible.
     *
     * @return strategie
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_STRATEGIE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public StrategieEnum getStrategie() {
        return strategie;
    }

    @JsonProperty(JSON_PROPERTY_STRATEGIE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStrategie(StrategieEnum strategie) {
        this.strategie = strategie;
    }

    /** Return true if this CopieOptions object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CopieOptions copieOptions = (CopieOptions) o;
        return Objects.equals(this.objetMaquette, copieOptions.objetMaquette)
                && Objects.equals(this.strategie, copieOptions.strategie);
    }

    @Override
    public int hashCode() {
        return Objects.hash(objetMaquette, strategie);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CopieOptions {\n");
        sb.append("    objetMaquette: ").append(toIndentedString(objetMaquette)).append("\n");
        sb.append("    strategie: ").append(toIndentedString(strategie)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `objetMaquette` to the URL query string
        if (getObjetMaquette() != null) {
            joiner.add(
                    String.format(
                            "%sobjetMaquette%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getObjetMaquette()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `strategie` to the URL query string
        if (getStrategie() != null) {
            joiner.add(
                    String.format(
                            "%sstrategie%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getStrategie()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
