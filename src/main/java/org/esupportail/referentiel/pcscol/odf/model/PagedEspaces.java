/*
 * OffreDeFormation V1
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module OFFRE DE FORMATION  Description service ODF  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | | genre     | le genre de la personne est invalide       | | dateEntre | la date est invalide                       | | telephone | le téléphone est invalide                  | | email     | le mail est invalide                       |
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.esupportail.referentiel.pcscol.odf.model;


import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

import org.esupportail.referentiel.pcscol.invoker.ApiClient;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/** PagedEspaces */
@JsonPropertyOrder({
    PagedEspaces.JSON_PROPERTY_ITEMS,
    PagedEspaces.JSON_PROPERTY_TOTAL_ELEMENTS,
    PagedEspaces.JSON_PROPERTY_TOTAL_PAGES,
    PagedEspaces.JSON_PROPERTY_TAILLE,
    PagedEspaces.JSON_PROPERTY_PAGE
})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2024-07-04T09:22:32.722688+02:00[Europe/Paris]",
        comments = "Generator version: 7.7.0")
public class PagedEspaces {
    public static final String JSON_PROPERTY_ITEMS = "items";
    private List<Espace> items = new ArrayList<>();

    public static final String JSON_PROPERTY_TOTAL_ELEMENTS = "totalElements";
    private Long totalElements;

    public static final String JSON_PROPERTY_TOTAL_PAGES = "totalPages";
    private Integer totalPages;

    public static final String JSON_PROPERTY_TAILLE = "taille";
    private Integer taille;

    public static final String JSON_PROPERTY_PAGE = "page";
    private Integer page;

    public PagedEspaces() {}

    public PagedEspaces items(List<Espace> items) {
        this.items = items;
        return this;
    }

    public PagedEspaces addItemsItem(Espace itemsItem) {
        if (this.items == null) {
            this.items = new ArrayList<>();
        }
        this.items.add(itemsItem);
        return this;
    }

    /**
     * Get items
     *
     * @return items
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ITEMS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<Espace> getItems() {
        return items;
    }

    @JsonProperty(JSON_PROPERTY_ITEMS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setItems(List<Espace> items) {
        this.items = items;
    }

    public PagedEspaces totalElements(Long totalElements) {
        this.totalElements = totalElements;
        return this;
    }

    /**
     * Nombre total de d&#39;enregistrements existants en base
     *
     * @return totalElements
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TOTAL_ELEMENTS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Long getTotalElements() {
        return totalElements;
    }

    @JsonProperty(JSON_PROPERTY_TOTAL_ELEMENTS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTotalElements(Long totalElements) {
        this.totalElements = totalElements;
    }

    public PagedEspaces totalPages(Integer totalPages) {
        this.totalPages = totalPages;
        return this;
    }

    /**
     * Nombre de pages totales existantes
     *
     * @return totalPages
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TOTAL_PAGES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getTotalPages() {
        return totalPages;
    }

    @JsonProperty(JSON_PROPERTY_TOTAL_PAGES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTotalPages(Integer totalPages) {
        this.totalPages = totalPages;
    }

    public PagedEspaces taille(Integer taille) {
        this.taille = taille;
        return this;
    }

    /**
     * Nombre d&#39;enregistrements demandés par page
     *
     * @return taille
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TAILLE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getTaille() {
        return taille;
    }

    @JsonProperty(JSON_PROPERTY_TAILLE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTaille(Integer taille) {
        this.taille = taille;
    }

    public PagedEspaces page(Integer page) {
        this.page = page;
        return this;
    }

    /**
     * Numéro de la page retournée (commence à 0)
     *
     * @return page
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PAGE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getPage() {
        return page;
    }

    @JsonProperty(JSON_PROPERTY_PAGE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPage(Integer page) {
        this.page = page;
    }

    /** Return true if this PagedEspaces object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PagedEspaces pagedEspaces = (PagedEspaces) o;
        return Objects.equals(this.items, pagedEspaces.items)
                && Objects.equals(this.totalElements, pagedEspaces.totalElements)
                && Objects.equals(this.totalPages, pagedEspaces.totalPages)
                && Objects.equals(this.taille, pagedEspaces.taille)
                && Objects.equals(this.page, pagedEspaces.page);
    }

    @Override
    public int hashCode() {
        return Objects.hash(items, totalElements, totalPages, taille, page);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PagedEspaces {\n");
        sb.append("    items: ").append(toIndentedString(items)).append("\n");
        sb.append("    totalElements: ").append(toIndentedString(totalElements)).append("\n");
        sb.append("    totalPages: ").append(toIndentedString(totalPages)).append("\n");
        sb.append("    taille: ").append(toIndentedString(taille)).append("\n");
        sb.append("    page: ").append(toIndentedString(page)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `items` to the URL query string
        if (getItems() != null) {
            for (int i = 0; i < getItems().size(); i++) {
                if (getItems().get(i) != null) {
                    joiner.add(
                            getItems()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%sitems%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        // add `totalElements` to the URL query string
        if (getTotalElements() != null) {
            joiner.add(
                    String.format(
                            "%stotalElements%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getTotalElements()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `totalPages` to the URL query string
        if (getTotalPages() != null) {
            joiner.add(
                    String.format(
                            "%stotalPages%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getTotalPages()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `taille` to the URL query string
        if (getTaille() != null) {
            joiner.add(
                    String.format(
                            "%staille%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getTaille()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `page` to the URL query string
        if (getPage() != null) {
            joiner.add(
                    String.format(
                            "%spage%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getPage()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
