/*
 * OffreDeFormation V1
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module OFFRE DE FORMATION  Description service ODF  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | | genre     | le genre de la personne est invalide       | | dateEntre | la date est invalide                       | | telephone | le téléphone est invalide                  | | email     | le mail est invalide                       |
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.esupportail.referentiel.pcscol.odf.model;


import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;

import org.esupportail.referentiel.pcscol.invoker.ApiClient;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/** Erreur */
@JsonPropertyOrder({
    Erreur.JSON_PROPERTY_CODE,
    Erreur.JSON_PROPERTY_MESSAGE,
    Erreur.JSON_PROPERTY_CODE_OBJET,
    Erreur.JSON_PROPERTY_CHAMP,
    Erreur.JSON_PROPERTY_MESSAGE_DETAILS
})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2024-07-04T09:22:32.722688+02:00[Europe/Paris]",
        comments = "Generator version: 7.7.0")
public class Erreur {
    public static final String JSON_PROPERTY_CODE = "code";
    private String code;

    public static final String JSON_PROPERTY_MESSAGE = "message";
    private String message;

    public static final String JSON_PROPERTY_CODE_OBJET = "codeObjet";
    private String codeObjet;

    public static final String JSON_PROPERTY_CHAMP = "champ";
    private String champ;

    public static final String JSON_PROPERTY_MESSAGE_DETAILS = "messageDetails";
    private ErreurMessageDetails messageDetails;

    public Erreur() {}

    public Erreur code(String code) {
        this.code = code;
        return this;
    }

    /**
     * Code d&#39;erreur. Les codes autres que ceux indiqués ci-dessous doivent être documentés dans
     * l&#39;API. Exemple: champ_manquant, invalide.
     *
     * @return code
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getCode() {
        return code;
    }

    @JsonProperty(JSON_PROPERTY_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCode(String code) {
        this.code = code;
    }

    public Erreur message(String message) {
        this.message = message;
        return this;
    }

    /**
     * Message d&#39;erreur à destination des utilisateurs.
     *
     * @return message
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getMessage() {
        return message;
    }

    @JsonProperty(JSON_PROPERTY_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setMessage(String message) {
        this.message = message;
    }

    public Erreur codeObjet(String codeObjet) {
        this.codeObjet = codeObjet;
        return this;
    }

    /**
     * Code de l&#39;objet en erreur. Utile dans le cas où l&#39;API effectue des traitements sur un
     * ensemble d&#39;objets.
     *
     * @return codeObjet
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CODE_OBJET)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCodeObjet() {
        return codeObjet;
    }

    @JsonProperty(JSON_PROPERTY_CODE_OBJET)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCodeObjet(String codeObjet) {
        this.codeObjet = codeObjet;
    }

    public Erreur champ(String champ) {
        this.champ = champ;
        return this;
    }

    /**
     * Champ optionnel désignant l&#39;attribut en erreur. Il est valorisé si l&#39;erreur est dûe à
     * un seul attribut en erreur. Cet attribut pourra être utilisé par les applications pour placer
     * le message d&#39;erreur à côté du champ de saisie erronné. A noter, cet attribut est fourni
     * en &#39;best-effort&#39;, certaines valeurs ne correpondront pas à un attribut existant. Dans
     * ce cas, ignorer la valeur de cet attribut et placer le message d&#39;erreur en tant que
     * message d&#39;erreur général.
     *
     * @return champ
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CHAMP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getChamp() {
        return champ;
    }

    @JsonProperty(JSON_PROPERTY_CHAMP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setChamp(String champ) {
        this.champ = champ;
    }

    public Erreur messageDetails(ErreurMessageDetails messageDetails) {
        this.messageDetails = messageDetails;
        return this;
    }

    /**
     * Get messageDetails
     *
     * @return messageDetails
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_MESSAGE_DETAILS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public ErreurMessageDetails getMessageDetails() {
        return messageDetails;
    }

    @JsonProperty(JSON_PROPERTY_MESSAGE_DETAILS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMessageDetails(ErreurMessageDetails messageDetails) {
        this.messageDetails = messageDetails;
    }

    /** Return true if this Erreur object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Erreur erreur = (Erreur) o;
        return Objects.equals(this.code, erreur.code)
                && Objects.equals(this.message, erreur.message)
                && Objects.equals(this.codeObjet, erreur.codeObjet)
                && Objects.equals(this.champ, erreur.champ)
                && Objects.equals(this.messageDetails, erreur.messageDetails);
    }

    @Override
    public int hashCode() {
        return Objects.hash(code, message, codeObjet, champ, messageDetails);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Erreur {\n");
        sb.append("    code: ").append(toIndentedString(code)).append("\n");
        sb.append("    message: ").append(toIndentedString(message)).append("\n");
        sb.append("    codeObjet: ").append(toIndentedString(codeObjet)).append("\n");
        sb.append("    champ: ").append(toIndentedString(champ)).append("\n");
        sb.append("    messageDetails: ").append(toIndentedString(messageDetails)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `code` to the URL query string
        if (getCode() != null) {
            joiner.add(
                    String.format(
                            "%scode%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getCode()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `message` to the URL query string
        if (getMessage() != null) {
            joiner.add(
                    String.format(
                            "%smessage%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getMessage()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `codeObjet` to the URL query string
        if (getCodeObjet() != null) {
            joiner.add(
                    String.format(
                            "%scodeObjet%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getCodeObjet()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `champ` to the URL query string
        if (getChamp() != null) {
            joiner.add(
                    String.format(
                            "%schamp%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getChamp()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `messageDetails` to the URL query string
        if (getMessageDetails() != null) {
            joiner.add(getMessageDetails().toUrlQueryString(prefix + "messageDetails" + suffix));
        }

        return joiner.toString();
    }
}
