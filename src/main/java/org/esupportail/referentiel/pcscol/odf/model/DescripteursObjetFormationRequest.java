/*
 * OffreDeFormation V1
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module OFFRE DE FORMATION  Description service ODF  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | | genre     | le genre de la personne est invalide       | | dateEntre | la date est invalide                       | | telephone | le téléphone est invalide                  | | email     | le mail est invalide                       |
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.esupportail.referentiel.pcscol.odf.model;


import java.math.BigDecimal;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;

import org.esupportail.referentiel.pcscol.invoker.ApiClient;
import org.esupportail.referentiel.pcscol.invoker.JSON;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeInfo;

/** DescripteursObjetFormationRequest */
@JsonPropertyOrder({
    DescripteursObjetFormationRequest.JSON_PROPERTY_ECTS,
    DescripteursObjetFormationRequest.JSON_PROPERTY_NATURE,
    DescripteursObjetFormationRequest.JSON_PROPERTY_TYPE,
    DescripteursObjetFormationRequest.JSON_PROPERTY_STRUCTURE_PRINCIPALE,
    DescripteursObjetFormationRequest.JSON_PROPERTY_STAGE,
    DescripteursObjetFormationRequest.JSON_PROPERTY_TELE_ENSEIGNEMENT,
    DescripteursObjetFormationRequest.JSON_PROPERTY_CAPACITE_ACCUEIL
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2024-07-04T09:22:32.722688+02:00[Europe/Paris]",
        comments = "Generator version: 7.7.0")
@JsonIgnoreProperties(
        value = "typeObjetMaquette", // ignore manually set typeObjetMaquette, it will be
        // automatically generated by Jackson during serialization
        allowSetters = true // allows the typeObjetMaquette to be set during deserialization
        )
@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.PROPERTY,
        property = "typeObjetMaquette",
        visible = true)
public class DescripteursObjetFormationRequest extends DescripteursObjetMaquetteRequest {
    public static final String JSON_PROPERTY_ECTS = "ects";
    private BigDecimal ects;

    public static final String JSON_PROPERTY_NATURE = "nature";
    private String nature;

    public static final String JSON_PROPERTY_TYPE = "type";
    private String type;

    public static final String JSON_PROPERTY_STRUCTURE_PRINCIPALE = "structurePrincipale";
    private String structurePrincipale;

    public static final String JSON_PROPERTY_STAGE = "stage";
    private Boolean stage;

    public static final String JSON_PROPERTY_TELE_ENSEIGNEMENT = "teleEnseignement";
    private Boolean teleEnseignement;

    public static final String JSON_PROPERTY_CAPACITE_ACCUEIL = "capaciteAccueil";
    private Integer capaciteAccueil;

    public DescripteursObjetFormationRequest() {}

    public DescripteursObjetFormationRequest ects(BigDecimal ects) {
        this.ects = ects;
        return this;
    }

    /**
     * Nombre d&#39;ECTS dans le contexte
     *
     * @return ects
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ECTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getEcts() {
        return ects;
    }

    @JsonProperty(JSON_PROPERTY_ECTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setEcts(BigDecimal ects) {
        this.ects = ects;
    }

    public DescripteursObjetFormationRequest nature(String nature) {
        this.nature = nature;
        return this;
    }

    /**
     * Nature dans le contexte Doit correspondre à la nomenclature NatureTypeObjetFormation
     *
     * @return nature
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NATURE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getNature() {
        return nature;
    }

    @JsonProperty(JSON_PROPERTY_NATURE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNature(String nature) {
        this.nature = nature;
    }

    public DescripteursObjetFormationRequest type(String type) {
        this.type = type;
        return this;
    }

    /**
     * Type de l&#39;objet formation Doit correspondre à la nomenclature TypeObjetFormation
     *
     * @return type
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setType(String type) {
        this.type = type;
    }

    public DescripteursObjetFormationRequest structurePrincipale(String structurePrincipale) {
        this.structurePrincipale = structurePrincipale;
        return this;
    }

    /**
     * Get structurePrincipale
     *
     * @return structurePrincipale
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_STRUCTURE_PRINCIPALE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getStructurePrincipale() {
        return structurePrincipale;
    }

    @JsonProperty(JSON_PROPERTY_STRUCTURE_PRINCIPALE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStructurePrincipale(String structurePrincipale) {
        this.structurePrincipale = structurePrincipale;
    }

    public DescripteursObjetFormationRequest stage(Boolean stage) {
        this.stage = stage;
        return this;
    }

    /**
     * Get stage
     *
     * @return stage
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_STAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getStage() {
        return stage;
    }

    @JsonProperty(JSON_PROPERTY_STAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStage(Boolean stage) {
        this.stage = stage;
    }

    public DescripteursObjetFormationRequest teleEnseignement(Boolean teleEnseignement) {
        this.teleEnseignement = teleEnseignement;
        return this;
    }

    /**
     * Get teleEnseignement
     *
     * @return teleEnseignement
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TELE_ENSEIGNEMENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getTeleEnseignement() {
        return teleEnseignement;
    }

    @JsonProperty(JSON_PROPERTY_TELE_ENSEIGNEMENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTeleEnseignement(Boolean teleEnseignement) {
        this.teleEnseignement = teleEnseignement;
    }

    public DescripteursObjetFormationRequest capaciteAccueil(Integer capaciteAccueil) {
        this.capaciteAccueil = capaciteAccueil;
        return this;
    }

    /**
     * Get capaciteAccueil
     *
     * @return capaciteAccueil
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CAPACITE_ACCUEIL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getCapaciteAccueil() {
        return capaciteAccueil;
    }

    @JsonProperty(JSON_PROPERTY_CAPACITE_ACCUEIL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCapaciteAccueil(Integer capaciteAccueil) {
        this.capaciteAccueil = capaciteAccueil;
    }

    @Override
    public DescripteursObjetFormationRequest libelle(String libelle) {
        this.setLibelle(libelle);
        return this;
    }

    @Override
    public DescripteursObjetFormationRequest libelleLong(String libelleLong) {
        this.setLibelleLong(libelleLong);
        return this;
    }

    /** Return true if this DescripteursObjetFormationRequest object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DescripteursObjetFormationRequest descripteursObjetFormationRequest =
                (DescripteursObjetFormationRequest) o;
        return Objects.equals(this.ects, descripteursObjetFormationRequest.ects)
                && Objects.equals(this.nature, descripteursObjetFormationRequest.nature)
                && Objects.equals(this.type, descripteursObjetFormationRequest.type)
                && Objects.equals(
                        this.structurePrincipale,
                        descripteursObjetFormationRequest.structurePrincipale)
                && Objects.equals(this.stage, descripteursObjetFormationRequest.stage)
                && Objects.equals(
                        this.teleEnseignement, descripteursObjetFormationRequest.teleEnseignement)
                && Objects.equals(
                        this.capaciteAccueil, descripteursObjetFormationRequest.capaciteAccueil)
                && super.equals(o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                ects,
                nature,
                type,
                structurePrincipale,
                stage,
                teleEnseignement,
                capaciteAccueil,
                super.hashCode());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DescripteursObjetFormationRequest {\n");
        sb.append("    ").append(toIndentedString(super.toString())).append("\n");
        sb.append("    ects: ").append(toIndentedString(ects)).append("\n");
        sb.append("    nature: ").append(toIndentedString(nature)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    structurePrincipale: ")
                .append(toIndentedString(structurePrincipale))
                .append("\n");
        sb.append("    stage: ").append(toIndentedString(stage)).append("\n");
        sb.append("    teleEnseignement: ").append(toIndentedString(teleEnseignement)).append("\n");
        sb.append("    capaciteAccueil: ").append(toIndentedString(capaciteAccueil)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `libelle` to the URL query string
        if (getLibelle() != null) {
            joiner.add(
                    String.format(
                            "%slibelle%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getLibelle()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `libelleLong` to the URL query string
        if (getLibelleLong() != null) {
            joiner.add(
                    String.format(
                            "%slibelleLong%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getLibelleLong()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `ects` to the URL query string
        if (getEcts() != null) {
            joiner.add(
                    String.format(
                            "%sects%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getEcts()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `nature` to the URL query string
        if (getNature() != null) {
            joiner.add(
                    String.format(
                            "%snature%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getNature()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `type` to the URL query string
        if (getType() != null) {
            joiner.add(
                    String.format(
                            "%stype%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getType()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `structurePrincipale` to the URL query string
        if (getStructurePrincipale() != null) {
            joiner.add(
                    String.format(
                            "%sstructurePrincipale%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getStructurePrincipale()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `stage` to the URL query string
        if (getStage() != null) {
            joiner.add(
                    String.format(
                            "%sstage%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getStage()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `teleEnseignement` to the URL query string
        if (getTeleEnseignement() != null) {
            joiner.add(
                    String.format(
                            "%steleEnseignement%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getTeleEnseignement()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `capaciteAccueil` to the URL query string
        if (getCapaciteAccueil() != null) {
            joiner.add(
                    String.format(
                            "%scapaciteAccueil%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getCapaciteAccueil()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }

    static {
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("DescripteursObjetFormationRequest", DescripteursObjetFormationRequest.class);
        JSON.registerDiscriminator(
                DescripteursObjetFormationRequest.class, "typeObjetMaquette", mappings);
    }
}
