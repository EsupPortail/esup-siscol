/*
 * OffreDeFormation V1
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module OFFRE DE FORMATION  Description service ODF  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | | genre     | le genre de la personne est invalide       | | dateEntre | la date est invalide                       | | telephone | le téléphone est invalide                  | | email     | le mail est invalide                       |
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.esupportail.referentiel.pcscol.odf.model;


import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.UUID;

import org.esupportail.referentiel.pcscol.invoker.ApiClient;
import org.esupportail.referentiel.pcscol.invoker.JSON;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;

/** Espace */
@JsonPropertyOrder({
    Espace.JSON_PROPERTY_ID,
    Espace.JSON_PROPERTY_CODE,
    Espace.JSON_PROPERTY_LIBELLE,
    Espace.JSON_PROPERTY_TYPE_ESPACE
})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2024-07-04T09:22:32.722688+02:00[Europe/Paris]",
        comments = "Generator version: 7.7.0")
@JsonIgnoreProperties(
        value = "typeEspace", // ignore manually set typeEspace, it will be automatically generated
        // by Jackson during serialization
        allowSetters = true // allows the typeEspace to be set during deserialization
        )
@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.PROPERTY,
        property = "typeEspace",
        visible = true)
@JsonSubTypes({
    @JsonSubTypes.Type(value = BacASable.class, name = "BAC_A_SABLE"),
    @JsonSubTypes.Type(value = Periode.class, name = "PERIODE"),
})
public class Espace {
    public static final String JSON_PROPERTY_ID = "id";
    private UUID id;

    public static final String JSON_PROPERTY_CODE = "code";
    private String code;

    public static final String JSON_PROPERTY_LIBELLE = "libelle";
    private String libelle;

    public static final String JSON_PROPERTY_TYPE_ESPACE = "typeEspace";
    private TypeEspace typeEspace;

    public Espace() {}

    public Espace id(UUID id) {
        this.id = id;
        return this;
    }

    /**
     * Identifiant de ressource
     *
     * @return id
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(UUID id) {
        this.id = id;
    }

    public Espace code(String code) {
        this.code = code;
        return this;
    }

    /**
     * Code d&#39;un espace
     *
     * @return code
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getCode() {
        return code;
    }

    @JsonProperty(JSON_PROPERTY_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCode(String code) {
        this.code = code;
    }

    public Espace libelle(String libelle) {
        this.libelle = libelle;
        return this;
    }

    /**
     * Libellé d&#39;un espace
     *
     * @return libelle
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_LIBELLE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getLibelle() {
        return libelle;
    }

    @JsonProperty(JSON_PROPERTY_LIBELLE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLibelle(String libelle) {
        this.libelle = libelle;
    }

    public Espace typeEspace(TypeEspace typeEspace) {
        this.typeEspace = typeEspace;
        return this;
    }

    /**
     * Get typeEspace
     *
     * @return typeEspace
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TYPE_ESPACE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public TypeEspace getTypeEspace() {
        return typeEspace;
    }

    @JsonProperty(JSON_PROPERTY_TYPE_ESPACE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTypeEspace(TypeEspace typeEspace) {
        this.typeEspace = typeEspace;
    }

    /** Return true if this Espace object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Espace espace = (Espace) o;
        return Objects.equals(this.id, espace.id)
                && Objects.equals(this.code, espace.code)
                && Objects.equals(this.libelle, espace.libelle)
                && Objects.equals(this.typeEspace, espace.typeEspace);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, code, libelle, typeEspace);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Espace {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    code: ").append(toIndentedString(code)).append("\n");
        sb.append("    libelle: ").append(toIndentedString(libelle)).append("\n");
        sb.append("    typeEspace: ").append(toIndentedString(typeEspace)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `id` to the URL query string
        if (getId() != null) {
            joiner.add(
                    String.format(
                            "%sid%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getId()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `code` to the URL query string
        if (getCode() != null) {
            joiner.add(
                    String.format(
                            "%scode%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getCode()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `libelle` to the URL query string
        if (getLibelle() != null) {
            joiner.add(
                    String.format(
                            "%slibelle%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getLibelle()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `typeEspace` to the URL query string
        if (getTypeEspace() != null) {
            joiner.add(
                    String.format(
                            "%stypeEspace%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getTypeEspace()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }

    static {
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("BAC_A_SABLE", BacASable.class);
        mappings.put("PERIODE", Periode.class);
        mappings.put("Espace", Espace.class);
        JSON.registerDiscriminator(Espace.class, "typeEspace", mappings);
    }
}
