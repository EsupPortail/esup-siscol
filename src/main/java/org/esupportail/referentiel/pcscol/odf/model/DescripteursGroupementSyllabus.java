/*
 * OffreDeFormation V1
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module OFFRE DE FORMATION  Description service ODF  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | | genre     | le genre de la personne est invalide       | | dateEntre | la date est invalide                       | | telephone | le téléphone est invalide                  | | email     | le mail est invalide                       |
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.esupportail.referentiel.pcscol.odf.model;


import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;

import org.esupportail.referentiel.pcscol.invoker.ApiClient;
import org.esupportail.referentiel.pcscol.invoker.JSON;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeInfo;

/** DescripteursGroupementSyllabus */
@JsonPropertyOrder({})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2024-07-04T09:22:32.722688+02:00[Europe/Paris]",
        comments = "Generator version: 7.7.0")
@JsonIgnoreProperties(
        value = "typeObjetMaquette", // ignore manually set typeObjetMaquette, it will be
        // automatically generated by Jackson during serialization
        allowSetters = true // allows the typeObjetMaquette to be set during deserialization
        )
@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.PROPERTY,
        property = "typeObjetMaquette",
        visible = true)
public class DescripteursGroupementSyllabus extends DescripteursSyllabus {
    public DescripteursGroupementSyllabus() {}

    @Override
    public DescripteursGroupementSyllabus typeObjetMaquette(TypeObjetMaquette typeObjetMaquette) {
        this.setTypeObjetMaquette(typeObjetMaquette);
        return this;
    }

    @Override
    public DescripteursGroupementSyllabus description(String description) {
        this.setDescription(description);
        return this;
    }

    @Override
    public DescripteursGroupementSyllabus objectif(String objectif) {
        this.setObjectif(objectif);
        return this;
    }

    @Override
    public DescripteursGroupementSyllabus ouvertureALaMobiliteEntrante(
            Boolean ouvertureALaMobiliteEntrante) {
        this.setOuvertureALaMobiliteEntrante(ouvertureALaMobiliteEntrante);
        return this;
    }

    @Override
    public DescripteursGroupementSyllabus langueEnseignement(String langueEnseignement) {
        this.setLangueEnseignement(langueEnseignement);
        return this;
    }

    @Override
    public DescripteursGroupementSyllabus prerequisPedagogique(String prerequisPedagogique) {
        this.setPrerequisPedagogique(prerequisPedagogique);
        return this;
    }

    @Override
    public DescripteursGroupementSyllabus bibliographie(String bibliographie) {
        this.setBibliographie(bibliographie);
        return this;
    }

    @Override
    public DescripteursGroupementSyllabus contacts(String contacts) {
        this.setContacts(contacts);
        return this;
    }

    @Override
    public DescripteursGroupementSyllabus autresInformations(String autresInformations) {
        this.setAutresInformations(autresInformations);
        return this;
    }

    @Override
    public DescripteursGroupementSyllabus modalitesEnseignements(String modalitesEnseignements) {
        this.setModalitesEnseignements(modalitesEnseignements);
        return this;
    }

    /** Return true if this DescripteursGroupementSyllabus object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        return super.equals(o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DescripteursGroupementSyllabus {\n");
        sb.append("    ").append(toIndentedString(super.toString())).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `typeObjetMaquette` to the URL query string
        if (getTypeObjetMaquette() != null) {
            joiner.add(
                    String.format(
                            "%stypeObjetMaquette%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getTypeObjetMaquette()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `description` to the URL query string
        if (getDescription() != null) {
            joiner.add(
                    String.format(
                            "%sdescription%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getDescription()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `objectif` to the URL query string
        if (getObjectif() != null) {
            joiner.add(
                    String.format(
                            "%sobjectif%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getObjectif()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `ouvertureALaMobiliteEntrante` to the URL query string
        if (getOuvertureALaMobiliteEntrante() != null) {
            joiner.add(
                    String.format(
                            "%souvertureALaMobiliteEntrante%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(
                                                    getOuvertureALaMobiliteEntrante()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `langueEnseignement` to the URL query string
        if (getLangueEnseignement() != null) {
            joiner.add(
                    String.format(
                            "%slangueEnseignement%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getLangueEnseignement()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `prerequisPedagogique` to the URL query string
        if (getPrerequisPedagogique() != null) {
            joiner.add(
                    String.format(
                            "%sprerequisPedagogique%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getPrerequisPedagogique()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `bibliographie` to the URL query string
        if (getBibliographie() != null) {
            joiner.add(
                    String.format(
                            "%sbibliographie%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getBibliographie()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `contacts` to the URL query string
        if (getContacts() != null) {
            joiner.add(
                    String.format(
                            "%scontacts%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getContacts()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `autresInformations` to the URL query string
        if (getAutresInformations() != null) {
            joiner.add(
                    String.format(
                            "%sautresInformations%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getAutresInformations()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `modalitesEnseignements` to the URL query string
        if (getModalitesEnseignements() != null) {
            joiner.add(
                    String.format(
                            "%smodalitesEnseignements%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getModalitesEnseignements()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }

    static {
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("DescripteursGroupementSyllabus", DescripteursGroupementSyllabus.class);
        JSON.registerDiscriminator(
                DescripteursGroupementSyllabus.class, "typeObjetMaquette", mappings);
    }
}
