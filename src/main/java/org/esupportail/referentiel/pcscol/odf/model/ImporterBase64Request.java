/*
 * OffreDeFormation V1
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module OFFRE DE FORMATION  Description service ODF  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | | genre     | le genre de la personne est invalide       | | dateEntre | la date est invalide                       | | telephone | le téléphone est invalide                  | | email     | le mail est invalide                       |
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.esupportail.referentiel.pcscol.odf.model;


import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.UUID;

import org.esupportail.referentiel.pcscol.invoker.ApiClient;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/** ImporterBase64Request */
@JsonPropertyOrder({
    ImporterBase64Request.JSON_PROPERTY_ESPACE_ID,
    ImporterBase64Request.JSON_PROPERTY_BASE64_ENCODE,
    ImporterBase64Request.JSON_PROPERTY_CHECK_NOMENCLATURES
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2024-07-04T09:22:32.722688+02:00[Europe/Paris]",
        comments = "Generator version: 7.7.0")
public class ImporterBase64Request {
    public static final String JSON_PROPERTY_ESPACE_ID = "espaceId";
    private UUID espaceId;

    public static final String JSON_PROPERTY_BASE64_ENCODE = "base64Encode";
    private String base64Encode;

    public static final String JSON_PROPERTY_CHECK_NOMENCLATURES = "checkNomenclatures";
    private Boolean checkNomenclatures;

    public ImporterBase64Request() {}

    public ImporterBase64Request espaceId(UUID espaceId) {
        this.espaceId = espaceId;
        return this;
    }

    /**
     * Identifiant de ressource
     *
     * @return espaceId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ESPACE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getEspaceId() {
        return espaceId;
    }

    @JsonProperty(JSON_PROPERTY_ESPACE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEspaceId(UUID espaceId) {
        this.espaceId = espaceId;
    }

    public ImporterBase64Request base64Encode(String base64Encode) {
        this.base64Encode = base64Encode;
        return this;
    }

    /**
     * La maquette encodée en base64
     *
     * @return base64Encode
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BASE64_ENCODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getBase64Encode() {
        return base64Encode;
    }

    @JsonProperty(JSON_PROPERTY_BASE64_ENCODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBase64Encode(String base64Encode) {
        this.base64Encode = base64Encode;
    }

    public ImporterBase64Request checkNomenclatures(Boolean checkNomenclatures) {
        this.checkNomenclatures = checkNomenclatures;
        return this;
    }

    /**
     * Vérification si on veut faire la vérification des nomenclatures
     *
     * @return checkNomenclatures
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CHECK_NOMENCLATURES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getCheckNomenclatures() {
        return checkNomenclatures;
    }

    @JsonProperty(JSON_PROPERTY_CHECK_NOMENCLATURES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCheckNomenclatures(Boolean checkNomenclatures) {
        this.checkNomenclatures = checkNomenclatures;
    }

    /** Return true if this ImporterBase64Request object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ImporterBase64Request importerBase64Request = (ImporterBase64Request) o;
        return Objects.equals(this.espaceId, importerBase64Request.espaceId)
                && Objects.equals(this.base64Encode, importerBase64Request.base64Encode)
                && Objects.equals(
                        this.checkNomenclatures, importerBase64Request.checkNomenclatures);
    }

    @Override
    public int hashCode() {
        return Objects.hash(espaceId, base64Encode, checkNomenclatures);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ImporterBase64Request {\n");
        sb.append("    espaceId: ").append(toIndentedString(espaceId)).append("\n");
        sb.append("    base64Encode: ").append(toIndentedString(base64Encode)).append("\n");
        sb.append("    checkNomenclatures: ")
                .append(toIndentedString(checkNomenclatures))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `espaceId` to the URL query string
        if (getEspaceId() != null) {
            joiner.add(
                    String.format(
                            "%sespaceId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getEspaceId()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `base64Encode` to the URL query string
        if (getBase64Encode() != null) {
            joiner.add(
                    String.format(
                            "%sbase64Encode%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getBase64Encode()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `checkNomenclatures` to the URL query string
        if (getCheckNomenclatures() != null) {
            joiner.add(
                    String.format(
                            "%scheckNomenclatures%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getCheckNomenclatures()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
