/*
 * STA Externe V1 -  Contrat Api pour mise à disposition pour les SI de gestion de stage (Esup-stage, ...)
 *  # Introduction Liste l'ensemble des services et des opérations disponibles dans le service stage  Le service stage a pour vocation de mettre à disposition l'ensemble des éléments nécessaires aux systèmes d'informations de gestion des stages  # Authentification/autorisation obligatoire Pour tout appel à une opération vous devez être authentifié/autorisé à l’aide d’un token jwt. Pour cela, chaque requête HTTP doit contenir un token valide dans le header HTTP Authorization.  # Notions métiers  ## Apprenant Tout étudiant en formation initiale (dont apprentis) ou stagiaire de la formation continue inscrit administrativement ou pédagogiquement sur une formation ou un objet de formation.  ## Inscription Objet maquette (Formation ou Objet de formation) sur lesquels est inscrit administrativement l'apprenant.  ## Stage Objet de formation taggué stage qui fait partie de la descendance de l'objet maquette sur lequel est inscrit l'apprenant  # Gestion des erreurs  ## Codes d'erreurs  <exemple-status-code>  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 404     | Ressource inexistante                      | | 500     | Erreur technique rencontrée par le serveur |  <exemple-erreurs>  ## Contenu d'une erreur métier (statusCode: 400 ou 404)  Lorsqu'une erreur 400 ou 404 (ressource métier non existante) est générée, le corps HTTP de la réponse contient:  ``` {     \"correlationId\": \"1ace2ef3-b00a-49d1-a45e-6b10783c6038\",     \"timestamp\": \"2020-06-24T15:17:48.95941+02:00\",     \"version\": \"1.1.0\",     \"path\": \"/api/cof/v2-draft/etablissements/ETAB00/formations\",     \"statusCode\": \"400\",     \"errors\": [         {             \"code\": \"FormatDeCodeValide\",             \"message\": \"Le code \\\"BLA43????\\\" ne doit être constitué que de lettres majuscules (de A à Z), de chiffres (de 0 à 9) et de tirets (-).\",             \"champ\": \"formation.code\",             \"messageDetails\": {                 \"arguments\": {}             }         }     ] } ```  Avec:  * correlationId: Identifiant de corrélation * timestamp: Timestamp auquel est survenu l'erreur * version: version de l'application * path: URI du module COF sur laquelle est survenue l'erreur. * statusCode: code statut HTTP * errors: Une liste d'erreur (taille minimum = 1) avec: ** code: code de l'erreur ** message: message de l'erreur ** champ: propriété de la ressource sur lequel se rapporte l'erreur (vide dans le cas où il s'agit d'une erreur    globale à la ressource ou sur plusieurs champs et non spécifique à un seul champs) ** messageDetails.arguments: contient des détails sur l'erreur  ## Contenu de l'erreur technique  Lorsqu'une erreur est générée, le corps HTTP de la réponse contient:  ``` {     \"timestamp\": \"2020-06-08T11:15:42.831+0000\",     \"status\": 500,     \"error\": \"Internal Server Error\",     \"message\": \"Un message d'erreur intelligible\",     \"path\": \"/api/cof/v2-draft/etablissements/ETAB00/objets-maquette/candidats\" } ```  Avec:  * timestamp: Timestamp auquel est survenu l'erreur * status: Code statut HTTP * error: Libellé correspondant au code Statut (exemple: Internal Server Error) * message: Message d'erreur. * path: URI du module COF sur laquelle est survenue l'erreur. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.esupportail.referentiel.pcscol.model.sta;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import io.swagger.annotations.ApiModelProperty;


/**
 * Erreurs
 */
@JsonPropertyOrder({
  Erreurs.JSON_PROPERTY_CORRELATION_ID,
  Erreurs.JSON_PROPERTY_TIMESTAMP,
  Erreurs.JSON_PROPERTY_VERSION,
  Erreurs.JSON_PROPERTY_PATH,
  Erreurs.JSON_PROPERTY_STATUS_CODE,
  Erreurs.JSON_PROPERTY_ERRORS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-15T13:35:24.917377+01:00[Europe/Paris]")
public class Erreurs {
  public static final String JSON_PROPERTY_CORRELATION_ID = "correlationId";
  private String correlationId;

  public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
  private Date timestamp;

  public static final String JSON_PROPERTY_VERSION = "version";
  private String version;

  public static final String JSON_PROPERTY_PATH = "path";
  private String path;

  public static final String JSON_PROPERTY_STATUS_CODE = "statusCode";
  private String statusCode;

  public static final String JSON_PROPERTY_ERRORS = "errors";
  private List<Erreur> errors = new ArrayList<>();

  public Erreurs() { 
  }

  public Erreurs correlationId(String correlationId) {
    this.correlationId = correlationId;
    return this;
  }

   /**
   * Permet d&#39;identifier de manière unique l&#39;erreur côté serveur.  A titre de debugging. 
   * @return correlationId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Permet d'identifier de manière unique l'erreur côté serveur.  A titre de debugging. ")
  @JsonProperty(JSON_PROPERTY_CORRELATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCorrelationId() {
    return correlationId;
  }


  @JsonProperty(JSON_PROPERTY_CORRELATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCorrelationId(String correlationId) {
    this.correlationId = correlationId;
  }


  public Erreurs timestamp(Date timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Timestamp auque à lieu l&#39;erreur.  A titre de debugging. 
   * @return timestamp
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Timestamp auque à lieu l'erreur.  A titre de debugging. ")
  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Date getTimestamp() {
    return timestamp;
  }


  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTimestamp(Date timestamp) {
    this.timestamp = timestamp;
  }


  public Erreurs version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Version de l&#39;application.  A titre de debugging. 
   * @return version
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Version de l'application.  A titre de debugging. ")
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersion(String version) {
    this.version = version;
  }


  public Erreurs path(String path) {
    this.path = path;
    return this;
  }

   /**
   * URI sur lequel le service a été applelé (i.e /api/monservice).  A titre de debugging. 
   * @return path
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "URI sur lequel le service a été applelé (i.e /api/monservice).  A titre de debugging. ")
  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPath() {
    return path;
  }


  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPath(String path) {
    this.path = path;
  }


  public Erreurs statusCode(String statusCode) {
    this.statusCode = statusCode;
    return this;
  }

   /**
   * Statuscode HTTP.  A titre de debugging 
   * @return statusCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Statuscode HTTP.  A titre de debugging ")
  @JsonProperty(JSON_PROPERTY_STATUS_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getStatusCode() {
    return statusCode;
  }


  @JsonProperty(JSON_PROPERTY_STATUS_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatusCode(String statusCode) {
    this.statusCode = statusCode;
  }


  public Erreurs errors(List<Erreur> errors) {
    this.errors = errors;
    return this;
  }

  public Erreurs addErrorsItem(Erreur errorsItem) {
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * Get errors
   * @return errors
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ERRORS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Erreur> getErrors() {
    return errors;
  }


  @JsonProperty(JSON_PROPERTY_ERRORS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setErrors(List<Erreur> errors) {
    this.errors = errors;
  }


  /**
   * Return true if this Erreurs object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Erreurs erreurs = (Erreurs) o;
    return Objects.equals(this.correlationId, erreurs.correlationId) &&
        Objects.equals(this.timestamp, erreurs.timestamp) &&
        Objects.equals(this.version, erreurs.version) &&
        Objects.equals(this.path, erreurs.path) &&
        Objects.equals(this.statusCode, erreurs.statusCode) &&
        Objects.equals(this.errors, erreurs.errors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(correlationId, timestamp, version, path, statusCode, errors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Erreurs {\n");
    sb.append("    correlationId: ").append(toIndentedString(correlationId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

