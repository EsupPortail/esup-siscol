/*
 * STA Externe V1 -  Contrat Api pour mise à disposition pour les SI de gestion de stage (Esup-stage, ...)
 *  # Introduction Liste l'ensemble des services et des opérations disponibles dans le service stage  Le service stage a pour vocation de mettre à disposition l'ensemble des éléments nécessaires aux systèmes d'informations de gestion des stages  # Authentification/autorisation obligatoire Pour tout appel à une opération vous devez être authentifié/autorisé à l’aide d’un token jwt. Pour cela, chaque requête HTTP doit contenir un token valide dans le header HTTP Authorization.  # Notions métiers  ## Apprenant Tout étudiant en formation initiale (dont apprentis) ou stagiaire de la formation continue inscrit administrativement ou pédagogiquement sur une formation ou un objet de formation.  ## Inscription Objet maquette (Formation ou Objet de formation) sur lesquels est inscrit administrativement l'apprenant.  ## Stage Objet de formation taggué stage qui fait partie de la descendance de l'objet maquette sur lequel est inscrit l'apprenant  # Gestion des erreurs  ## Codes d'erreurs  <exemple-status-code>  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 404     | Ressource inexistante                      | | 500     | Erreur technique rencontrée par le serveur |  <exemple-erreurs>  ## Contenu d'une erreur métier (statusCode: 400 ou 404)  Lorsqu'une erreur 400 ou 404 (ressource métier non existante) est générée, le corps HTTP de la réponse contient:  ``` {     \"correlationId\": \"1ace2ef3-b00a-49d1-a45e-6b10783c6038\",     \"timestamp\": \"2020-06-24T15:17:48.95941+02:00\",     \"version\": \"1.1.0\",     \"path\": \"/api/cof/v2-draft/etablissements/ETAB00/formations\",     \"statusCode\": \"400\",     \"errors\": [         {             \"code\": \"FormatDeCodeValide\",             \"message\": \"Le code \\\"BLA43????\\\" ne doit être constitué que de lettres majuscules (de A à Z), de chiffres (de 0 à 9) et de tirets (-).\",             \"champ\": \"formation.code\",             \"messageDetails\": {                 \"arguments\": {}             }         }     ] } ```  Avec:  * correlationId: Identifiant de corrélation * timestamp: Timestamp auquel est survenu l'erreur * version: version de l'application * path: URI du module COF sur laquelle est survenue l'erreur. * statusCode: code statut HTTP * errors: Une liste d'erreur (taille minimum = 1) avec: ** code: code de l'erreur ** message: message de l'erreur ** champ: propriété de la ressource sur lequel se rapporte l'erreur (vide dans le cas où il s'agit d'une erreur    globale à la ressource ou sur plusieurs champs et non spécifique à un seul champs) ** messageDetails.arguments: contient des détails sur l'erreur  ## Contenu de l'erreur technique  Lorsqu'une erreur est générée, le corps HTTP de la réponse contient:  ``` {     \"timestamp\": \"2020-06-08T11:15:42.831+0000\",     \"status\": 500,     \"error\": \"Internal Server Error\",     \"message\": \"Un message d'erreur intelligible\",     \"path\": \"/api/cof/v2-draft/etablissements/ETAB00/objets-maquette/candidats\" } ```  Avec:  * timestamp: Timestamp auquel est survenu l'erreur * status: Code statut HTTP * error: Libellé correspondant au code Statut (exemple: Internal Server Error) * message: Message d'erreur. * path: URI du module COF sur laquelle est survenue l'erreur. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.esupportail.referentiel.pcscol.model.sta;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * Type de l&#39;objet
 */
@ApiModel(description = "Type de l'objet")
@JsonPropertyOrder({
  TypeObjet.JSON_PROPERTY_CODE_TYPE_OBJET,
  TypeObjet.JSON_PROPERTY_LIBELLE_COURT
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-15T13:35:24.917377+01:00[Europe/Paris]")
public class TypeObjet {
  public static final String JSON_PROPERTY_CODE_TYPE_OBJET = "codeTypeObjet";
  private String codeTypeObjet;

  public static final String JSON_PROPERTY_LIBELLE_COURT = "libelleCourt";
  private String libelleCourt;

  public TypeObjet() { 
  }

  public TypeObjet codeTypeObjet(String codeTypeObjet) {
    this.codeTypeObjet = codeTypeObjet;
    return this;
  }

   /**
   * Le code du type de  l&#39;objet
   * @return codeTypeObjet
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Le code du type de  l'objet")
  @JsonProperty(JSON_PROPERTY_CODE_TYPE_OBJET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCodeTypeObjet() {
    return codeTypeObjet;
  }


  @JsonProperty(JSON_PROPERTY_CODE_TYPE_OBJET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCodeTypeObjet(String codeTypeObjet) {
    this.codeTypeObjet = codeTypeObjet;
  }


  public TypeObjet libelleCourt(String libelleCourt) {
    this.libelleCourt = libelleCourt;
    return this;
  }

   /**
   * Le libellé du type de l&#39;objet
   * @return libelleCourt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Le libellé du type de l'objet")
  @JsonProperty(JSON_PROPERTY_LIBELLE_COURT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLibelleCourt() {
    return libelleCourt;
  }


  @JsonProperty(JSON_PROPERTY_LIBELLE_COURT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLibelleCourt(String libelleCourt) {
    this.libelleCourt = libelleCourt;
  }


  /**
   * Return true if this TypeObjet object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TypeObjet typeObjet = (TypeObjet) o;
    return Objects.equals(this.codeTypeObjet, typeObjet.codeTypeObjet) &&
        Objects.equals(this.libelleCourt, typeObjet.libelleCourt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codeTypeObjet, libelleCourt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TypeObjet {\n");
    sb.append("    codeTypeObjet: ").append(toIndentedString(codeTypeObjet)).append("\n");
    sb.append("    libelleCourt: ").append(toIndentedString(libelleCourt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

