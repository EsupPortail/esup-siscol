/*
 * STA Externe V1 -  Contrat Api pour mise à disposition pour les SI de gestion de stage (Esup-stage, ...)
 *  # Introduction Liste l'ensemble des services et des opérations disponibles dans le service stage  Le service stage a pour vocation de mettre à disposition l'ensemble des éléments nécessaires aux systèmes d'informations de gestion des stages  # Authentification/autorisation obligatoire Pour tout appel à une opération vous devez être authentifié/autorisé à l’aide d’un token jwt. Pour cela, chaque requête HTTP doit contenir un token valide dans le header HTTP Authorization.  # Notions métiers  ## Apprenant Tout étudiant en formation initiale (dont apprentis) ou stagiaire de la formation continue inscrit administrativement ou pédagogiquement sur une formation ou un objet de formation.  ## Inscription Objet maquette (Formation ou Objet de formation) sur lesquels est inscrit administrativement l'apprenant.  ## Stage Objet de formation taggué stage qui fait partie de la descendance de l'objet maquette sur lequel est inscrit l'apprenant  # Gestion des erreurs  ## Codes d'erreurs  <exemple-status-code>  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 404     | Ressource inexistante                      | | 500     | Erreur technique rencontrée par le serveur |  <exemple-erreurs>  ## Contenu d'une erreur métier (statusCode: 400 ou 404)  Lorsqu'une erreur 400 ou 404 (ressource métier non existante) est générée, le corps HTTP de la réponse contient:  ``` {     \"correlationId\": \"1ace2ef3-b00a-49d1-a45e-6b10783c6038\",     \"timestamp\": \"2020-06-24T15:17:48.95941+02:00\",     \"version\": \"1.1.0\",     \"path\": \"/api/cof/v2-draft/etablissements/ETAB00/formations\",     \"statusCode\": \"400\",     \"errors\": [         {             \"code\": \"FormatDeCodeValide\",             \"message\": \"Le code \\\"BLA43????\\\" ne doit être constitué que de lettres majuscules (de A à Z), de chiffres (de 0 à 9) et de tirets (-).\",             \"champ\": \"formation.code\",             \"messageDetails\": {                 \"arguments\": {}             }         }     ] } ```  Avec:  * correlationId: Identifiant de corrélation * timestamp: Timestamp auquel est survenu l'erreur * version: version de l'application * path: URI du module COF sur laquelle est survenue l'erreur. * statusCode: code statut HTTP * errors: Une liste d'erreur (taille minimum = 1) avec: ** code: code de l'erreur ** message: message de l'erreur ** champ: propriété de la ressource sur lequel se rapporte l'erreur (vide dans le cas où il s'agit d'une erreur    globale à la ressource ou sur plusieurs champs et non spécifique à un seul champs) ** messageDetails.arguments: contient des détails sur l'erreur  ## Contenu de l'erreur technique  Lorsqu'une erreur est générée, le corps HTTP de la réponse contient:  ``` {     \"timestamp\": \"2020-06-08T11:15:42.831+0000\",     \"status\": 500,     \"error\": \"Internal Server Error\",     \"message\": \"Un message d'erreur intelligible\",     \"path\": \"/api/cof/v2-draft/etablissements/ETAB00/objets-maquette/candidats\" } ```  Avec:  * timestamp: Timestamp auquel est survenu l'erreur * status: Code statut HTTP * error: Libellé correspondant au code Statut (exemple: Internal Server Error) * message: Message d'erreur. * path: URI du module COF sur laquelle est survenue l'erreur. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.esupportail.referentiel.pcscol.model.sta;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import io.swagger.annotations.ApiModelProperty;


/**
 * Erreur
 */
@JsonPropertyOrder({
  Erreur.JSON_PROPERTY_CODE,
  Erreur.JSON_PROPERTY_MESSAGE,
  Erreur.JSON_PROPERTY_CODE_OBJET,
  Erreur.JSON_PROPERTY_CHAMP,
  Erreur.JSON_PROPERTY_MESSAGE_DETAILS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-15T13:35:24.917377+01:00[Europe/Paris]")
public class Erreur {
  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;

  public static final String JSON_PROPERTY_CODE_OBJET = "codeObjet";
  private String codeObjet;

  public static final String JSON_PROPERTY_CHAMP = "champ";
  private String champ;

  public static final String JSON_PROPERTY_MESSAGE_DETAILS = "messageDetails";
  private ErreurMessageDetails messageDetails;

  public Erreur() { 
  }

  public Erreur code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Code d&#39;erreur.  Les codes autres que ceux indiqués ci-dessous doivent être documentés dans l&#39;API.  Exemple: champ_manquant, invalide. 
   * @return code
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Code d'erreur.  Les codes autres que ceux indiqués ci-dessous doivent être documentés dans l'API.  Exemple: champ_manquant, invalide. ")
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCode(String code) {
    this.code = code;
  }


  public Erreur message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Message d&#39;erreur à destination des utilisateurs. 
   * @return message
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Message d'erreur à destination des utilisateurs. ")
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessage(String message) {
    this.message = message;
  }


  public Erreur codeObjet(String codeObjet) {
    this.codeObjet = codeObjet;
    return this;
  }

   /**
   * Code de l&#39;objet en erreur.  Utile dans le cas où l&#39;API effectue des traitements sur un ensemble d&#39;objets. 
   * @return codeObjet
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Code de l'objet en erreur.  Utile dans le cas où l'API effectue des traitements sur un ensemble d'objets. ")
  @JsonProperty(JSON_PROPERTY_CODE_OBJET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCodeObjet() {
    return codeObjet;
  }


  @JsonProperty(JSON_PROPERTY_CODE_OBJET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCodeObjet(String codeObjet) {
    this.codeObjet = codeObjet;
  }


  public Erreur champ(String champ) {
    this.champ = champ;
    return this;
  }

   /**
   * Champ optionnel désignant l&#39;attribut en erreur.  Il est valorisé si l&#39;erreur est dûe à un seul attribut en erreur.  Cet attribut pourra être utilisé par les applications pour placer le message d&#39;erreur à côté du champ de saisie erronné.  A noter, cet attribut est fourni en &#39;best-effort&#39;, certaines valeurs ne correpondront pas à un attribut existant. Dans ce cas, ignorer la valeur de cet attribut et placer le message d&#39;erreur en tant que message d&#39;erreur général. 
   * @return champ
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Champ optionnel désignant l'attribut en erreur.  Il est valorisé si l'erreur est dûe à un seul attribut en erreur.  Cet attribut pourra être utilisé par les applications pour placer le message d'erreur à côté du champ de saisie erronné.  A noter, cet attribut est fourni en 'best-effort', certaines valeurs ne correpondront pas à un attribut existant. Dans ce cas, ignorer la valeur de cet attribut et placer le message d'erreur en tant que message d'erreur général. ")
  @JsonProperty(JSON_PROPERTY_CHAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getChamp() {
    return champ;
  }


  @JsonProperty(JSON_PROPERTY_CHAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChamp(String champ) {
    this.champ = champ;
  }


  public Erreur messageDetails(ErreurMessageDetails messageDetails) {
    this.messageDetails = messageDetails;
    return this;
  }

   /**
   * Get messageDetails
   * @return messageDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MESSAGE_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ErreurMessageDetails getMessageDetails() {
    return messageDetails;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessageDetails(ErreurMessageDetails messageDetails) {
    this.messageDetails = messageDetails;
  }


  /**
   * Return true if this Erreur object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Erreur erreur = (Erreur) o;
    return Objects.equals(this.code, erreur.code) &&
        Objects.equals(this.message, erreur.message) &&
        Objects.equals(this.codeObjet, erreur.codeObjet) &&
        Objects.equals(this.champ, erreur.champ) &&
        Objects.equals(this.messageDetails, erreur.messageDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, message, codeObjet, champ, messageDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Erreur {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    codeObjet: ").append(toIndentedString(codeObjet)).append("\n");
    sb.append("    champ: ").append(toIndentedString(champ)).append("\n");
    sb.append("    messageDetails: ").append(toIndentedString(messageDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

