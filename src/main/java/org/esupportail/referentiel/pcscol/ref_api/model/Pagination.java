/*
 * REF v1 - Référentiel
 * Liste l'ensemble des services et des opérations disponibles dans le module Referentiel
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.esupportail.referentiel.pcscol.ref_api.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

import org.esupportail.referentiel.pcscol.invoker.ApiClient;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
/**
 * Objet pagination contenant le liste des nomenclatures et les métas données liés à la pagination
 */
@JsonPropertyOrder({
  Pagination.JSON_PROPERTY_NOMENCLATURES,
  Pagination.JSON_PROPERTY_NB_TOTAL_OCCURENCES,
  Pagination.JSON_PROPERTY_NB_TOTAL_PAGES,
  Pagination.JSON_PROPERTY_NB_OCCURENCES,
  Pagination.JSON_PROPERTY_NUM_PAGE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-30T09:24:02.851634+02:00[Europe/Paris]", comments = "Generator version: 7.7.0")
public class Pagination {
  public static final String JSON_PROPERTY_NOMENCLATURES = "nomenclatures";
  private List<Nomenclature> nomenclatures = new ArrayList<>();

  public static final String JSON_PROPERTY_NB_TOTAL_OCCURENCES = "nbTotalOccurences";
  private Long nbTotalOccurences;

  public static final String JSON_PROPERTY_NB_TOTAL_PAGES = "nbTotalPages";
  private Integer nbTotalPages;

  public static final String JSON_PROPERTY_NB_OCCURENCES = "nbOccurences";
  private Integer nbOccurences;

  public static final String JSON_PROPERTY_NUM_PAGE = "numPage";
  private Integer numPage;

  public Pagination() { 
  }

  public Pagination nomenclatures(List<Nomenclature> nomenclatures) {
    this.nomenclatures = nomenclatures;
    return this;
  }

  public Pagination addNomenclaturesItem(Nomenclature nomenclaturesItem) {
    if (this.nomenclatures == null) {
      this.nomenclatures = new ArrayList<>();
    }
    this.nomenclatures.add(nomenclaturesItem);
    return this;
  }

  /**
   * Get nomenclatures
   * @return nomenclatures
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NOMENCLATURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Nomenclature> getNomenclatures() {
    return nomenclatures;
  }


  @JsonProperty(JSON_PROPERTY_NOMENCLATURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNomenclatures(List<Nomenclature> nomenclatures) {
    this.nomenclatures = nomenclatures;
  }


  public Pagination nbTotalOccurences(Long nbTotalOccurences) {
    this.nbTotalOccurences = nbTotalOccurences;
    return this;
  }

  /**
   * Get nbTotalOccurences
   * @return nbTotalOccurences
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NB_TOTAL_OCCURENCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getNbTotalOccurences() {
    return nbTotalOccurences;
  }


  @JsonProperty(JSON_PROPERTY_NB_TOTAL_OCCURENCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNbTotalOccurences(Long nbTotalOccurences) {
    this.nbTotalOccurences = nbTotalOccurences;
  }


  public Pagination nbTotalPages(Integer nbTotalPages) {
    this.nbTotalPages = nbTotalPages;
    return this;
  }

  /**
   * Get nbTotalPages
   * @return nbTotalPages
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NB_TOTAL_PAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getNbTotalPages() {
    return nbTotalPages;
  }


  @JsonProperty(JSON_PROPERTY_NB_TOTAL_PAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNbTotalPages(Integer nbTotalPages) {
    this.nbTotalPages = nbTotalPages;
  }


  public Pagination nbOccurences(Integer nbOccurences) {
    this.nbOccurences = nbOccurences;
    return this;
  }

  /**
   * Get nbOccurences
   * @return nbOccurences
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NB_OCCURENCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getNbOccurences() {
    return nbOccurences;
  }


  @JsonProperty(JSON_PROPERTY_NB_OCCURENCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNbOccurences(Integer nbOccurences) {
    this.nbOccurences = nbOccurences;
  }


  public Pagination numPage(Integer numPage) {
    this.numPage = numPage;
    return this;
  }

  /**
   * Get numPage
   * @return numPage
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUM_PAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getNumPage() {
    return numPage;
  }


  @JsonProperty(JSON_PROPERTY_NUM_PAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumPage(Integer numPage) {
    this.numPage = numPage;
  }


  /**
   * Return true if this Pagination object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pagination pagination = (Pagination) o;
    return Objects.equals(this.nomenclatures, pagination.nomenclatures) &&
        Objects.equals(this.nbTotalOccurences, pagination.nbTotalOccurences) &&
        Objects.equals(this.nbTotalPages, pagination.nbTotalPages) &&
        Objects.equals(this.nbOccurences, pagination.nbOccurences) &&
        Objects.equals(this.numPage, pagination.numPage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nomenclatures, nbTotalOccurences, nbTotalPages, nbOccurences, numPage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pagination {\n");
    sb.append("    nomenclatures: ").append(toIndentedString(nomenclatures)).append("\n");
    sb.append("    nbTotalOccurences: ").append(toIndentedString(nbTotalOccurences)).append("\n");
    sb.append("    nbTotalPages: ").append(toIndentedString(nbTotalPages)).append("\n");
    sb.append("    nbOccurences: ").append(toIndentedString(nbOccurences)).append("\n");
    sb.append("    numPage: ").append(toIndentedString(numPage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `nomenclatures` to the URL query string
    if (getNomenclatures() != null) {
      for (int i = 0; i < getNomenclatures().size(); i++) {
        if (getNomenclatures().get(i) != null) {
          joiner.add(getNomenclatures().get(i).toUrlQueryString(String.format("%snomenclatures%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `nbTotalOccurences` to the URL query string
    if (getNbTotalOccurences() != null) {
      joiner.add(String.format("%snbTotalOccurences%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getNbTotalOccurences()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `nbTotalPages` to the URL query string
    if (getNbTotalPages() != null) {
      joiner.add(String.format("%snbTotalPages%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getNbTotalPages()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `nbOccurences` to the URL query string
    if (getNbOccurences() != null) {
      joiner.add(String.format("%snbOccurences%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getNbOccurences()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `numPage` to the URL query string
    if (getNumPage() != null) {
      joiner.add(String.format("%snumPage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getNumPage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

