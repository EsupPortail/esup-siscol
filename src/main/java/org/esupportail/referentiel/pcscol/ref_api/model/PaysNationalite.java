/*
 * REF v1 - Référentiel
 * Liste l'ensemble des services et des opérations disponibles dans le module Referentiel
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.esupportail.referentiel.pcscol.ref_api.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;

import org.esupportail.referentiel.pcscol.invoker.ApiClient;
import org.esupportail.referentiel.pcscol.invoker.JSON;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
/**
 * Nomenclature des pays et des nationalités
 */
@JsonPropertyOrder({
  PaysNationalite.JSON_PROPERTY_TYPE_NOMENCLATURE,
  PaysNationalite.JSON_PROPERTY_CONTINENT,
  PaysNationalite.JSON_PROPERTY_LIBELLE_NATIONALITE,
  PaysNationalite.JSON_PROPERTY_CODE_DRAPEAU,
  PaysNationalite.JSON_PROPERTY_TEMOIN_UNION_EUROPEENNE,
  PaysNationalite.JSON_PROPERTY_TEMOIN_ACCORDS,
  PaysNationalite.JSON_PROPERTY_CODE_ISO3611
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-30T09:24:02.851634+02:00[Europe/Paris]", comments = "Generator version: 7.7.0")
@JsonIgnoreProperties(
  value = "typeNomenclature", // ignore manually set typeNomenclature, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the typeNomenclature to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "typeNomenclature", visible = true)

public class PaysNationalite extends Nomenclature {
  public static final String JSON_PROPERTY_TYPE_NOMENCLATURE = "typeNomenclature";
  private String typeNomenclature;

  public static final String JSON_PROPERTY_CONTINENT = "continent";
  private String continent;

  public static final String JSON_PROPERTY_LIBELLE_NATIONALITE = "libelleNationalite";
  private String libelleNationalite;

  public static final String JSON_PROPERTY_CODE_DRAPEAU = "codeDrapeau";
  private String codeDrapeau;

  public static final String JSON_PROPERTY_TEMOIN_UNION_EUROPEENNE = "temoinUnionEuropeenne";
  private Boolean temoinUnionEuropeenne;

  public static final String JSON_PROPERTY_TEMOIN_ACCORDS = "temoinAccords";
  private Boolean temoinAccords;

  public static final String JSON_PROPERTY_CODE_ISO3611 = "codeIso3611";
  private String codeIso3611;

  public PaysNationalite() { 
  }

  public PaysNationalite typeNomenclature(String typeNomenclature) {
    this.typeNomenclature = typeNomenclature;
    return this;
  }

  /**
   * Discriminant
   * @return typeNomenclature
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE_NOMENCLATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getTypeNomenclature() {
    return typeNomenclature;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_NOMENCLATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeNomenclature(String typeNomenclature) {
    this.typeNomenclature = typeNomenclature;
  }


  public PaysNationalite continent(String continent) {
    this.continent = continent;
    return this;
  }

  /**
   * Continent du pays
   * @return continent
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTINENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getContinent() {
    return continent;
  }


  @JsonProperty(JSON_PROPERTY_CONTINENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContinent(String continent) {
    this.continent = continent;
  }


  public PaysNationalite libelleNationalite(String libelleNationalite) {
    this.libelleNationalite = libelleNationalite;
    return this;
  }

  /**
   * Libellé de la nationalité du pays
   * @return libelleNationalite
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIBELLE_NATIONALITE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getLibelleNationalite() {
    return libelleNationalite;
  }


  @JsonProperty(JSON_PROPERTY_LIBELLE_NATIONALITE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLibelleNationalite(String libelleNationalite) {
    this.libelleNationalite = libelleNationalite;
  }


  public PaysNationalite codeDrapeau(String codeDrapeau) {
    this.codeDrapeau = codeDrapeau;
    return this;
  }

  /**
   * Code mondial du pays pour affichage du drapeau
   * @return codeDrapeau
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CODE_DRAPEAU)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCodeDrapeau() {
    return codeDrapeau;
  }


  @JsonProperty(JSON_PROPERTY_CODE_DRAPEAU)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCodeDrapeau(String codeDrapeau) {
    this.codeDrapeau = codeDrapeau;
  }


  public PaysNationalite temoinUnionEuropeenne(Boolean temoinUnionEuropeenne) {
    this.temoinUnionEuropeenne = temoinUnionEuropeenne;
    return this;
  }

  /**
   * Indicateur d&#39;appartenance à l&#39;Union Européenne
   * @return temoinUnionEuropeenne
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEMOIN_UNION_EUROPEENNE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getTemoinUnionEuropeenne() {
    return temoinUnionEuropeenne;
  }


  @JsonProperty(JSON_PROPERTY_TEMOIN_UNION_EUROPEENNE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTemoinUnionEuropeenne(Boolean temoinUnionEuropeenne) {
    this.temoinUnionEuropeenne = temoinUnionEuropeenne;
  }


  public PaysNationalite temoinAccords(Boolean temoinAccords) {
    this.temoinAccords = temoinAccords;
    return this;
  }

  /**
   * Indicateur si la nationalité du pays fait partie de l&#39;UEE EEE et accords pour les calculs des droits
   * @return temoinAccords
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEMOIN_ACCORDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getTemoinAccords() {
    return temoinAccords;
  }


  @JsonProperty(JSON_PROPERTY_TEMOIN_ACCORDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTemoinAccords(Boolean temoinAccords) {
    this.temoinAccords = temoinAccords;
  }


  public PaysNationalite codeIso3611(String codeIso3611) {
    this.codeIso3611 = codeIso3611;
    return this;
  }

  /**
   * code ISO 3611 pour paybox 3DSecure V2
   * @return codeIso3611
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CODE_ISO3611)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCodeIso3611() {
    return codeIso3611;
  }


  @JsonProperty(JSON_PROPERTY_CODE_ISO3611)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCodeIso3611(String codeIso3611) {
    this.codeIso3611 = codeIso3611;
  }


  @Override
  public PaysNationalite code(String code) {
    this.setCode(code);
    return this;
  }

  @Override
  public PaysNationalite libelleCourt(String libelleCourt) {
    this.setLibelleCourt(libelleCourt);
    return this;
  }

  @Override
  public PaysNationalite libelleLong(String libelleLong) {
    this.setLibelleLong(libelleLong);
    return this;
  }

  @Override
  public PaysNationalite libelleAffichage(String libelleAffichage) {
    this.setLibelleAffichage(libelleAffichage);
    return this;
  }

  @Override
  public PaysNationalite prioriteAffichage(Integer prioriteAffichage) {
    this.setPrioriteAffichage(prioriteAffichage);
    return this;
  }

  @Override
  public PaysNationalite dateDebutValidite(Date dateDebutValidite) {
    this.setDateDebutValidite(dateDebutValidite);
    return this;
  }

  @Override
  public PaysNationalite dateFinValidite(Date dateFinValidite) {
    this.setDateFinValidite(dateFinValidite);
    return this;
  }

  @Override
  public PaysNationalite temoinVisible(Boolean temoinVisible) {
    this.setTemoinVisible(temoinVisible);
    return this;
  }

  @Override
  public PaysNationalite temoinLivre(Boolean temoinLivre) {
    this.setTemoinLivre(temoinLivre);
    return this;
  }

  /**
   * Return true if this PaysNationalite object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaysNationalite paysNationalite = (PaysNationalite) o;
    return Objects.equals(this.typeNomenclature, paysNationalite.typeNomenclature) &&
        Objects.equals(this.continent, paysNationalite.continent) &&
        Objects.equals(this.libelleNationalite, paysNationalite.libelleNationalite) &&
        Objects.equals(this.codeDrapeau, paysNationalite.codeDrapeau) &&
        Objects.equals(this.temoinUnionEuropeenne, paysNationalite.temoinUnionEuropeenne) &&
        Objects.equals(this.temoinAccords, paysNationalite.temoinAccords) &&
        Objects.equals(this.codeIso3611, paysNationalite.codeIso3611) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(typeNomenclature, continent, libelleNationalite, codeDrapeau, temoinUnionEuropeenne, temoinAccords, codeIso3611, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaysNationalite {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    typeNomenclature: ").append(toIndentedString(typeNomenclature)).append("\n");
    sb.append("    continent: ").append(toIndentedString(continent)).append("\n");
    sb.append("    libelleNationalite: ").append(toIndentedString(libelleNationalite)).append("\n");
    sb.append("    codeDrapeau: ").append(toIndentedString(codeDrapeau)).append("\n");
    sb.append("    temoinUnionEuropeenne: ").append(toIndentedString(temoinUnionEuropeenne)).append("\n");
    sb.append("    temoinAccords: ").append(toIndentedString(temoinAccords)).append("\n");
    sb.append("    codeIso3611: ").append(toIndentedString(codeIso3611)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `typeNomenclature` to the URL query string
    if (getTypeNomenclature() != null) {
      joiner.add(String.format("%stypeNomenclature%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTypeNomenclature()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `code` to the URL query string
    if (getCode() != null) {
      joiner.add(String.format("%scode%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCode()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `libelleCourt` to the URL query string
    if (getLibelleCourt() != null) {
      joiner.add(String.format("%slibelleCourt%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLibelleCourt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `libelleLong` to the URL query string
    if (getLibelleLong() != null) {
      joiner.add(String.format("%slibelleLong%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLibelleLong()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `libelleAffichage` to the URL query string
    if (getLibelleAffichage() != null) {
      joiner.add(String.format("%slibelleAffichage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLibelleAffichage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `prioriteAffichage` to the URL query string
    if (getPrioriteAffichage() != null) {
      joiner.add(String.format("%sprioriteAffichage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPrioriteAffichage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `dateDebutValidite` to the URL query string
    if (getDateDebutValidite() != null) {
      joiner.add(String.format("%sdateDebutValidite%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDateDebutValidite()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `dateFinValidite` to the URL query string
    if (getDateFinValidite() != null) {
      joiner.add(String.format("%sdateFinValidite%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDateFinValidite()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `temoinVisible` to the URL query string
    if (getTemoinVisible() != null) {
      joiner.add(String.format("%stemoinVisible%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTemoinVisible()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `temoinLivre` to the URL query string
    if (getTemoinLivre() != null) {
      joiner.add(String.format("%stemoinLivre%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTemoinLivre()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `continent` to the URL query string
    if (getContinent() != null) {
      joiner.add(String.format("%scontinent%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getContinent()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `libelleNationalite` to the URL query string
    if (getLibelleNationalite() != null) {
      joiner.add(String.format("%slibelleNationalite%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLibelleNationalite()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `codeDrapeau` to the URL query string
    if (getCodeDrapeau() != null) {
      joiner.add(String.format("%scodeDrapeau%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCodeDrapeau()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `temoinUnionEuropeenne` to the URL query string
    if (getTemoinUnionEuropeenne() != null) {
      joiner.add(String.format("%stemoinUnionEuropeenne%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTemoinUnionEuropeenne()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `temoinAccords` to the URL query string
    if (getTemoinAccords() != null) {
      joiner.add(String.format("%stemoinAccords%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTemoinAccords()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `codeIso3611` to the URL query string
    if (getCodeIso3611() != null) {
      joiner.add(String.format("%scodeIso3611%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCodeIso3611()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("PaysNationalite", PaysNationalite.class);
  JSON.registerDiscriminator(PaysNationalite.class, "typeNomenclature", mappings);
}
}

